

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Dec 20 16:00:45 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F45K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           ; Version 1.41
    43                           ; Generated 25/01/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F45K80 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     
    77                           	psect	nvCOMRAM
    78  00004E                     __pnvCOMRAM:
    79                           	opt stack 0
    80  00004E                     _MAX_RT:
    81                           	opt stack 0
    82  00004E                     	ds	1
    83  0000                     _RXF2SIDL	set	3817
    84  0000                     _RXF2SIDH	set	3816
    85  0000                     _RXF2EIDL	set	3819
    86  0000                     _RXF2EIDH	set	3818
    87  0000                     _RXF0SIDL	set	3809
    88  0000                     _RXF0SIDH	set	3808
    89  0000                     _RXF0EIDL	set	3811
    90  0000                     _RXF0EIDH	set	3810
    91  0000                     _RXM1SIDL	set	3837
    92  0000                     _RXM1SIDH	set	3836
    93  0000                     _RXM1EIDL	set	3839
    94  0000                     _RXM1EIDH	set	3838
    95  0000                     _RXM0SIDL	set	3833
    96  0000                     _RXM0SIDH	set	3832
    97  0000                     _RXM0EIDL	set	3835
    98  0000                     _RXM0EIDH	set	3834
    99  0000                     _BRGCON3	set	3653
   100  0000                     _BRGCON2	set	3652
   101  0000                     _BRGCON1	set	3651
   102  0000                     _ANCON1	set	3932
   103  0000                     _ANCON0	set	3933
   104  0000                     _ANCON0bits	set	3933
   105  0000                     _CCP3CON	set	3917
   106  0000                     _CCP4CON	set	3914
   107  0000                     _CCPR3L	set	3918
   108  0000                     _CCPR4L	set	3915
   109  0000                     _RXB1SIDL	set	3890
   110  0000                     _RXB1SIDLbits	set	3890
   111  0000                     _RXB1DLC	set	3893
   112  0000                     _RXB1DLCbits	set	3893
   113  0000                     _RXB1D0	set	3894
   114  0000                     _RXB1CONbits	set	3888
   115  0000                     _PORTBbits	set	3969
   116  0000                     _PORTEbits	set	3972
   117  0000                     _PORTDbits	set	3971
   118  0000                     _PORTCbits	set	3970
   119  0000                     _T4CONbits	set	3976
   120  0000                     _PIR1bits	set	3998
   121  0000                     _LATAbits	set	3977
   122  0000                     _HLVDCON	set	4008
   123  0000                     _INTCON3bits	set	4080
   124  0000                     _TRISE	set	3990
   125  0000                     _TRISD	set	3989
   126  0000                     _TRISC	set	3988
   127  0000                     _TRISB	set	3987
   128  0000                     _TRISA	set	3986
   129  0000                     _RCON	set	4048
   130  0000                     _PIR1	set	3998
   131  0000                     _INTCON3	set	4080
   132  0000                     _INTCON2	set	4081
   133  0000                     _INTCON	set	4082
   134  0000                     _PORTE	set	3972
   135  0000                     _PORTD	set	3971
   136  0000                     _PORTC	set	3970
   137  0000                     _PORTB	set	3969
   138  0000                     _PORTA	set	3968
   139  0000                     _ADRESL	set	4035
   140  0000                     _ADRESH	set	4036
   141  0000                     _ADCON0bits	set	4034
   142  0000                     _ADCON2bits	set	4032
   143  0000                     _ADCON1	set	4033
   144  0000                     _ADCON0	set	4034
   145  0000                     _LATBbits	set	3978
   146  0000                     _LATEbits	set	3981
   147  0000                     _LATCbits	set	3979
   148  0000                     _TMR4	set	3975
   149  0000                     _CCPTMRSbits	set	3993
   150  0000                     _T4CON	set	3976
   151  0000                     _PR4	set	4009
   152  0000                     _RXB0SIDL	set	3938
   153  0000                     _RXB0SIDLbits	set	3938
   154  0000                     _RXB0DLC	set	3941
   155  0000                     _RXB0DLCbits	set	3941
   156  0000                     _RXB0D0	set	3942
   157  0000                     _COMSTATbits	set	3953
   158  0000                     _RXB0CONbits	set	3936
   159  0000                     _CIOCONbits	set	3952
   160  0000                     _ECANCON	set	3954
   161  0000                     _CANSTATbits	set	3950
   162  0000                     _CANCON	set	3951
   163  0000                     _LATDbits	set	3980
   164  0000                     _SSPBUF	set	4041
   165  0000                     _SSPSTATbits	set	4039
   166  0000                     _TRISCbits	set	3988
   167  0000                     _SSPCON1bits	set	4038
   168  0000                     _PIE1bits	set	3997
   169  0000                     _TXREG2	set	3961
   170  0000                     _RCREG2	set	3962
   171  0000                     _TRISDbits	set	3989
   172  0000                     _RCSTA2bits	set	4006
   173  0000                     _SPBRG2	set	3963
   174  0000                     _TXSTA2bits	set	4026
   175  0000                     _PEIE	set	32662
   176  0000                     _TRISE1	set	31921
   177  0000                     _TRISE0	set	31920
   178  0000                     _ADIE	set	31982
   179  0000                     _GIE	set	32663
   180  0000                     _ADIF	set	31990
   181  0000                     _RC2IF	set	32037
   182                           
   183                           ; #config settings
   184  0000                     
   185                           	psect	cinit
   186  0010A2                     __pcinit:
   187                           	opt stack 0
   188  0010A2                     start_initialization:
   189                           	opt stack 0
   190  0010A2                     __initialization:
   191                           	opt stack 0
   192                           
   193                           ; Clear objects allocated to BANK0 (54 bytes)
   194  0010A2  EE00  F060         	lfsr	0,__pbssBANK0
   195  0010A6  0E36               	movlw	54
   196  0010A8                     clear_0:
   197  0010A8  6AEE               	clrf	postinc0,c
   198  0010AA  06E8               	decf	wreg,f,c
   199  0010AC  E1FD               	bnz	clear_0
   200                           
   201                           ; Clear objects allocated to COMRAM (19 bytes)
   202  0010AE  EE00  F03B         	lfsr	0,__pbssCOMRAM
   203  0010B2  0E13               	movlw	19
   204  0010B4                     clear_1:
   205  0010B4  6AEE               	clrf	postinc0,c
   206  0010B6  06E8               	decf	wreg,f,c
   207  0010B8  E1FD               	bnz	clear_1
   208  0010BA                     end_of_initialization:
   209                           	opt stack 0
   210  0010BA                     __end_of__initialization:
   211                           	opt stack 0
   212  0010BA  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   213  0010BC  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   214  0010BE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   215  0010C0  6EF8               	movwf	tblptru,c
   216  0010C2  0100               	movlb	0
   217  0010C4  EF6A  F000         	goto	_main	;jump to C main() function
   218                           tblptru	equ	0xFF8
   219                           postinc0	equ	0xFEE
   220                           wreg	equ	0xFE8
   221                           
   222                           	psect	bssCOMRAM
   223  00003B                     __pbssCOMRAM:
   224                           	opt stack 0
   225  00003B                     _error_motor:
   226                           	opt stack 0
   227  00003B                     	ds	2
   228  00003D                     _duty:
   229                           	opt stack 0
   230  00003D                     	ds	2
   231  00003F                     _GO_STOP:
   232                           	opt stack 0
   233  00003F                     	ds	2
   234  000041                     _front_ultrasonic:
   235                           	opt stack 0
   236  000041                     	ds	2
   237  000043                     _back_ultrasonic:
   238                           	opt stack 0
   239  000043                     	ds	2
   240  000045                     _msg:
   241                           	opt stack 0
   242  000045                     	ds	2
   243  000047                     _last_FPGA:
   244                           	opt stack 0
   245  000047                     	ds	1
   246  000048                     _FPGA:
   247                           	opt stack 0
   248  000048                     	ds	1
   249  000049                     _CAN_msg_1:
   250                           	opt stack 0
   251  000049                     	ds	1
   252  00004A                     _CAN_msg_0:
   253                           	opt stack 0
   254  00004A                     	ds	1
   255  00004B                     _retransmissions:
   256                           	opt stack 0
   257  00004B                     	ds	1
   258  00004C                     _data_ACK:
   259                           	opt stack 0
   260  00004C                     	ds	1
   261  00004D                     _spi_transmission_done:
   262                           	opt stack 0
   263  00004D                     	ds	1
   264                           tblptru	equ	0xFF8
   265                           postinc0	equ	0xFEE
   266                           wreg	equ	0xFE8
   267                           
   268                           	psect	bssBANK0
   269  000060                     __pbssBANK0:
   270                           	opt stack 0
   271  000060                     dec_to_bin@F15303:
   272                           	opt stack 0
   273  000060                     	ds	20
   274  000074                     _buff:
   275                           	opt stack 0
   276  000074                     	ds	10
   277  00007E                     _buff_retr:
   278                           	opt stack 0
   279  00007E                     	ds	8
   280  000086                     _counter_no_data:
   281                           	opt stack 0
   282  000086                     	ds	2
   283  000088                     _ADC:
   284                           	opt stack 0
   285  000088                     	ds	2
   286  00008A                     _value0:
   287                           	opt stack 0
   288  00008A                     	ds	2
   289  00008C                     _value1:
   290                           	opt stack 0
   291  00008C                     	ds	2
   292  00008E                     _value:
   293                           	opt stack 0
   294  00008E                     	ds	2
   295  000090                     _counter_error_motor:
   296                           	opt stack 0
   297  000090                     	ds	2
   298  000092                     _horn_counter:
   299                           	opt stack 0
   300  000092                     	ds	2
   301  000094                     _REVERSE_STOP:
   302                           	opt stack 0
   303  000094                     	ds	2
   304                           tblptru	equ	0xFF8
   305                           postinc0	equ	0xFEE
   306                           wreg	equ	0xFE8
   307                           
   308                           	psect	cstackBANK0
   309  000096                     __pcstackBANK0:
   310                           	opt stack 0
   311  000096                     ??_set_duty:
   312                           
   313                           ; 1 bytes @ 0x0
   314  000096                     	ds	2
   315  000098                     _set_duty$2393:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x2
   319  000098                     	ds	2
   320  00009A                     set_duty@d:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x4
   324  00009A                     	ds	2
   325  00009C                     ??_brake:
   326  00009C                     ?_engine:
   327                           	opt stack 0
   328  00009C                     ?_engine_left:
   329                           	opt stack 0
   330  00009C                     ?_engine_right:
   331                           	opt stack 0
   332  00009C                     engine@D:
   333                           	opt stack 0
   334  00009C                     engine_left@D:
   335                           	opt stack 0
   336  00009C                     engine_right@D:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0x6
   340  00009C                     	ds	1
   341  00009D                     brake@duty:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x7
   345  00009D                     	ds	1
   346  00009E                     engine@dir:
   347                           	opt stack 0
   348  00009E                     engine_left@dir:
   349                           	opt stack 0
   350  00009E                     engine_right@dir:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x8
   354  00009E                     	ds	1
   355  00009F                     ??_engine:
   356  00009F                     ??_engine_left:
   357  00009F                     ??_engine_right:
   358  00009F                     brake@dir:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0x9
   362  00009F                     	ds	1
   363  0000A0                     brake@last_dir:
   364                           	opt stack 0
   365                           
   366                           ; 1 bytes @ 0xA
   367  0000A0                     	ds	1
   368  0000A1                     engine@next_duty:
   369                           	opt stack 0
   370  0000A1                     engine_left@next_duty:
   371                           	opt stack 0
   372  0000A1                     engine_right@next_duty:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0xB
   376  0000A1                     	ds	2
   377  0000A3                     engine@MAX:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0xD
   381  0000A3                     	ds	2
   382  0000A5                     ??_main:
   383                           
   384                           ; 1 bytes @ 0xF
   385  0000A5                     	ds	1
   386                           tblptru	equ	0xFF8
   387                           postinc0	equ	0xFEE
   388                           wreg	equ	0xFE8
   389                           
   390                           	psect	cstackCOMRAM
   391  000001                     __pcstackCOMRAM:
   392                           	opt stack 0
   393  000001                     ??_adc:
   394  000001                     
   395                           ; 1 bytes @ 0x0
   396  000001                     	ds	16
   397  000011                     ??_CAN_RX_read_0:
   398  000011                     ??_CAN_RX_read_1:
   399  000011                     ?___wmul:
   400                           	opt stack 0
   401  000011                     ?___awdiv:
   402                           	opt stack 0
   403  000011                     ?___aldiv:
   404                           	opt stack 0
   405  000011                     spi_write@data:
   406                           	opt stack 0
   407  000011                     set_dir@dir:
   408                           	opt stack 0
   409  000011                     ___wmul@multiplier:
   410                           	opt stack 0
   411  000011                     ___awdiv@dividend:
   412                           	opt stack 0
   413  000011                     ___aldiv@dividend:
   414                           	opt stack 0
   415                           
   416                           ; 4 bytes @ 0x10
   417  000011                     	ds	1
   418  000012                     ??_configure_RX:
   419  000012                     write_ACK@data:
   420                           	opt stack 0
   421  000012                     reset_RX@buffer_RX:
   422                           	opt stack 0
   423  000012                     check_MAX_RT@buffer:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x11
   427  000012                     	ds	1
   428  000013                     check_MAX_RT@MAX_RT:
   429                           	opt stack 0
   430  000013                     ___wmul@multiplicand:
   431                           	opt stack 0
   432  000013                     ___awdiv@divisor:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x12
   436  000013                     	ds	1
   437  000014                     configure_RX@j:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x13
   441  000014                     	ds	1
   442  000015                     ___awdiv@counter:
   443                           	opt stack 0
   444  000015                     ___wmul@product:
   445                           	opt stack 0
   446  000015                     ___aldiv@divisor:
   447                           	opt stack 0
   448                           
   449                           ; 4 bytes @ 0x14
   450  000015                     	ds	1
   451  000016                     ___awdiv@sign:
   452                           	opt stack 0
   453                           
   454                           ; 1 bytes @ 0x15
   455  000016                     	ds	1
   456  000017                     ___awdiv@quotient:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x16
   460  000017                     	ds	2
   461  000019                     ?_dec_to_bin:
   462                           	opt stack 0
   463  000019                     ___aldiv@counter:
   464                           	opt stack 0
   465  000019                     dec_to_bin@n:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x18
   469  000019                     	ds	1
   470  00001A                     ___aldiv@sign:
   471                           	opt stack 0
   472                           
   473                           ; 1 bytes @ 0x19
   474  00001A                     	ds	1
   475  00001B                     ??_dec_to_bin:
   476  00001B                     ___aldiv@quotient:
   477                           	opt stack 0
   478                           
   479                           ; 4 bytes @ 0x1A
   480  00001B                     	ds	2
   481  00001D                     dec_to_bin@A:
   482                           	opt stack 0
   483                           
   484                           ; 20 bytes @ 0x1C
   485  00001D                     	ds	2
   486  00001F                     UART_Init_2@baudrate:
   487                           	opt stack 0
   488                           
   489                           ; 4 bytes @ 0x1E
   490  00001F                     	ds	4
   491  000023                     ??_UART_Init_2:
   492                           
   493                           ; 1 bytes @ 0x22
   494  000023                     	ds	8
   495  00002B                     UART_Init_2@x:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0x2A
   499  00002B                     	ds	6
   500  000031                     dec_to_bin@bin:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x30
   504  000031                     	ds	2
   505  000033                     dec_to_bin@power:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x32
   509  000033                     	ds	2
   510  000035                     dec_to_bin@i:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x34
   514  000035                     	ds	2
   515  000037                     dec_to_bin@pos:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x36
   519  000037                     	ds	2
   520  000039                     set_duty@D:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x38
   524  000039                     	ds	2
   525                           tblptru	equ	0xFF8
   526                           postinc0	equ	0xFEE
   527                           wreg	equ	0xFE8
   528                           
   529 ;;
   530 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   531 ;;
   532 ;; *************** function _main *****************
   533 ;; Defined at:
   534 ;;		line 215 in file "nRF24L01_CAN_RX.c"
   535 ;; Parameters:    Size  Location     Type
   536 ;;		None
   537 ;; Auto vars:     Size  Location     Type
   538 ;;		None
   539 ;; Return value:  Size  Location     Type
   540 ;;                  1    wreg      void 
   541 ;; Registers used:
   542 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   543 ;; Tracked objects:
   544 ;;		On entry : 0/0
   545 ;;		On exit  : 0/0
   546 ;;		Unchanged: 0/0
   547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   550 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   551 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   552 ;;Total ram usage:        1 bytes
   553 ;; Hardware stack levels required when called:    5
   554 ;; This function calls:
   555 ;;		_CAN_RX_initialize
   556 ;;		_CAN_RX_read_0
   557 ;;		_CAN_RX_read_1
   558 ;;		_UART_Init_2
   559 ;;		_brake
   560 ;;		_check_MAX_RT
   561 ;;		_configure_RX
   562 ;;		_engine
   563 ;;		_engine_left
   564 ;;		_engine_right
   565 ;;		_flush
   566 ;;		_initPIC
   567 ;;		_init_spi_master
   568 ;;		_reset_MAX_RT
   569 ;;		_reset_RX
   570 ;;		_set_AD
   571 ;;		_set_PWM
   572 ;;		_set_dir
   573 ;;		_set_duty
   574 ;;		_write_ACK
   575 ;; This function is called by:
   576 ;;		Startup code after reset
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580                           	psect	text0
   581  0000D4                     __ptext0:
   582                           	opt stack 0
   583  0000D4                     _main:
   584                           	opt stack 26
   585                           
   586                           ;nRF24L01_CAN_RX.c: 218: initPIC();
   587                           
   588                           ;incstack = 0
   589  0000D4  ECCC  F004         	call	_initPIC	;wreg free
   590                           
   591                           ;nRF24L01_CAN_RX.c: 219: UART_Init_2(2400);
   592  0000D8  0E60               	movlw	96
   593  0000DA  6E1F               	movwf	UART_Init_2@baudrate,c
   594  0000DC  0E09               	movlw	9
   595  0000DE  6E20               	movwf	UART_Init_2@baudrate+1,c
   596  0000E0  0E00               	movlw	0
   597  0000E2  6E21               	movwf	UART_Init_2@baudrate+2,c
   598  0000E4  0E00               	movlw	0
   599  0000E6  6E22               	movwf	UART_Init_2@baudrate+3,c
   600  0000E8  ECAE  F003         	call	_UART_Init_2	;wreg free
   601                           
   602                           ;nRF24L01_CAN_RX.c: 220: init_spi_master();
   603  0000EC  ECA7  F008         	call	_init_spi_master	;wreg free
   604                           
   605                           ;nRF24L01_CAN_RX.c: 221: CAN_RX_initialize();
   606  0000F0  ECAE  F005         	call	_CAN_RX_initialize	;wreg free
   607                           
   608                           ;nRF24L01_CAN_RX.c: 222: set_dir('S');
   609  0000F4  0E53               	movlw	83
   610  0000F6  ECDF  F007         	call	_set_dir
   611                           
   612                           ;nRF24L01_CAN_RX.c: 223: set_PWM();
   613  0000FA  EC98  F008         	call	_set_PWM	;wreg free
   614                           
   615                           ;nRF24L01_CAN_RX.c: 224: set_duty(duty);
   616  0000FE  C03D  F039         	movff	_duty,set_duty@D
   617  000102  C03E  F03A         	movff	_duty+1,set_duty@D+1
   618  000106  EC42  F007         	call	_set_duty	;wreg free
   619                           
   620                           ;nRF24L01_CAN_RX.c: 225: _delay((unsigned long)((10)*(8000000/4000.0)));
   621  00010A  0E1A               	movlw	26
   622  00010C  0100               	movlb	0	; () banked
   623  00010E  6FA5               	movwf	??_main& (0+255),b
   624  000110  0EF8               	movlw	248
   625  000112                     u2777:
   626  000112  2EE8               	decfsz	wreg,f,c
   627  000114  D7FE               	bra	u2777
   628  000116  2FA5               	decfsz	??_main& (0+255),f,b
   629  000118  D7FC               	bra	u2777
   630  00011A  F000               	nop	
   631                           
   632                           ;nRF24L01_CAN_RX.c: 226: configure_RX();
   633  00011C  EC16  F003         	call	_configure_RX	;wreg free
   634                           
   635                           ;nRF24L01_CAN_RX.c: 227: _delay((unsigned long)((20)*(8000000/4000.0)));
   636  000120  0E34               	movlw	52
   637  000122  0100               	movlb	0	; () banked
   638  000124  6FA5               	movwf	??_main& (0+255),b
   639  000126  0EF1               	movlw	241
   640  000128                     u2787:
   641  000128  2EE8               	decfsz	wreg,f,c
   642  00012A  D7FE               	bra	u2787
   643  00012C  2FA5               	decfsz	??_main& (0+255),f,b
   644  00012E  D7FC               	bra	u2787
   645  000130  D000               	nop2	
   646                           
   647                           ;nRF24L01_CAN_RX.c: 229: PIR1bits.ADIF = 0;
   648  000132  9C9E               	bcf	3998,6,c	;volatile
   649                           
   650                           ;nRF24L01_CAN_RX.c: 230: PIE1bits.ADIE = 1;
   651  000134  8C9D               	bsf	3997,6,c	;volatile
   652                           
   653                           ;nRF24L01_CAN_RX.c: 231: set_AD();
   654  000136  ECC0  F008         	call	_set_AD	;wreg free
   655                           
   656                           ;nRF24L01_CAN_RX.c: 232: PEIE = 1;
   657  00013A  8CF2               	bsf	intcon,6,c	;volatile
   658                           
   659                           ;nRF24L01_CAN_RX.c: 233: GIE = 1;
   660  00013C  8EF2               	bsf	intcon,7,c	;volatile
   661                           
   662                           ;nRF24L01_CAN_RX.c: 235: T4CONbits.TMR4ON = 1;
   663  00013E  8488               	bsf	3976,2,c	;volatile
   664  000140                     l2988:
   665                           
   666                           ;nRF24L01_CAN_RX.c: 239: LATAbits.LATA3 = !LATAbits.LATA3;
   667  000140  B689               	btfsc	3977,3,c	;volatile
   668  000142  D004               	goto	u2280
   669  000144  0100               	movlb	0	; () banked
   670  000146  6BA5               	clrf	??_main& (0+255),b
   671  000148  2BA5               	incf	??_main& (0+255),f,b
   672  00014A  D002               	goto	u2298
   673  00014C                     u2280:
   674  00014C  0100               	movlb	0	; () banked
   675  00014E  6BA5               	clrf	??_main& (0+255),b
   676  000150                     u2298:
   677  000150  0100               	movlb	0	; () banked
   678  000152  47A5               	rlncf	??_main& (0+255),f,b
   679  000154  47A5               	rlncf	??_main& (0+255),f,b
   680  000156  47A5               	rlncf	??_main& (0+255),f,b
   681  000158  5089               	movf	3977,w,c	;volatile
   682  00015A  0100               	movlb	0	; () banked
   683  00015C  19A5               	xorwf	??_main& (0+255),w,b
   684  00015E  0BF7               	andlw	-9
   685  000160  19A5               	xorwf	??_main& (0+255),w,b
   686  000162  6E89               	movwf	3977,c	;volatile
   687                           
   688                           ; BSR set to: 0
   689                           ;nRF24L01_CAN_RX.c: 241: if(ADCON0bits.GO == 0) ADCON0bits.GO = 1;
   690  000164  A2C2               	btfss	4034,1,c	;volatile
   691                           
   692                           ; BSR set to: 0
   693  000166  82C2               	bsf	4034,1,c	;volatile
   694                           
   695                           ; BSR set to: 0
   696                           ;nRF24L01_CAN_RX.c: 243: if (check_MAX_RT() == 1) {
   697                           
   698                           ; BSR set to: 0
   699  000168  EC77  F008         	call	_check_MAX_RT	;wreg free
   700  00016C  06E8               	decf	wreg,f,c
   701  00016E  A4D8               	btfss	status,2,c
   702  000170  D00F               	goto	l3002
   703                           
   704                           ;nRF24L01_CAN_RX.c: 244: reset_MAX_RT();
   705  000172  ECC9  F008         	call	_reset_MAX_RT	;wreg free
   706                           
   707                           ;nRF24L01_CAN_RX.c: 245: flush();
   708  000176  ECB5  F008         	call	_flush	;wreg free
   709                           
   710                           ;nRF24L01_CAN_RX.c: 246: configure_RX();
   711  00017A  EC16  F003         	call	_configure_RX	;wreg free
   712                           
   713                           ;nRF24L01_CAN_RX.c: 247: _delay((unsigned long)((1)*(8000000/4000.0)));
   714  00017E  0E03               	movlw	3
   715  000180  0100               	movlb	0	; () banked
   716  000182  6FA5               	movwf	??_main& (0+255),b
   717  000184  0E97               	movlw	151
   718  000186                     u2797:
   719  000186  2EE8               	decfsz	wreg,f,c
   720  000188  D7FE               	bra	u2797
   721  00018A  2FA5               	decfsz	??_main& (0+255),f,b
   722  00018C  D7FC               	bra	u2797
   723  00018E  D000               	nop2	
   724  000190                     l3002:
   725                           
   726                           ;nRF24L01_CAN_RX.c: 248: }
   727                           ;nRF24L01_CAN_RX.c: 250: CAN_msg_0 = CAN_RX_read_0();
   728  000190  EC66  F006         	call	_CAN_RX_read_0	;wreg free
   729  000194  6E4A               	movwf	_CAN_msg_0,c
   730                           
   731                           ;nRF24L01_CAN_RX.c: 251: CAN_msg_1 = CAN_RX_read_1();
   732  000196  EC0C  F006         	call	_CAN_RX_read_1	;wreg free
   733  00019A  6E49               	movwf	_CAN_msg_1,c
   734                           
   735                           ;nRF24L01_CAN_RX.c: 253: switch (CAN_msg_0){
   736  00019C  D018               	goto	l3014
   737  00019E                     l3006:
   738                           
   739                           ;nRF24L01_CAN_RX.c: 256: REVERSE_STOP = 0;
   740  00019E  0E00               	movlw	0
   741  0001A0  0100               	movlb	0	; () banked
   742  0001A2  6F95               	movwf	(_REVERSE_STOP+1)& (0+255),b
   743  0001A4  0E00               	movlw	0
   744  0001A6  D004               	goto	L1
   745  0001A8                     l3008:
   746                           
   747                           ;nRF24L01_CAN_RX.c: 261: REVERSE_STOP = 1;
   748  0001A8  0E00               	movlw	0
   749  0001AA  0100               	movlb	0	; () banked
   750  0001AC  6F95               	movwf	(_REVERSE_STOP+1)& (0+255),b
   751  0001AE  0E01               	movlw	1
   752  0001B0                     L1:
   753  0001B0  6F94               	movwf	_REVERSE_STOP& (0+255),b
   754                           
   755                           ;nRF24L01_CAN_RX.c: 262: back_ultrasonic = 1;
   756  0001B2  0E00               	movlw	0
   757  0001B4  6E44               	movwf	_back_ultrasonic+1,c
   758  0001B6  0E01               	movlw	1
   759  0001B8                     L2:
   760  0001B8  6E43               	movwf	_back_ultrasonic,c
   761                           
   762                           ;nRF24L01_CAN_RX.c: 268: break;
   763  0001BA  D029               	goto	l3024
   764  0001BC                     l3012:
   765                           
   766                           ;nRF24L01_CAN_RX.c: 271: REVERSE_STOP = 0;
   767  0001BC  0E00               	movlw	0
   768  0001BE  0100               	movlb	0	; () banked
   769  0001C0  6F95               	movwf	(_REVERSE_STOP+1)& (0+255),b
   770  0001C2  0E00               	movlw	0
   771  0001C4  6F94               	movwf	_REVERSE_STOP& (0+255),b
   772                           
   773                           ;nRF24L01_CAN_RX.c: 272: back_ultrasonic = 0;
   774  0001C6  0E00               	movlw	0
   775  0001C8  6E44               	movwf	_back_ultrasonic+1,c
   776  0001CA  0E00               	movlw	0
   777  0001CC  D7F5               	goto	L2
   778  0001CE                     l3014:
   779  0001CE  504A               	movf	_CAN_msg_0,w,c
   780                           
   781                           ; Switch size 1, requested type "space"
   782                           ; Number of cases is 3, Range of values is 66 to 98
   783                           ; switch strategies available:
   784                           ; Name         Instructions Cycles
   785                           ; simple_byte           10     6 (average)
   786                           ;	Chosen strategy is simple_byte
   787  0001D0  0A42               	xorlw	66	; case 66
   788  0001D2  B4D8               	btfsc	status,2,c
   789  0001D4  D7E4               	goto	l3006
   790  0001D6  0A15               	xorlw	21	; case 87
   791  0001D8  B4D8               	btfsc	status,2,c
   792  0001DA  D7F0               	goto	l3012
   793  0001DC  0A35               	xorlw	53	; case 98
   794  0001DE  B4D8               	btfsc	status,2,c
   795  0001E0  D7E3               	goto	l3008
   796  0001E2  D7EC               	goto	l3012
   797  0001E4                     l3016:
   798                           
   799                           ;nRF24L01_CAN_RX.c: 279: GO_STOP = 0;
   800  0001E4  0E00               	movlw	0
   801  0001E6  6E40               	movwf	_GO_STOP+1,c
   802  0001E8  0E00               	movlw	0
   803  0001EA  D003               	goto	L3
   804  0001EC                     l3018:
   805                           
   806                           ;nRF24L01_CAN_RX.c: 284: GO_STOP = 1;
   807  0001EC  0E00               	movlw	0
   808  0001EE  6E40               	movwf	_GO_STOP+1,c
   809  0001F0  0E01               	movlw	1
   810  0001F2                     L3:
   811  0001F2  6E3F               	movwf	_GO_STOP,c
   812                           
   813                           ;nRF24L01_CAN_RX.c: 285: front_ultrasonic = 1;
   814  0001F4  0E00               	movlw	0
   815  0001F6  6E42               	movwf	_front_ultrasonic+1,c
   816  0001F8  0E01               	movlw	1
   817  0001FA                     L4:
   818  0001FA  6E41               	movwf	_front_ultrasonic,c
   819                           
   820                           ;nRF24L01_CAN_RX.c: 291: break;
   821  0001FC  D013               	goto	l3026
   822  0001FE                     l3022:
   823                           
   824                           ;nRF24L01_CAN_RX.c: 294: GO_STOP = 0;
   825  0001FE  0E00               	movlw	0
   826  000200  6E40               	movwf	_GO_STOP+1,c
   827  000202  0E00               	movlw	0
   828  000204  6E3F               	movwf	_GO_STOP,c
   829                           
   830                           ;nRF24L01_CAN_RX.c: 295: front_ultrasonic = 0;
   831  000206  0E00               	movlw	0
   832  000208  6E42               	movwf	_front_ultrasonic+1,c
   833  00020A  0E00               	movlw	0
   834  00020C  D7F6               	goto	L4
   835  00020E                     l3024:
   836  00020E  5049               	movf	_CAN_msg_1,w,c
   837                           
   838                           ; Switch size 1, requested type "space"
   839                           ; Number of cases is 3, Range of values is 65 to 97
   840                           ; switch strategies available:
   841                           ; Name         Instructions Cycles
   842                           ; simple_byte           10     6 (average)
   843                           ;	Chosen strategy is simple_byte
   844  000210  0A41               	xorlw	65	; case 65
   845  000212  B4D8               	btfsc	status,2,c
   846  000214  D7E7               	goto	l3016
   847  000216  0A19               	xorlw	25	; case 88
   848  000218  B4D8               	btfsc	status,2,c
   849  00021A  D7F1               	goto	l3022
   850  00021C  0A39               	xorlw	57	; case 97
   851  00021E  B4D8               	btfsc	status,2,c
   852  000220  D7E5               	goto	l3018
   853  000222  D7ED               	goto	l3022
   854  000224                     l3026:
   855                           
   856                           ;nRF24L01_CAN_RX.c: 306: if((value0<2250)&&(value1<2250)&&(PORTCbits.RC1==1)&&(PORTDbits
      +                          .RD4==1)&&(PORTEbits.RE0==1)&&(PORTBbits.RB0==1)) error_motor = 0;
   857  000224  0ECA               	movlw	202
   858  000226  0100               	movlb	0	; () banked
   859  000228  5D8A               	subwf	_value0& (0+255),w,b
   860  00022A  0E08               	movlw	8
   861  00022C  0100               	movlb	0	; () banked
   862  00022E  598B               	subwfb	(_value0+1)& (0+255),w,b
   863  000230  B0D8               	btfsc	status,0,c
   864  000232  D013               	goto	l3040
   865                           
   866                           ; BSR set to: 0
   867  000234  0ECA               	movlw	202
   868  000236  0100               	movlb	0	; () banked
   869  000238  5D8C               	subwf	_value1& (0+255),w,b
   870  00023A  0E08               	movlw	8
   871  00023C  0100               	movlb	0	; () banked
   872  00023E  598D               	subwfb	(_value1+1)& (0+255),w,b
   873  000240  A0D8               	btfss	status,0,c
   874                           
   875                           ; BSR set to: 0
   876  000242  A282               	btfss	3970,1,c	;volatile
   877  000244  D00A               	goto	l3040
   878                           
   879                           ; BSR set to: 0
   880  000246  B883               	btfsc	3971,4,c	;volatile
   881                           
   882                           ; BSR set to: 0
   883  000248  A084               	btfss	3972,0,c	;volatile
   884  00024A  D007               	goto	l3040
   885                           
   886                           ; BSR set to: 0
   887  00024C  A081               	btfss	3969,0,c	;volatile
   888  00024E  D005               	goto	l3040
   889                           
   890                           ; BSR set to: 0
   891  000250  0E00               	movlw	0
   892  000252  6E3C               	movwf	_error_motor+1,c
   893  000254  0E00               	movlw	0
   894  000256  6E3B               	movwf	_error_motor,c
   895  000258  D016               	goto	l3046
   896  00025A                     l3040:
   897                           
   898                           ; BSR set to: 0
   899                           ;nRF24L01_CAN_RX.c: 307: else
   900                           ;nRF24L01_CAN_RX.c: 308: {
   901                           ;nRF24L01_CAN_RX.c: 309: if (counter_error_motor == 2)
   902  00025A  0E02               	movlw	2
   903  00025C  0100               	movlb	0	; () banked
   904  00025E  1990               	xorwf	_counter_error_motor& (0+255),w,b
   905  000260  0100               	movlb	0	; () banked
   906  000262  1191               	iorwf	(_counter_error_motor+1)& (0+255),w,b
   907  000264  A4D8               	btfss	status,2,c
   908  000266  D00C               	goto	l3044
   909                           
   910                           ; BSR set to: 0
   911                           ;nRF24L01_CAN_RX.c: 310: {
   912                           ;nRF24L01_CAN_RX.c: 311: FPGA = 0x53;
   913  000268  0E53               	movlw	83
   914  00026A  6E48               	movwf	_FPGA,c
   915                           
   916                           ;nRF24L01_CAN_RX.c: 312: error_motor = 1;
   917  00026C  0E00               	movlw	0
   918  00026E  6E3C               	movwf	_error_motor+1,c
   919  000270  0E01               	movlw	1
   920  000272  6E3B               	movwf	_error_motor,c
   921                           
   922                           ;nRF24L01_CAN_RX.c: 313: counter_error_motor = 0;
   923  000274  0E00               	movlw	0
   924  000276  0100               	movlb	0	; () banked
   925  000278  6F91               	movwf	(_counter_error_motor+1)& (0+255),b
   926  00027A  0E00               	movlw	0
   927  00027C  6F90               	movwf	_counter_error_motor& (0+255),b
   928                           
   929                           ;nRF24L01_CAN_RX.c: 314: }
   930  00027E  D003               	goto	l3046
   931  000280                     l3044:
   932                           
   933                           ; BSR set to: 0
   934                           ;nRF24L01_CAN_RX.c: 315: else counter_error_motor++;
   935  000280  0100               	movlb	0	; () banked
   936  000282  4B90               	infsnz	_counter_error_motor& (0+255),f,b
   937  000284  2B91               	incf	(_counter_error_motor+1)& (0+255),f,b
   938  000286                     l3046:
   939                           
   940                           ; BSR set to: 0
   941                           ;nRF24L01_CAN_RX.c: 316: }
   942                           ;nRF24L01_CAN_RX.c: 321: if (PORTDbits.RD0 == 0){
   943  000286  B083               	btfsc	3971,0,c	;volatile
   944  000288  D0A7               	goto	l3122
   945                           
   946                           ; BSR set to: 0
   947                           ;nRF24L01_CAN_RX.c: 323: counter_no_data = 0;
   948  00028A  0E00               	movlw	0
   949  00028C  0100               	movlb	0	; () banked
   950  00028E  6F87               	movwf	(_counter_no_data+1)& (0+255),b
   951  000290  0E00               	movlw	0
   952  000292  6F86               	movwf	_counter_no_data& (0+255),b
   953                           
   954                           ; BSR set to: 0
   955                           ;nRF24L01_CAN_RX.c: 325: LATAbits.LATA2 = 1;
   956  000294  8489               	bsf	3977,2,c	;volatile
   957                           
   958                           ; BSR set to: 0
   959                           ;nRF24L01_CAN_RX.c: 326: _delay((unsigned long)((10)*(8000000/4000.0)));
   960  000296  0E1A               	movlw	26
   961  000298  0100               	movlb	0	; () banked
   962  00029A  6FA5               	movwf	??_main& (0+255),b
   963  00029C  0EF8               	movlw	248
   964  00029E                     u2807:
   965  00029E  2EE8               	decfsz	wreg,f,c
   966  0002A0  D7FE               	bra	u2807
   967  0002A2  2FA5               	decfsz	??_main& (0+255),f,b
   968  0002A4  D7FC               	bra	u2807
   969  0002A6  F000               	nop	
   970                           
   971                           ;nRF24L01_CAN_RX.c: 327: LATAbits.LATA2 = 0;
   972  0002A8  9489               	bcf	3977,2,c	;volatile
   973                           
   974                           ;nRF24L01_CAN_RX.c: 333: if(front_ultrasonic == 0 && back_ultrasonic == 0 && error_motor
      +                           == 0){
   975  0002AA  5041               	movf	_front_ultrasonic,w,c
   976  0002AC  1042               	iorwf	_front_ultrasonic+1,w,c
   977  0002AE  A4D8               	btfss	status,2,c
   978  0002B0  D00E               	goto	l3064
   979  0002B2  5043               	movf	_back_ultrasonic,w,c
   980  0002B4  1044               	iorwf	_back_ultrasonic+1,w,c
   981  0002B6  A4D8               	btfss	status,2,c
   982  0002B8  D00A               	goto	l3064
   983  0002BA  503B               	movf	_error_motor,w,c
   984  0002BC  103C               	iorwf	_error_motor+1,w,c
   985  0002BE  A4D8               	btfss	status,2,c
   986  0002C0  D006               	goto	l3064
   987                           
   988                           ;nRF24L01_CAN_RX.c: 334: write_ACK(0x41);
   989  0002C2  0E41               	movlw	65
   990  0002C4  EC89  F008         	call	_write_ACK
   991                           
   992                           ;nRF24L01_CAN_RX.c: 335: FPGA = reset_RX();
   993  0002C8  EC39  F008         	call	_reset_RX	;wreg free
   994  0002CC  D083               	goto	L12
   995  0002CE                     l3064:
   996  0002CE  5041               	movf	_front_ultrasonic,w,c
   997  0002D0  1042               	iorwf	_front_ultrasonic+1,w,c
   998  0002D2  A4D8               	btfss	status,2,c
   999  0002D4  D00E               	goto	l3072
  1000  0002D6  5043               	movf	_back_ultrasonic,w,c
  1001  0002D8  1044               	iorwf	_back_ultrasonic+1,w,c
  1002  0002DA  A4D8               	btfss	status,2,c
  1003  0002DC  D00A               	goto	l3072
  1004  0002DE  043B               	decf	_error_motor,w,c
  1005  0002E0  103C               	iorwf	_error_motor+1,w,c
  1006  0002E2  A4D8               	btfss	status,2,c
  1007  0002E4  D006               	goto	l3072
  1008                           
  1009                           ;nRF24L01_CAN_RX.c: 337: write_ACK(0x42);
  1010  0002E6  0E42               	movlw	66
  1011  0002E8  EC89  F008         	call	_write_ACK
  1012                           
  1013                           ;nRF24L01_CAN_RX.c: 338: FPGA = reset_RX();
  1014  0002EC  EC39  F008         	call	_reset_RX	;wreg free
  1015  0002F0  D071               	goto	L12
  1016  0002F2                     l3072:
  1017  0002F2  5041               	movf	_front_ultrasonic,w,c
  1018  0002F4  1042               	iorwf	_front_ultrasonic+1,w,c
  1019  0002F6  A4D8               	btfss	status,2,c
  1020  0002F8  D00E               	goto	l3080
  1021  0002FA  0443               	decf	_back_ultrasonic,w,c
  1022  0002FC  1044               	iorwf	_back_ultrasonic+1,w,c
  1023  0002FE  A4D8               	btfss	status,2,c
  1024  000300  D00A               	goto	l3080
  1025  000302  503B               	movf	_error_motor,w,c
  1026  000304  103C               	iorwf	_error_motor+1,w,c
  1027  000306  A4D8               	btfss	status,2,c
  1028  000308  D006               	goto	l3080
  1029                           
  1030                           ;nRF24L01_CAN_RX.c: 340: write_ACK(0x43);
  1031  00030A  0E43               	movlw	67
  1032  00030C  EC89  F008         	call	_write_ACK
  1033                           
  1034                           ;nRF24L01_CAN_RX.c: 341: FPGA = reset_RX();
  1035  000310  EC39  F008         	call	_reset_RX	;wreg free
  1036  000314  D05F               	goto	L12
  1037  000316                     l3080:
  1038  000316  5041               	movf	_front_ultrasonic,w,c
  1039  000318  1042               	iorwf	_front_ultrasonic+1,w,c
  1040  00031A  A4D8               	btfss	status,2,c
  1041  00031C  D00E               	goto	l3088
  1042  00031E  0443               	decf	_back_ultrasonic,w,c
  1043  000320  1044               	iorwf	_back_ultrasonic+1,w,c
  1044  000322  A4D8               	btfss	status,2,c
  1045  000324  D00A               	goto	l3088
  1046  000326  043B               	decf	_error_motor,w,c
  1047  000328  103C               	iorwf	_error_motor+1,w,c
  1048  00032A  A4D8               	btfss	status,2,c
  1049  00032C  D006               	goto	l3088
  1050                           
  1051                           ;nRF24L01_CAN_RX.c: 343: write_ACK(0x44);
  1052  00032E  0E44               	movlw	68
  1053  000330  EC89  F008         	call	_write_ACK
  1054                           
  1055                           ;nRF24L01_CAN_RX.c: 344: FPGA = reset_RX();
  1056  000334  EC39  F008         	call	_reset_RX	;wreg free
  1057  000338  D04D               	goto	L12
  1058  00033A                     l3088:
  1059  00033A  0441               	decf	_front_ultrasonic,w,c
  1060  00033C  1042               	iorwf	_front_ultrasonic+1,w,c
  1061  00033E  A4D8               	btfss	status,2,c
  1062  000340  D00E               	goto	l3096
  1063  000342  5043               	movf	_back_ultrasonic,w,c
  1064  000344  1044               	iorwf	_back_ultrasonic+1,w,c
  1065  000346  A4D8               	btfss	status,2,c
  1066  000348  D00A               	goto	l3096
  1067  00034A  503B               	movf	_error_motor,w,c
  1068  00034C  103C               	iorwf	_error_motor+1,w,c
  1069  00034E  A4D8               	btfss	status,2,c
  1070  000350  D006               	goto	l3096
  1071                           
  1072                           ;nRF24L01_CAN_RX.c: 346: write_ACK(0x45);
  1073  000352  0E45               	movlw	69
  1074  000354  EC89  F008         	call	_write_ACK
  1075                           
  1076                           ;nRF24L01_CAN_RX.c: 347: FPGA = reset_RX();
  1077  000358  EC39  F008         	call	_reset_RX	;wreg free
  1078  00035C  D03B               	goto	L12
  1079  00035E                     l3096:
  1080  00035E  0441               	decf	_front_ultrasonic,w,c
  1081  000360  1042               	iorwf	_front_ultrasonic+1,w,c
  1082  000362  A4D8               	btfss	status,2,c
  1083  000364  D00E               	goto	l3104
  1084  000366  5043               	movf	_back_ultrasonic,w,c
  1085  000368  1044               	iorwf	_back_ultrasonic+1,w,c
  1086  00036A  A4D8               	btfss	status,2,c
  1087  00036C  D00A               	goto	l3104
  1088  00036E  043B               	decf	_error_motor,w,c
  1089  000370  103C               	iorwf	_error_motor+1,w,c
  1090  000372  A4D8               	btfss	status,2,c
  1091  000374  D006               	goto	l3104
  1092                           
  1093                           ;nRF24L01_CAN_RX.c: 349: write_ACK(0x46);
  1094  000376  0E46               	movlw	70
  1095  000378  EC89  F008         	call	_write_ACK
  1096                           
  1097                           ;nRF24L01_CAN_RX.c: 350: FPGA = reset_RX();
  1098  00037C  EC39  F008         	call	_reset_RX	;wreg free
  1099  000380  D029               	goto	L12
  1100  000382                     l3104:
  1101  000382  0441               	decf	_front_ultrasonic,w,c
  1102  000384  1042               	iorwf	_front_ultrasonic+1,w,c
  1103  000386  A4D8               	btfss	status,2,c
  1104  000388  D00E               	goto	l3112
  1105  00038A  0443               	decf	_back_ultrasonic,w,c
  1106  00038C  1044               	iorwf	_back_ultrasonic+1,w,c
  1107  00038E  A4D8               	btfss	status,2,c
  1108  000390  D00A               	goto	l3112
  1109  000392  503B               	movf	_error_motor,w,c
  1110  000394  103C               	iorwf	_error_motor+1,w,c
  1111  000396  A4D8               	btfss	status,2,c
  1112  000398  D006               	goto	l3112
  1113                           
  1114                           ;nRF24L01_CAN_RX.c: 352: write_ACK(0x47);
  1115  00039A  0E47               	movlw	71
  1116  00039C  EC89  F008         	call	_write_ACK
  1117                           
  1118                           ;nRF24L01_CAN_RX.c: 353: FPGA = reset_RX();
  1119  0003A0  EC39  F008         	call	_reset_RX	;wreg free
  1120  0003A4  D017               	goto	L12
  1121  0003A6                     l3112:
  1122  0003A6  0441               	decf	_front_ultrasonic,w,c
  1123  0003A8  1042               	iorwf	_front_ultrasonic+1,w,c
  1124  0003AA  A4D8               	btfss	status,2,c
  1125  0003AC  D00E               	goto	l3120
  1126  0003AE  0443               	decf	_back_ultrasonic,w,c
  1127  0003B0  1044               	iorwf	_back_ultrasonic+1,w,c
  1128  0003B2  A4D8               	btfss	status,2,c
  1129  0003B4  D00A               	goto	l3120
  1130  0003B6  043B               	decf	_error_motor,w,c
  1131  0003B8  103C               	iorwf	_error_motor+1,w,c
  1132  0003BA  A4D8               	btfss	status,2,c
  1133  0003BC  D006               	goto	l3120
  1134                           
  1135                           ;nRF24L01_CAN_RX.c: 355: write_ACK(0x48);
  1136  0003BE  0E48               	movlw	72
  1137  0003C0  EC89  F008         	call	_write_ACK
  1138                           
  1139                           ;nRF24L01_CAN_RX.c: 356: FPGA = reset_RX();
  1140  0003C4  EC39  F008         	call	_reset_RX	;wreg free
  1141  0003C8  D005               	goto	L12
  1142  0003CA                     l3120:
  1143                           
  1144                           ;nRF24L01_CAN_RX.c: 358: write_ACK(0x65);
  1145  0003CA  0E65               	movlw	101
  1146  0003CC  EC89  F008         	call	_write_ACK
  1147                           
  1148                           ;nRF24L01_CAN_RX.c: 359: FPGA = reset_RX();
  1149  0003D0  EC39  F008         	call	_reset_RX	;wreg free
  1150  0003D4                     L12:
  1151  0003D4  6E48               	movwf	_FPGA,c
  1152                           
  1153                           ;nRF24L01_CAN_RX.c: 360: }
  1154                           ;nRF24L01_CAN_RX.c: 361: }else{
  1155  0003D6  D003               	goto	l3124
  1156  0003D8                     l3122:
  1157                           
  1158                           ;nRF24L01_CAN_RX.c: 362: counter_no_data++;
  1159  0003D8  0100               	movlb	0	; () banked
  1160  0003DA  4B86               	infsnz	_counter_no_data& (0+255),f,b
  1161  0003DC  2B87               	incf	(_counter_no_data+1)& (0+255),f,b
  1162  0003DE                     l3124:
  1163                           
  1164                           ;nRF24L01_CAN_RX.c: 363: }
  1165                           ;nRF24L01_CAN_RX.c: 365: if(counter_no_data > 20){
  1166  0003DE  0100               	movlb	0	; () banked
  1167  0003E0  BF87               	btfsc	(_counter_no_data+1)& (0+255),7,b
  1168  0003E2  D103               	goto	l3226
  1169  0003E4  0100               	movlb	0	; () banked
  1170  0003E6  5187               	movf	(_counter_no_data+1)& (0+255),w,b
  1171  0003E8  E105               	bnz	u2640
  1172  0003EA  0E15               	movlw	21
  1173  0003EC  0100               	movlb	0	; () banked
  1174  0003EE  5D86               	subwf	_counter_no_data& (0+255),w,b
  1175  0003F0  A0D8               	btfss	status,0,c
  1176  0003F2  D0FB               	goto	l3226
  1177  0003F4                     u2640:
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;nRF24L01_CAN_RX.c: 368: FPGA = 0x53;
  1181  0003F4  0E53               	movlw	83
  1182  0003F6  6E48               	movwf	_FPGA,c
  1183                           
  1184                           ;nRF24L01_CAN_RX.c: 369: error_motor = 1;
  1185  0003F8  0E00               	movlw	0
  1186  0003FA  6E3C               	movwf	_error_motor+1,c
  1187  0003FC  0E01               	movlw	1
  1188  0003FE  6E3B               	movwf	_error_motor,c
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;nRF24L01_CAN_RX.c: 370: }
  1192                           ;nRF24L01_CAN_RX.c: 372: switch (FPGA) {
  1193  000400  D0F4               	goto	l3226
  1194  000402                     l3128:
  1195                           
  1196                           ;nRF24L01_CAN_RX.c: 376: if(GO_STOP == 0){
  1197  000402  503F               	movf	_GO_STOP,w,c
  1198  000404  1040               	iorwf	_GO_STOP+1,w,c
  1199  000406  A4D8               	btfss	status,2,c
  1200  000408  D011               	goto	l3136
  1201                           
  1202                           ;nRF24L01_CAN_RX.c: 377: duty = engine(duty,'U');
  1203  00040A  C03D  F09C         	movff	_duty,engine@D
  1204  00040E  C03E  F09D         	movff	_duty+1,engine@D+1
  1205  000412  0E55               	movlw	85
  1206  000414  0100               	movlb	0	; () banked
  1207  000416  6F9E               	movwf	engine@dir& (0+255),b
  1208  000418  ECBA  F006         	call	_engine	;wreg free
  1209  00041C  C09C  F03D         	movff	?_engine,_duty
  1210  000420  C09D  F03E         	movff	?_engine+1,_duty+1
  1211                           
  1212                           ;nRF24L01_CAN_RX.c: 378: last_FPGA = 'U';
  1213  000424  0E55               	movlw	85
  1214  000426  6E47               	movwf	_last_FPGA,c
  1215                           
  1216                           ;nRF24L01_CAN_RX.c: 379: LATAbits.LATA5 = 0;
  1217  000428  9A89               	bcf	3977,5,c	;volatile
  1218                           
  1219                           ;nRF24L01_CAN_RX.c: 380: }else{
  1220  00042A  D0F6               	goto	l3228
  1221  00042C                     l3136:
  1222                           
  1223                           ;nRF24L01_CAN_RX.c: 381: if(last_FPGA == 'U')
  1224  00042C  0E55               	movlw	85
  1225  00042E  1847               	xorwf	_last_FPGA,w,c
  1226  000430  A4D8               	btfss	status,2,c
  1227  000432  D005               	goto	l3142
  1228                           
  1229                           ;nRF24L01_CAN_RX.c: 382: {
  1230                           ;nRF24L01_CAN_RX.c: 383: brake('U');
  1231  000434  0E55               	movlw	85
  1232  000436  EC10  F008         	call	_brake
  1233                           
  1234                           ;nRF24L01_CAN_RX.c: 384: last_FPGA = 'S';
  1235  00043A  0E53               	movlw	83
  1236  00043C  6E47               	movwf	_last_FPGA,c
  1237  00043E                     l3142:
  1238                           
  1239                           ;nRF24L01_CAN_RX.c: 385: }
  1240                           ;nRF24L01_CAN_RX.c: 386: set_dir('S');
  1241  00043E  0E53               	movlw	83
  1242  000440  ECDF  F007         	call	_set_dir
  1243                           
  1244                           ;nRF24L01_CAN_RX.c: 387: duty = 0;
  1245  000444  0E00               	movlw	0
  1246  000446  6E3E               	movwf	_duty+1,c
  1247  000448  0E00               	movlw	0
  1248  00044A  6E3D               	movwf	_duty,c
  1249                           
  1250                           ;nRF24L01_CAN_RX.c: 388: set_duty(duty);
  1251  00044C  C03D  F039         	movff	_duty,set_duty@D
  1252  000450  C03E  F03A         	movff	_duty+1,set_duty@D+1
  1253  000454  EC42  F007         	call	_set_duty	;wreg free
  1254  000458  D098               	goto	l3200
  1255  00045A                     l3150:
  1256                           
  1257                           ;nRF24L01_CAN_RX.c: 395: if(REVERSE_STOP == 0){
  1258  00045A  0100               	movlb	0	; () banked
  1259  00045C  5194               	movf	_REVERSE_STOP& (0+255),w,b
  1260  00045E  0100               	movlb	0	; () banked
  1261  000460  1195               	iorwf	(_REVERSE_STOP+1)& (0+255),w,b
  1262  000462  A4D8               	btfss	status,2,c
  1263  000464  D035               	goto	l3164
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;nRF24L01_CAN_RX.c: 396: duty = engine(duty,'D');
  1267  000466  C03D  F09C         	movff	_duty,engine@D
  1268  00046A  C03E  F09D         	movff	_duty+1,engine@D+1
  1269  00046E  0E44               	movlw	68
  1270  000470  0100               	movlb	0	; () banked
  1271  000472  6F9E               	movwf	engine@dir& (0+255),b
  1272  000474  ECBA  F006         	call	_engine	;wreg free
  1273  000478  C09C  F03D         	movff	?_engine,_duty
  1274  00047C  C09D  F03E         	movff	?_engine+1,_duty+1
  1275                           
  1276                           ;nRF24L01_CAN_RX.c: 397: last_FPGA = 'D';
  1277  000480  0E44               	movlw	68
  1278  000482  6E47               	movwf	_last_FPGA,c
  1279                           
  1280                           ;nRF24L01_CAN_RX.c: 398: if(horn_counter < 15)
  1281  000484  0100               	movlb	0	; () banked
  1282  000486  BF93               	btfsc	(_horn_counter+1)& (0+255),7,b
  1283  000488  D008               	goto	l3158
  1284  00048A  0100               	movlb	0	; () banked
  1285  00048C  5193               	movf	(_horn_counter+1)& (0+255),w,b
  1286  00048E  E109               	bnz	l3160
  1287  000490  0E0F               	movlw	15
  1288  000492  0100               	movlb	0	; () banked
  1289  000494  5D92               	subwf	_horn_counter& (0+255),w,b
  1290  000496  B0D8               	btfsc	status,0,c
  1291  000498  D004               	goto	l3160
  1292  00049A                     l3158:
  1293                           
  1294                           ; BSR set to: 0
  1295                           ;nRF24L01_CAN_RX.c: 399: {
  1296                           ;nRF24L01_CAN_RX.c: 400: horn_counter++;
  1297  00049A  0100               	movlb	0	; () banked
  1298  00049C  4B92               	infsnz	_horn_counter& (0+255),f,b
  1299  00049E  2B93               	incf	(_horn_counter+1)& (0+255),f,b
  1300                           
  1301                           ;nRF24L01_CAN_RX.c: 401: }
  1302  0004A0  D0BB               	goto	l3228
  1303  0004A2                     l3160:
  1304                           
  1305                           ; BSR set to: 0
  1306                           ;nRF24L01_CAN_RX.c: 402: else{
  1307                           ;nRF24L01_CAN_RX.c: 403: LATAbits.LATA5 = !LATAbits.LATA5;
  1308  0004A2  BA89               	btfsc	3977,5,c	;volatile
  1309  0004A4  D004               	goto	u2690
  1310  0004A6  0100               	movlb	0	; () banked
  1311  0004A8  6BA5               	clrf	??_main& (0+255),b
  1312  0004AA  2BA5               	incf	??_main& (0+255),f,b
  1313  0004AC  D002               	goto	u2708
  1314  0004AE                     u2690:
  1315  0004AE  0100               	movlb	0	; () banked
  1316  0004B0  6BA5               	clrf	??_main& (0+255),b
  1317  0004B2                     u2708:
  1318  0004B2  0100               	movlb	0	; () banked
  1319  0004B4  3BA5               	swapf	??_main& (0+255),f,b
  1320  0004B6  47A5               	rlncf	??_main& (0+255),f,b
  1321  0004B8  5089               	movf	3977,w,c	;volatile
  1322  0004BA  0100               	movlb	0	; () banked
  1323  0004BC  19A5               	xorwf	??_main& (0+255),w,b
  1324  0004BE  0BDF               	andlw	-33
  1325  0004C0  19A5               	xorwf	??_main& (0+255),w,b
  1326  0004C2  6E89               	movwf	3977,c	;volatile
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;nRF24L01_CAN_RX.c: 404: horn_counter = 0;
  1330  0004C4  0E00               	movlw	0
  1331  0004C6  0100               	movlb	0	; () banked
  1332  0004C8  6F93               	movwf	(_horn_counter+1)& (0+255),b
  1333  0004CA  0E00               	movlw	0
  1334  0004CC  6F92               	movwf	_horn_counter& (0+255),b
  1335                           
  1336                           ; BSR set to: 0
  1337                           ;nRF24L01_CAN_RX.c: 405: }
  1338                           ;nRF24L01_CAN_RX.c: 406: }else{
  1339  0004CE  D0A4               	goto	l3228
  1340  0004D0                     l3164:
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;nRF24L01_CAN_RX.c: 407: if(last_FPGA == 'D')
  1344  0004D0  0E44               	movlw	68
  1345  0004D2  1847               	xorwf	_last_FPGA,w,c
  1346  0004D4  A4D8               	btfss	status,2,c
  1347  0004D6  D005               	goto	l3170
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;nRF24L01_CAN_RX.c: 408: {
  1351                           ;nRF24L01_CAN_RX.c: 409: brake('D');
  1352  0004D8  0E44               	movlw	68
  1353  0004DA  EC10  F008         	call	_brake
  1354                           
  1355                           ;nRF24L01_CAN_RX.c: 410: last_FPGA = 'S';
  1356  0004DE  0E53               	movlw	83
  1357  0004E0  6E47               	movwf	_last_FPGA,c
  1358  0004E2                     l3170:
  1359                           
  1360                           ;nRF24L01_CAN_RX.c: 411: }
  1361                           ;nRF24L01_CAN_RX.c: 412: set_dir('S');
  1362  0004E2  0E53               	movlw	83
  1363  0004E4  ECDF  F007         	call	_set_dir
  1364                           
  1365                           ;nRF24L01_CAN_RX.c: 413: duty = 0;
  1366  0004E8  0E00               	movlw	0
  1367  0004EA  6E3E               	movwf	_duty+1,c
  1368  0004EC  0E00               	movlw	0
  1369  0004EE  6E3D               	movwf	_duty,c
  1370                           
  1371                           ;nRF24L01_CAN_RX.c: 414: set_duty(duty);
  1372  0004F0  C03D  F039         	movff	_duty,set_duty@D
  1373  0004F4  C03E  F03A         	movff	_duty+1,set_duty@D+1
  1374  0004F8  EC42  F007         	call	_set_duty	;wreg free
  1375  0004FC  D046               	goto	l3200
  1376  0004FE                     l3178:
  1377                           
  1378                           ;nRF24L01_CAN_RX.c: 421: duty = engine_left(duty,'L');
  1379  0004FE  C03D  F09C         	movff	_duty,engine_left@D
  1380  000502  C03E  F09D         	movff	_duty+1,engine_left@D+1
  1381  000506  0E4C               	movlw	76
  1382  000508  0100               	movlb	0	; () banked
  1383  00050A  6F9E               	movwf	engine_left@dir& (0+255),b
  1384  00050C  ECAD  F007         	call	_engine_left	;wreg free
  1385  000510  C09C  F03D         	movff	?_engine_left,_duty
  1386  000514  C09D  F03E         	movff	?_engine_left+1,_duty+1
  1387                           
  1388                           ;nRF24L01_CAN_RX.c: 422: break;
  1389  000518  D07F               	goto	l3228
  1390  00051A                     l3180:
  1391                           
  1392                           ;nRF24L01_CAN_RX.c: 426: duty = engine_right(duty,'R');
  1393  00051A  C03D  F09C         	movff	_duty,engine_right@D
  1394  00051E  C03E  F09D         	movff	_duty+1,engine_right@D+1
  1395  000522  0E52               	movlw	82
  1396  000524  0100               	movlb	0	; () banked
  1397  000526  6F9E               	movwf	engine_right@dir& (0+255),b
  1398  000528  EC7B  F007         	call	_engine_right	;wreg free
  1399  00052C  C09C  F03D         	movff	?_engine_right,_duty
  1400  000530  C09D  F03E         	movff	?_engine_right+1,_duty+1
  1401                           
  1402                           ;nRF24L01_CAN_RX.c: 427: break;
  1403  000534  D071               	goto	l3228
  1404  000536                     l3182:
  1405                           
  1406                           ;nRF24L01_CAN_RX.c: 434: if(GO_STOP == 0){
  1407  000536  503F               	movf	_GO_STOP,w,c
  1408  000538  1040               	iorwf	_GO_STOP+1,w,c
  1409  00053A  A4D8               	btfss	status,2,c
  1410  00053C  D010               	goto	l3188
  1411                           
  1412                           ;nRF24L01_CAN_RX.c: 435: duty = engine(duty,'U');
  1413  00053E  C03D  F09C         	movff	_duty,engine@D
  1414  000542  C03E  F09D         	movff	_duty+1,engine@D+1
  1415  000546  0E55               	movlw	85
  1416  000548  0100               	movlb	0	; () banked
  1417  00054A  6F9E               	movwf	engine@dir& (0+255),b
  1418  00054C  ECBA  F006         	call	_engine	;wreg free
  1419  000550  C09C  F03D         	movff	?_engine,_duty
  1420  000554  C09D  F03E         	movff	?_engine+1,_duty+1
  1421                           
  1422                           ;nRF24L01_CAN_RX.c: 436: last_FPGA = 'h';
  1423  000558  0E68               	movlw	104
  1424  00055A  6E47               	movwf	_last_FPGA,c
  1425                           
  1426                           ;nRF24L01_CAN_RX.c: 437: }else{
  1427  00055C  D016               	goto	l3200
  1428  00055E                     l3188:
  1429                           
  1430                           ;nRF24L01_CAN_RX.c: 438: if(last_FPGA == 'h')
  1431  00055E  0E68               	movlw	104
  1432  000560  1847               	xorwf	_last_FPGA,w,c
  1433  000562  A4D8               	btfss	status,2,c
  1434  000564  D005               	goto	l3194
  1435                           
  1436                           ;nRF24L01_CAN_RX.c: 439: {
  1437                           ;nRF24L01_CAN_RX.c: 440: brake('U');
  1438  000566  0E55               	movlw	85
  1439  000568  EC10  F008         	call	_brake
  1440                           
  1441                           ;nRF24L01_CAN_RX.c: 441: last_FPGA='S';
  1442  00056C  0E53               	movlw	83
  1443  00056E  6E47               	movwf	_last_FPGA,c
  1444  000570                     l3194:
  1445                           
  1446                           ;nRF24L01_CAN_RX.c: 442: }
  1447                           ;nRF24L01_CAN_RX.c: 443: set_dir('S');
  1448  000570  0E53               	movlw	83
  1449  000572  ECDF  F007         	call	_set_dir
  1450                           
  1451                           ;nRF24L01_CAN_RX.c: 444: duty = 0;
  1452  000576  0E00               	movlw	0
  1453  000578  6E3E               	movwf	_duty+1,c
  1454  00057A  0E00               	movlw	0
  1455  00057C  6E3D               	movwf	_duty,c
  1456                           
  1457                           ;nRF24L01_CAN_RX.c: 445: set_duty(duty);
  1458  00057E  C03D  F039         	movff	_duty,set_duty@D
  1459  000582  C03E  F03A         	movff	_duty+1,set_duty@D+1
  1460  000586  EC42  F007         	call	_set_duty	;wreg free
  1461  00058A                     l3200:
  1462                           
  1463                           ;nRF24L01_CAN_RX.c: 446: }
  1464                           ;nRF24L01_CAN_RX.c: 447: LATAbits.LATA5 = 1;
  1465  00058A  8A89               	bsf	3977,5,c	;volatile
  1466                           
  1467                           ;nRF24L01_CAN_RX.c: 448: break;
  1468  00058C  D045               	goto	l3228
  1469  00058E                     l3202:
  1470                           
  1471                           ;nRF24L01_CAN_RX.c: 452: if((last_FPGA == 'U')||(last_FPGA == 'h'))
  1472  00058E  0E55               	movlw	85
  1473  000590  1847               	xorwf	_last_FPGA,w,c
  1474  000592  B4D8               	btfsc	status,2,c
  1475  000594  D008               	goto	l3210
  1476  000596  0E68               	movlw	104
  1477  000598  1847               	xorwf	_last_FPGA,w,c
  1478  00059A  B4D8               	btfsc	status,2,c
  1479  00059C  D004               	goto	l3210
  1480                           
  1481                           ;nRF24L01_CAN_RX.c: 457: else if(last_FPGA == 'D')
  1482                           
  1483                           ;nRF24L01_CAN_RX.c: 456: }
  1484                           
  1485                           ;nRF24L01_CAN_RX.c: 453: {
  1486                           ;nRF24L01_CAN_RX.c: 455: last_FPGA = 'S';
  1487  00059E  0E44               	movlw	68
  1488  0005A0  1847               	xorwf	_last_FPGA,w,c
  1489  0005A2  A4D8               	btfss	status,2,c
  1490  0005A4  D002               	goto	l3212
  1491  0005A6                     l3210:
  1492                           
  1493                           ;nRF24L01_CAN_RX.c: 458: {
  1494                           ;nRF24L01_CAN_RX.c: 460: last_FPGA = 'S';
  1495  0005A6  0E53               	movlw	83
  1496  0005A8  6E47               	movwf	_last_FPGA,c
  1497  0005AA                     l3212:
  1498                           
  1499                           ;nRF24L01_CAN_RX.c: 461: }
  1500                           ;nRF24L01_CAN_RX.c: 462: LATAbits.LATA5 = 0;
  1501  0005AA  9A89               	bcf	3977,5,c	;volatile
  1502                           
  1503                           ;nRF24L01_CAN_RX.c: 463: last_FPGA = 'S';
  1504  0005AC  0E53               	movlw	83
  1505  0005AE  6E47               	movwf	_last_FPGA,c
  1506                           
  1507                           ;nRF24L01_CAN_RX.c: 464: set_dir('S');
  1508  0005B0  0E53               	movlw	83
  1509  0005B2  ECDF  F007         	call	_set_dir
  1510                           
  1511                           ;nRF24L01_CAN_RX.c: 465: duty = 0;
  1512  0005B6  0E00               	movlw	0
  1513  0005B8  6E3E               	movwf	_duty+1,c
  1514  0005BA  0E00               	movlw	0
  1515  0005BC  6E3D               	movwf	_duty,c
  1516                           
  1517                           ;nRF24L01_CAN_RX.c: 466: set_duty(duty);
  1518  0005BE  C03D  F039         	movff	_duty,set_duty@D
  1519  0005C2  C03E  F03A         	movff	_duty+1,set_duty@D+1
  1520  0005C6  EC42  F007         	call	_set_duty	;wreg free
  1521                           
  1522                           ;nRF24L01_CAN_RX.c: 467: break;
  1523  0005CA  D026               	goto	l3228
  1524  0005CC                     l471:
  1525                           
  1526                           ;nRF24L01_CAN_RX.c: 471: LATAbits.LATA5 = 0;
  1527  0005CC  9A89               	bcf	3977,5,c	;volatile
  1528                           
  1529                           ;nRF24L01_CAN_RX.c: 472: set_dir('S');
  1530  0005CE  0E53               	movlw	83
  1531  0005D0  ECDF  F007         	call	_set_dir
  1532                           
  1533                           ;nRF24L01_CAN_RX.c: 473: duty = 0;
  1534  0005D4  0E00               	movlw	0
  1535  0005D6  6E3E               	movwf	_duty+1,c
  1536  0005D8  0E00               	movlw	0
  1537  0005DA  6E3D               	movwf	_duty,c
  1538                           
  1539                           ;nRF24L01_CAN_RX.c: 474: set_duty(duty);
  1540  0005DC  C03D  F039         	movff	_duty,set_duty@D
  1541  0005E0  C03E  F03A         	movff	_duty+1,set_duty@D+1
  1542  0005E4  EC42  F007         	call	_set_duty	;wreg free
  1543                           
  1544                           ;nRF24L01_CAN_RX.c: 475: }
  1545  0005E8  D017               	goto	l3228
  1546  0005EA                     l3226:
  1547  0005EA  5048               	movf	_FPGA,w,c
  1548                           
  1549                           ; Switch size 1, requested type "space"
  1550                           ; Number of cases is 7, Range of values is 68 to 104
  1551                           ; switch strategies available:
  1552                           ; Name         Instructions Cycles
  1553                           ; simple_byte           22    12 (average)
  1554                           ;	Chosen strategy is simple_byte
  1555  0005EC  0A44               	xorlw	68	; case 68
  1556  0005EE  B4D8               	btfsc	status,2,c
  1557  0005F0  D734               	goto	l3150
  1558  0005F2  0A0C               	xorlw	12	; case 72
  1559  0005F4  B4D8               	btfsc	status,2,c
  1560  0005F6  D7C9               	goto	l3200
  1561  0005F8  0A04               	xorlw	4	; case 76
  1562  0005FA  B4D8               	btfsc	status,2,c
  1563  0005FC  D780               	goto	l3178
  1564  0005FE  0A1E               	xorlw	30	; case 82
  1565  000600  B4D8               	btfsc	status,2,c
  1566  000602  D78B               	goto	l3180
  1567  000604  0A01               	xorlw	1	; case 83
  1568  000606  B4D8               	btfsc	status,2,c
  1569  000608  D7C2               	goto	l3202
  1570  00060A  0A06               	xorlw	6	; case 85
  1571  00060C  B4D8               	btfsc	status,2,c
  1572  00060E  D6F9               	goto	l3128
  1573  000610  0A3D               	xorlw	61	; case 104
  1574  000612  B4D8               	btfsc	status,2,c
  1575  000614  D790               	goto	l3182
  1576  000616  D7DA               	goto	l471
  1577  000618                     l3228:
  1578                           
  1579                           ;nRF24L01_CAN_RX.c: 477: _delay((unsigned long)((20)*(8000000/4000.0)));
  1580  000618  0E34               	movlw	52
  1581  00061A  0100               	movlb	0	; () banked
  1582  00061C  6FA5               	movwf	??_main& (0+255),b
  1583  00061E  0EF1               	movlw	241
  1584  000620                     u2817:
  1585  000620  2EE8               	decfsz	wreg,f,c
  1586  000622  D7FE               	bra	u2817
  1587  000624  2FA5               	decfsz	??_main& (0+255),f,b
  1588  000626  D7FC               	bra	u2817
  1589  000628  D000               	nop2	
  1590  00062A  D58A               	goto	l2988
  1591  00062C                     __end_of_main:
  1592                           	opt stack 0
  1593                           tblptru	equ	0xFF8
  1594                           intcon	equ	0xFF2
  1595                           postinc0	equ	0xFEE
  1596                           wreg	equ	0xFE8
  1597                           status	equ	0xFD8
  1598                           
  1599 ;; *************** function _write_ACK *****************
  1600 ;; Defined at:
  1601 ;;		line 162 in file "nRF24L01_RX.h"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;  data            1    wreg     unsigned char 
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;  data            1   17[COMRAM] unsigned char 
  1606 ;; Return value:  Size  Location     Type
  1607 ;;                  1    wreg      void 
  1608 ;; Registers used:
  1609 ;;		wreg, status,2, cstack
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1616 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1618 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1619 ;;Total ram usage:        1 bytes
  1620 ;; Hardware stack levels used:    1
  1621 ;; Hardware stack levels required when called:    2
  1622 ;; This function calls:
  1623 ;;		_spi_write
  1624 ;; This function is called by:
  1625 ;;		_main
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           	psect	text1
  1630  001112                     __ptext1:
  1631                           	opt stack 0
  1632  001112                     _write_ACK:
  1633                           	opt stack 28
  1634                           
  1635                           ;incstack = 0
  1636                           ;write_ACK@data stored from wreg
  1637  001112  6E12               	movwf	write_ACK@data,c
  1638                           
  1639                           ;nRF24L01_RX.h: 165: LATDbits.LATD3 = 0;
  1640  001114  968C               	bcf	3980,3,c	;volatile
  1641                           
  1642                           ;nRF24L01_RX.h: 166: spi_write(0xE1);
  1643  001116  0EE1               	movlw	225
  1644  001118  ECD2  F008         	call	_spi_write
  1645                           
  1646                           ;nRF24L01_RX.h: 167: LATDbits.LATD3 = 1;
  1647  00111C  868C               	bsf	3980,3,c	;volatile
  1648                           
  1649                           ;nRF24L01_RX.h: 169: LATDbits.LATD3 = 0;
  1650  00111E  968C               	bcf	3980,3,c	;volatile
  1651                           
  1652                           ;nRF24L01_RX.h: 170: spi_write(0xA8);
  1653  001120  0EA8               	movlw	168
  1654  001122  ECD2  F008         	call	_spi_write
  1655                           
  1656                           ;nRF24L01_RX.h: 171: spi_write(data);
  1657  001126  5012               	movf	write_ACK@data,w,c
  1658  001128  ECD2  F008         	call	_spi_write
  1659                           
  1660                           ;nRF24L01_RX.h: 172: LATDbits.LATD3 = 1;
  1661  00112C  868C               	bsf	3980,3,c	;volatile
  1662  00112E  0012               	return		;funcret
  1663  001130                     __end_of_write_ACK:
  1664                           	opt stack 0
  1665                           tblptru	equ	0xFF8
  1666                           intcon	equ	0xFF2
  1667                           postinc0	equ	0xFEE
  1668                           wreg	equ	0xFE8
  1669                           status	equ	0xFD8
  1670                           
  1671 ;; *************** function _set_PWM *****************
  1672 ;; Defined at:
  1673 ;;		line 84 in file "VNH5019_lib.h"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;		None
  1676 ;; Auto vars:     Size  Location     Type
  1677 ;;		None
  1678 ;; Return value:  Size  Location     Type
  1679 ;;                  1    wreg      void 
  1680 ;; Registers used:
  1681 ;;		wreg, status,2
  1682 ;; Tracked objects:
  1683 ;;		On entry : 0/0
  1684 ;;		On exit  : 0/0
  1685 ;;		Unchanged: 0/0
  1686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1691 ;;Total ram usage:        0 bytes
  1692 ;; Hardware stack levels used:    1
  1693 ;; Hardware stack levels required when called:    1
  1694 ;; This function calls:
  1695 ;;		Nothing
  1696 ;; This function is called by:
  1697 ;;		_main
  1698 ;; This function uses a non-reentrant model
  1699 ;;
  1700                           
  1701                           	psect	text2
  1702  001130                     __ptext2:
  1703                           	opt stack 0
  1704  001130                     _set_PWM:
  1705                           	opt stack 29
  1706                           
  1707                           ;VNH5019_lib.h: 86: PR4 = 249;
  1708                           
  1709                           ;incstack = 0
  1710  001130  0EF9               	movlw	249
  1711  001132  6EA9               	movwf	4009,c	;volatile
  1712                           
  1713                           ;VNH5019_lib.h: 88: T4CON = 0b00000011;
  1714  001134  0E03               	movlw	3
  1715  001136  6E88               	movwf	3976,c	;volatile
  1716                           
  1717                           ;VNH5019_lib.h: 89: CCPTMRSbits.C4TSEL = 1;
  1718  001138  8699               	bsf	3993,3,c	;volatile
  1719                           
  1720                           ;VNH5019_lib.h: 90: CCPTMRSbits.C3TSEL = 1;
  1721  00113A  8499               	bsf	3993,2,c	;volatile
  1722                           
  1723                           ;VNH5019_lib.h: 91: CCP4CON = 0b00001100;
  1724  00113C  0E0C               	movlw	12
  1725  00113E  010F               	movlb	15	; () banked
  1726  001140  6F4A               	movwf	74,b	;volatile
  1727                           
  1728                           ;VNH5019_lib.h: 92: CCP3CON = 0b00001100;
  1729  001142  0E0C               	movlw	12
  1730  001144  010F               	movlb	15	; () banked
  1731  001146  6F4D               	movwf	77,b	;volatile
  1732                           
  1733                           ;VNH5019_lib.h: 94: TMR4 = 0;
  1734  001148  0E00               	movlw	0
  1735  00114A  6E87               	movwf	3975,c	;volatile
  1736                           
  1737                           ; BSR set to: 15
  1738  00114C  0012               	return		;funcret
  1739  00114E                     __end_of_set_PWM:
  1740                           	opt stack 0
  1741                           tblptru	equ	0xFF8
  1742                           intcon	equ	0xFF2
  1743                           postinc0	equ	0xFEE
  1744                           wreg	equ	0xFE8
  1745                           status	equ	0xFD8
  1746                           
  1747 ;; *************** function _set_AD *****************
  1748 ;; Defined at:
  1749 ;;		line 204 in file "VNH5019_lib.h"
  1750 ;; Parameters:    Size  Location     Type
  1751 ;;		None
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;		None
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  1    wreg      void 
  1756 ;; Registers used:
  1757 ;;		wreg, status,2
  1758 ;; Tracked objects:
  1759 ;;		On entry : 0/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1767 ;;Total ram usage:        0 bytes
  1768 ;; Hardware stack levels used:    1
  1769 ;; Hardware stack levels required when called:    1
  1770 ;; This function calls:
  1771 ;;		Nothing
  1772 ;; This function is called by:
  1773 ;;		_main
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777                           	psect	text3
  1778  001180                     __ptext3:
  1779                           	opt stack 0
  1780  001180                     _set_AD:
  1781                           	opt stack 29
  1782                           
  1783                           ;VNH5019_lib.h: 206: ADCON0 = 0b00000000;
  1784                           
  1785                           ; BSR set to: 15
  1786                           ;incstack = 0
  1787  001180  0E00               	movlw	0
  1788  001182  6EC2               	movwf	4034,c	;volatile
  1789                           
  1790                           ;VNH5019_lib.h: 207: ADCON1 = 0x00;
  1791  001184  0E00               	movlw	0
  1792  001186  6EC1               	movwf	4033,c	;volatile
  1793                           
  1794                           ;VNH5019_lib.h: 208: ADCON2bits.ADFM = 1;
  1795  001188  8EC0               	bsf	4032,7,c	;volatile
  1796                           
  1797                           ;VNH5019_lib.h: 209: ANCON0bits.ANSEL0 = 1;
  1798  00118A  010F               	movlb	15	; () banked
  1799  00118C  815D               	bsf	93,0,b	;volatile
  1800                           
  1801                           ; BSR set to: 15
  1802                           ;VNH5019_lib.h: 210: ADCON0bits.ADON = 1;
  1803  00118E  80C2               	bsf	4034,0,c	;volatile
  1804                           
  1805                           ; BSR set to: 15
  1806  001190  0012               	return		;funcret
  1807  001192                     __end_of_set_AD:
  1808                           	opt stack 0
  1809                           tblptru	equ	0xFF8
  1810                           intcon	equ	0xFF2
  1811                           postinc0	equ	0xFEE
  1812                           wreg	equ	0xFE8
  1813                           status	equ	0xFD8
  1814                           
  1815 ;; *************** function _reset_RX *****************
  1816 ;; Defined at:
  1817 ;;		line 175 in file "nRF24L01_RX.h"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;		None
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;  buffer_RX       1   17[COMRAM] unsigned char 
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      unsigned char 
  1824 ;; Registers used:
  1825 ;;		wreg, status,2, cstack
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1832 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1834 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1835 ;;Total ram usage:        1 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:    2
  1838 ;; This function calls:
  1839 ;;		_spi_write
  1840 ;; This function is called by:
  1841 ;;		_main
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	text4
  1846  001072                     __ptext4:
  1847                           	opt stack 0
  1848  001072                     _reset_RX:
  1849                           	opt stack 28
  1850                           
  1851                           ;nRF24L01_RX.h: 177: unsigned char buffer_RX;
  1852                           ;nRF24L01_RX.h: 180: LATDbits.LATD3 = 0;
  1853                           
  1854                           ; BSR set to: 15
  1855                           ;incstack = 0
  1856  001072  968C               	bcf	3980,3,c	;volatile
  1857                           
  1858                           ;nRF24L01_RX.h: 181: spi_write(0x61);
  1859  001074  0E61               	movlw	97
  1860  001076  ECD2  F008         	call	_spi_write
  1861                           
  1862                           ;nRF24L01_RX.h: 182: buffer_RX = spi_write(0);
  1863  00107A  0E00               	movlw	0
  1864  00107C  ECD2  F008         	call	_spi_write
  1865  001080  6E12               	movwf	reset_RX@buffer_RX,c
  1866                           
  1867                           ;nRF24L01_RX.h: 183: LATDbits.LATD3 = 1;
  1868  001082  868C               	bsf	3980,3,c	;volatile
  1869                           
  1870                           ;nRF24L01_RX.h: 186: LATDbits.LATD3 = 0;
  1871  001084  968C               	bcf	3980,3,c	;volatile
  1872                           
  1873                           ;nRF24L01_RX.h: 187: spi_write(0xE2);
  1874  001086  0EE2               	movlw	226
  1875  001088  ECD2  F008         	call	_spi_write
  1876                           
  1877                           ;nRF24L01_RX.h: 188: LATDbits.LATD3 = 1;
  1878  00108C  868C               	bsf	3980,3,c	;volatile
  1879                           
  1880                           ;nRF24L01_RX.h: 190: LATDbits.LATD3 = 0;
  1881  00108E  968C               	bcf	3980,3,c	;volatile
  1882                           
  1883                           ;nRF24L01_RX.h: 194: spi_write(0x20+0x07);
  1884  001090  0E27               	movlw	39
  1885  001092  ECD2  F008         	call	_spi_write
  1886                           
  1887                           ;nRF24L01_RX.h: 195: spi_write(0x60);
  1888  001096  0E60               	movlw	96
  1889  001098  ECD2  F008         	call	_spi_write
  1890                           
  1891                           ;nRF24L01_RX.h: 196: LATDbits.LATD3 = 1;
  1892  00109C  868C               	bsf	3980,3,c	;volatile
  1893                           
  1894                           ;nRF24L01_RX.h: 198: return buffer_RX;
  1895  00109E  5012               	movf	reset_RX@buffer_RX,w,c
  1896  0010A0  0012               	return	
  1897  0010A2                     __end_of_reset_RX:
  1898                           	opt stack 0
  1899                           tblptru	equ	0xFF8
  1900                           intcon	equ	0xFF2
  1901                           postinc0	equ	0xFEE
  1902                           wreg	equ	0xFE8
  1903                           status	equ	0xFD8
  1904                           
  1905 ;; *************** function _reset_MAX_RT *****************
  1906 ;; Defined at:
  1907 ;;		line 235 in file "nRF24L01_RX.h"
  1908 ;; Parameters:    Size  Location     Type
  1909 ;;		None
  1910 ;; Auto vars:     Size  Location     Type
  1911 ;;		None
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  1    wreg      void 
  1914 ;; Registers used:
  1915 ;;		wreg, status,2, cstack
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1925 ;;Total ram usage:        0 bytes
  1926 ;; Hardware stack levels used:    1
  1927 ;; Hardware stack levels required when called:    2
  1928 ;; This function calls:
  1929 ;;		_spi_write
  1930 ;; This function is called by:
  1931 ;;		_main
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           	psect	text5
  1936  001192                     __ptext5:
  1937                           	opt stack 0
  1938  001192                     _reset_MAX_RT:
  1939                           	opt stack 28
  1940                           
  1941                           ;nRF24L01_RX.h: 237: LATDbits.LATD3 = 0;
  1942                           
  1943                           ;incstack = 0
  1944  001192  968C               	bcf	3980,3,c	;volatile
  1945                           
  1946                           ;nRF24L01_RX.h: 238: spi_write(0x20+0x07);
  1947  001194  0E27               	movlw	39
  1948  001196  ECD2  F008         	call	_spi_write
  1949                           
  1950                           ;nRF24L01_RX.h: 239: spi_write(0x10);
  1951  00119A  0E10               	movlw	16
  1952  00119C  ECD2  F008         	call	_spi_write
  1953                           
  1954                           ;nRF24L01_RX.h: 240: LATDbits.LATD3 = 1;
  1955  0011A0  868C               	bsf	3980,3,c	;volatile
  1956  0011A2  0012               	return		;funcret
  1957  0011A4                     __end_of_reset_MAX_RT:
  1958                           	opt stack 0
  1959                           tblptru	equ	0xFF8
  1960                           intcon	equ	0xFF2
  1961                           postinc0	equ	0xFEE
  1962                           wreg	equ	0xFE8
  1963                           status	equ	0xFD8
  1964                           
  1965 ;; *************** function _init_spi_master *****************
  1966 ;; Defined at:
  1967 ;;		line 15 in file "spi.h"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;		None
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;		None
  1972 ;; Return value:  Size  Location     Type
  1973 ;;                  1    wreg      void 
  1974 ;; Registers used:
  1975 ;;		None
  1976 ;; Tracked objects:
  1977 ;;		On entry : 0/0
  1978 ;;		On exit  : 0/0
  1979 ;;		Unchanged: 0/0
  1980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1985 ;;Total ram usage:        0 bytes
  1986 ;; Hardware stack levels used:    1
  1987 ;; Hardware stack levels required when called:    1
  1988 ;; This function calls:
  1989 ;;		Nothing
  1990 ;; This function is called by:
  1991 ;;		_main
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           	psect	text6
  1996  00114E                     __ptext6:
  1997                           	opt stack 0
  1998  00114E                     _init_spi_master:
  1999                           	opt stack 29
  2000                           
  2001                           ;spi.h: 17: PIE1bits.SSPIE = 0;
  2002                           
  2003                           ;incstack = 0
  2004  00114E  969D               	bcf	3997,3,c	;volatile
  2005                           
  2006                           ;spi.h: 18: SSPCON1bits.SSPEN = 0;
  2007  001150  9AC6               	bcf	4038,5,c	;volatile
  2008                           
  2009                           ;spi.h: 21: TRISCbits.TRISC4 = 1;
  2010  001152  8894               	bsf	3988,4,c	;volatile
  2011                           
  2012                           ;spi.h: 22: TRISCbits.TRISC3 = 0;
  2013  001154  9694               	bcf	3988,3,c	;volatile
  2014                           
  2015                           ;spi.h: 23: TRISCbits.TRISC5 = 0;
  2016  001156  9A94               	bcf	3988,5,c	;volatile
  2017                           
  2018                           ;spi.h: 26: SSPSTATbits.SMP = 0;
  2019  001158  9EC7               	bcf	4039,7,c	;volatile
  2020                           
  2021                           ;spi.h: 28: SSPSTATbits.CKE = 1;
  2022  00115A  8CC7               	bsf	4039,6,c	;volatile
  2023                           
  2024                           ;spi.h: 30: SSPCON1bits.CKP = 0;
  2025  00115C  98C6               	bcf	4038,4,c	;volatile
  2026                           
  2027                           ;spi.h: 33: SSPCON1bits.SSPM3 = 0;
  2028  00115E  96C6               	bcf	4038,3,c	;volatile
  2029                           
  2030                           ;spi.h: 34: SSPCON1bits.SSPM2 = 0;
  2031  001160  94C6               	bcf	4038,2,c	;volatile
  2032                           
  2033                           ;spi.h: 35: SSPCON1bits.SSPM1 = 1;
  2034  001162  82C6               	bsf	4038,1,c	;volatile
  2035                           
  2036                           ;spi.h: 36: SSPCON1bits.SSPM0 = 0;
  2037  001164  90C6               	bcf	4038,0,c	;volatile
  2038                           
  2039                           ;spi.h: 38: SSPCON1bits.SSPEN = 1;
  2040  001166  8AC6               	bsf	4038,5,c	;volatile
  2041  001168  0012               	return		;funcret
  2042  00116A                     __end_of_init_spi_master:
  2043                           	opt stack 0
  2044                           tblptru	equ	0xFF8
  2045                           intcon	equ	0xFF2
  2046                           postinc0	equ	0xFEE
  2047                           wreg	equ	0xFE8
  2048                           status	equ	0xFD8
  2049                           
  2050 ;; *************** function _initPIC *****************
  2051 ;; Defined at:
  2052 ;;		line 154 in file "nRF24L01_CAN_RX.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;		None
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;		None
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      void 
  2059 ;; Registers used:
  2060 ;;		wreg, status,2
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2070 ;;Total ram usage:        0 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; Hardware stack levels required when called:    1
  2073 ;; This function calls:
  2074 ;;		Nothing
  2075 ;; This function is called by:
  2076 ;;		_main
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           	psect	text7
  2081  000998                     __ptext7:
  2082                           	opt stack 0
  2083  000998                     _initPIC:
  2084                           	opt stack 29
  2085                           
  2086                           ;nRF24L01_CAN_RX.c: 156: PORTA = 0x00;
  2087                           
  2088                           ;incstack = 0
  2089  000998  0E00               	movlw	0
  2090  00099A  6E80               	movwf	3968,c	;volatile
  2091                           
  2092                           ;nRF24L01_CAN_RX.c: 157: PORTB = 0x00;
  2093  00099C  0E00               	movlw	0
  2094  00099E  6E81               	movwf	3969,c	;volatile
  2095                           
  2096                           ;nRF24L01_CAN_RX.c: 158: PORTC = 0x00;
  2097  0009A0  0E00               	movlw	0
  2098  0009A2  6E82               	movwf	3970,c	;volatile
  2099                           
  2100                           ;nRF24L01_CAN_RX.c: 159: PORTD = 0x00;
  2101  0009A4  0E00               	movlw	0
  2102  0009A6  6E83               	movwf	3971,c	;volatile
  2103                           
  2104                           ;nRF24L01_CAN_RX.c: 160: PORTE = 0x00;
  2105  0009A8  0E00               	movlw	0
  2106  0009AA  6E84               	movwf	3972,c	;volatile
  2107                           
  2108                           ;nRF24L01_CAN_RX.c: 161: INTCON = 0x00;
  2109  0009AC  0E00               	movlw	0
  2110  0009AE  6EF2               	movwf	intcon,c	;volatile
  2111                           
  2112                           ;nRF24L01_CAN_RX.c: 162: INTCON2 = 0x00;
  2113  0009B0  0E00               	movlw	0
  2114  0009B2  6EF1               	movwf	intcon2,c	;volatile
  2115                           
  2116                           ;nRF24L01_CAN_RX.c: 163: INTCON3 = 0x00;
  2117  0009B4  0E00               	movlw	0
  2118  0009B6  6EF0               	movwf	intcon3,c	;volatile
  2119                           
  2120                           ;nRF24L01_CAN_RX.c: 164: PIR1 = 0x00;
  2121  0009B8  0E00               	movlw	0
  2122  0009BA  6E9E               	movwf	3998,c	;volatile
  2123                           
  2124                           ;nRF24L01_CAN_RX.c: 165: RCON = 0x00;
  2125  0009BC  0E00               	movlw	0
  2126  0009BE  6ED0               	movwf	4048,c	;volatile
  2127                           
  2128                           ;nRF24L01_CAN_RX.c: 167: TRISA = 0x00;
  2129  0009C0  0E00               	movlw	0
  2130  0009C2  6E92               	movwf	3986,c	;volatile
  2131                           
  2132                           ;nRF24L01_CAN_RX.c: 168: TRISB = 0x00;
  2133  0009C4  0E00               	movlw	0
  2134  0009C6  6E93               	movwf	3987,c	;volatile
  2135                           
  2136                           ;nRF24L01_CAN_RX.c: 169: TRISC = 0x00;
  2137  0009C8  0E00               	movlw	0
  2138  0009CA  6E94               	movwf	3988,c	;volatile
  2139                           
  2140                           ;nRF24L01_CAN_RX.c: 170: TRISD = 0x00;
  2141  0009CC  0E00               	movlw	0
  2142  0009CE  6E95               	movwf	3989,c	;volatile
  2143                           
  2144                           ;nRF24L01_CAN_RX.c: 171: TRISE = 0x00;
  2145  0009D0  0E00               	movlw	0
  2146  0009D2  6E96               	movwf	3990,c	;volatile
  2147                           
  2148                           ;nRF24L01_CAN_RX.c: 173: INTCON3bits.INT2IE = 0;
  2149  0009D4  98F0               	bcf	intcon3,4,c	;volatile
  2150                           
  2151                           ;nRF24L01_CAN_RX.c: 174: INTCON3bits.INT3IE = 0;
  2152  0009D6  9AF0               	bcf	intcon3,5,c	;volatile
  2153                           
  2154                           ;nRF24L01_CAN_RX.c: 175: ANCON0 = 0b00000011;
  2155  0009D8  0E03               	movlw	3
  2156  0009DA  010F               	movlb	15	; () banked
  2157  0009DC  6F5D               	movwf	93,b	;volatile
  2158                           
  2159                           ;nRF24L01_CAN_RX.c: 176: ANCON1 = 0x00;
  2160  0009DE  0E00               	movlw	0
  2161  0009E0  010F               	movlb	15	; () banked
  2162  0009E2  6F5C               	movwf	92,b	;volatile
  2163                           
  2164                           ;nRF24L01_CAN_RX.c: 177: HLVDCON = 0b00000000;
  2165  0009E4  0E00               	movlw	0
  2166  0009E6  6EA8               	movwf	4008,c	;volatile
  2167                           
  2168                           ;nRF24L01_CAN_RX.c: 179: TRISA = 0b00000011;
  2169  0009E8  0E03               	movlw	3
  2170  0009EA  6E92               	movwf	3986,c	;volatile
  2171                           
  2172                           ;nRF24L01_CAN_RX.c: 180: TRISB = 0b00001001;
  2173  0009EC  0E09               	movlw	9
  2174  0009EE  6E93               	movwf	3987,c	;volatile
  2175                           
  2176                           ;nRF24L01_CAN_RX.c: 181: TRISD = 0b00010001;
  2177  0009F0  0E11               	movlw	17
  2178  0009F2  6E95               	movwf	3989,c	;volatile
  2179                           
  2180                           ;nRF24L01_CAN_RX.c: 182: TRISC = 0b00000010;
  2181  0009F4  0E02               	movlw	2
  2182  0009F6  6E94               	movwf	3988,c	;volatile
  2183                           
  2184                           ; BSR set to: 15
  2185                           ;nRF24L01_CAN_RX.c: 184: TRISE0 = 1;
  2186  0009F8  8096               	bsf	3990,0,c	;volatile
  2187                           
  2188                           ; BSR set to: 15
  2189                           ;nRF24L01_CAN_RX.c: 185: TRISE1 = 0;
  2190  0009FA  9296               	bcf	3990,1,c	;volatile
  2191                           
  2192                           ;nRF24L01_CAN_RX.c: 188: MAX_RT = 1;
  2193  0009FC  0E01               	movlw	1
  2194  0009FE  6E4E               	movwf	_MAX_RT,c
  2195                           
  2196                           ;nRF24L01_CAN_RX.c: 189: retransmissions = 0;
  2197  000A00  0E00               	movlw	0
  2198  000A02  6E4B               	movwf	_retransmissions,c
  2199                           
  2200                           ;nRF24L01_CAN_RX.c: 190: back_ultrasonic = 0;
  2201  000A04  0E00               	movlw	0
  2202  000A06  6E44               	movwf	_back_ultrasonic+1,c
  2203  000A08  0E00               	movlw	0
  2204  000A0A  6E43               	movwf	_back_ultrasonic,c
  2205                           
  2206                           ;nRF24L01_CAN_RX.c: 191: front_ultrasonic = 0;
  2207  000A0C  0E00               	movlw	0
  2208  000A0E  6E42               	movwf	_front_ultrasonic+1,c
  2209  000A10  0E00               	movlw	0
  2210  000A12  6E41               	movwf	_front_ultrasonic,c
  2211                           
  2212                           ;nRF24L01_CAN_RX.c: 192: CAN_msg_0 = 0;
  2213  000A14  0E00               	movlw	0
  2214  000A16  6E4A               	movwf	_CAN_msg_0,c
  2215                           
  2216                           ;nRF24L01_CAN_RX.c: 193: CAN_msg_1 = 0;
  2217  000A18  0E00               	movlw	0
  2218  000A1A  6E49               	movwf	_CAN_msg_1,c
  2219                           
  2220                           ;nRF24L01_CAN_RX.c: 194: FPGA = 0;
  2221  000A1C  0E00               	movlw	0
  2222  000A1E  6E48               	movwf	_FPGA,c
  2223                           
  2224                           ;nRF24L01_CAN_RX.c: 195: last_FPGA=0;
  2225  000A20  0E00               	movlw	0
  2226  000A22  6E47               	movwf	_last_FPGA,c
  2227                           
  2228                           ;nRF24L01_CAN_RX.c: 196: duty = 0;
  2229  000A24  0E00               	movlw	0
  2230  000A26  6E3E               	movwf	_duty+1,c
  2231  000A28  0E00               	movlw	0
  2232  000A2A  6E3D               	movwf	_duty,c
  2233                           
  2234                           ;nRF24L01_CAN_RX.c: 197: value = 0;
  2235  000A2C  0E00               	movlw	0
  2236  000A2E  0100               	movlb	0	; () banked
  2237  000A30  6F8F               	movwf	(_value+1)& (0+255),b
  2238  000A32  0E00               	movlw	0
  2239  000A34  6F8E               	movwf	_value& (0+255),b
  2240                           
  2241                           ;nRF24L01_CAN_RX.c: 198: value1 = 0;
  2242  000A36  0E00               	movlw	0
  2243  000A38  0100               	movlb	0	; () banked
  2244  000A3A  6F8D               	movwf	(_value1+1)& (0+255),b
  2245  000A3C  0E00               	movlw	0
  2246  000A3E  6F8C               	movwf	_value1& (0+255),b
  2247                           
  2248                           ;nRF24L01_CAN_RX.c: 199: value0 = 0;
  2249  000A40  0E00               	movlw	0
  2250  000A42  0100               	movlb	0	; () banked
  2251  000A44  6F8B               	movwf	(_value0+1)& (0+255),b
  2252  000A46  0E00               	movlw	0
  2253  000A48  6F8A               	movwf	_value0& (0+255),b
  2254                           
  2255                           ;nRF24L01_CAN_RX.c: 200: error_motor = 0;
  2256  000A4A  0E00               	movlw	0
  2257  000A4C  6E3C               	movwf	_error_motor+1,c
  2258  000A4E  0E00               	movlw	0
  2259  000A50  6E3B               	movwf	_error_motor,c
  2260                           
  2261                           ;nRF24L01_CAN_RX.c: 201: GO_STOP = 0;
  2262  000A52  0E00               	movlw	0
  2263  000A54  6E40               	movwf	_GO_STOP+1,c
  2264  000A56  0E00               	movlw	0
  2265  000A58  6E3F               	movwf	_GO_STOP,c
  2266                           
  2267                           ;nRF24L01_CAN_RX.c: 202: REVERSE_STOP = 0;
  2268  000A5A  0E00               	movlw	0
  2269  000A5C  0100               	movlb	0	; () banked
  2270  000A5E  6F95               	movwf	(_REVERSE_STOP+1)& (0+255),b
  2271  000A60  0E00               	movlw	0
  2272  000A62  6F94               	movwf	_REVERSE_STOP& (0+255),b
  2273                           
  2274                           ;nRF24L01_CAN_RX.c: 203: horn_counter = 0;
  2275  000A64  0E00               	movlw	0
  2276  000A66  0100               	movlb	0	; () banked
  2277  000A68  6F93               	movwf	(_horn_counter+1)& (0+255),b
  2278  000A6A  0E00               	movlw	0
  2279  000A6C  6F92               	movwf	_horn_counter& (0+255),b
  2280                           
  2281                           ;nRF24L01_CAN_RX.c: 204: ADC = 0;
  2282  000A6E  0E00               	movlw	0
  2283  000A70  0100               	movlb	0	; () banked
  2284  000A72  6F89               	movwf	(_ADC+1)& (0+255),b
  2285  000A74  0E00               	movlw	0
  2286  000A76  6F88               	movwf	_ADC& (0+255),b
  2287                           
  2288                           ;nRF24L01_CAN_RX.c: 205: counter_no_data = 0;
  2289  000A78  0E00               	movlw	0
  2290  000A7A  0100               	movlb	0	; () banked
  2291  000A7C  6F87               	movwf	(_counter_no_data+1)& (0+255),b
  2292  000A7E  0E00               	movlw	0
  2293  000A80  6F86               	movwf	_counter_no_data& (0+255),b
  2294                           
  2295                           ;nRF24L01_CAN_RX.c: 206: counter_error_motor=0;
  2296  000A82  0E00               	movlw	0
  2297  000A84  0100               	movlb	0	; () banked
  2298  000A86  6F91               	movwf	(_counter_error_motor+1)& (0+255),b
  2299  000A88  0E00               	movlw	0
  2300  000A8A  6F90               	movwf	_counter_error_motor& (0+255),b
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;nRF24L01_CAN_RX.c: 208: LATAbits.LATA5 = 0;
  2304  000A8C  9A89               	bcf	3977,5,c	;volatile
  2305                           
  2306                           ; BSR set to: 0
  2307  000A8E  0012               	return		;funcret
  2308  000A90                     __end_of_initPIC:
  2309                           	opt stack 0
  2310                           tblptru	equ	0xFF8
  2311                           intcon	equ	0xFF2
  2312                           intcon2	equ	0xFF1
  2313                           intcon3	equ	0xFF0
  2314                           postinc0	equ	0xFEE
  2315                           wreg	equ	0xFE8
  2316                           status	equ	0xFD8
  2317                           
  2318 ;; *************** function _flush *****************
  2319 ;; Defined at:
  2320 ;;		line 244 in file "nRF24L01_RX.h"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;		None
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;		None
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  1    wreg      void 
  2327 ;; Registers used:
  2328 ;;		wreg, status,2, cstack
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2338 ;;Total ram usage:        0 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    2
  2341 ;; This function calls:
  2342 ;;		_spi_write
  2343 ;; This function is called by:
  2344 ;;		_main
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text8
  2349  00116A                     __ptext8:
  2350                           	opt stack 0
  2351  00116A                     _flush:
  2352                           	opt stack 28
  2353                           
  2354                           ;nRF24L01_RX.h: 246: LATDbits.LATD3 = 0;
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;incstack = 0
  2358  00116A  968C               	bcf	3980,3,c	;volatile
  2359                           
  2360                           ;nRF24L01_RX.h: 247: spi_write(0xE1);
  2361  00116C  0EE1               	movlw	225
  2362  00116E  ECD2  F008         	call	_spi_write
  2363                           
  2364                           ;nRF24L01_RX.h: 248: LATDbits.LATD3 = 1;
  2365  001172  868C               	bsf	3980,3,c	;volatile
  2366                           
  2367                           ;nRF24L01_RX.h: 250: LATDbits.LATD3 = 0;
  2368  001174  968C               	bcf	3980,3,c	;volatile
  2369                           
  2370                           ;nRF24L01_RX.h: 251: spi_write(0xE2);
  2371  001176  0EE2               	movlw	226
  2372  001178  ECD2  F008         	call	_spi_write
  2373                           
  2374                           ;nRF24L01_RX.h: 252: LATDbits.LATD3 = 1;
  2375  00117C  868C               	bsf	3980,3,c	;volatile
  2376  00117E  0012               	return		;funcret
  2377  001180                     __end_of_flush:
  2378                           	opt stack 0
  2379                           tblptru	equ	0xFF8
  2380                           intcon	equ	0xFF2
  2381                           intcon2	equ	0xFF1
  2382                           intcon3	equ	0xFF0
  2383                           postinc0	equ	0xFEE
  2384                           wreg	equ	0xFE8
  2385                           status	equ	0xFD8
  2386                           
  2387 ;; *************** function _engine_right *****************
  2388 ;; Defined at:
  2389 ;;		line 173 in file "VNH5019_lib.h"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  D               2    6[BANK0 ] int 
  2392 ;;  dir             1    8[BANK0 ] unsigned char 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;  next_duty       2   11[BANK0 ] int 
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  2    6[BANK0 ] int 
  2397 ;; Registers used:
  2398 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2404 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2405 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2406 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2407 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2408 ;;Total ram usage:        7 bytes
  2409 ;; Hardware stack levels used:    1
  2410 ;; Hardware stack levels required when called:    4
  2411 ;; This function calls:
  2412 ;;		_set_dir
  2413 ;;		_set_duty
  2414 ;; This function is called by:
  2415 ;;		_main
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           	psect	text9
  2420  000EF6                     __ptext9:
  2421                           	opt stack 0
  2422  000EF6                     _engine_right:
  2423                           	opt stack 26
  2424                           
  2425                           ;VNH5019_lib.h: 175: int next_duty;
  2426                           ;VNH5019_lib.h: 177: set_dir(dir);
  2427                           
  2428                           ;incstack = 0
  2429  000EF6  0100               	movlb	0	; () banked
  2430  000EF8  519E               	movf	engine_right@dir& (0+255),w,b
  2431  000EFA  ECDF  F007         	call	_set_dir
  2432                           
  2433                           ;VNH5019_lib.h: 179: if(D <= 40)
  2434  000EFE  0100               	movlb	0	; () banked
  2435  000F00  BF9D               	btfsc	(engine_right@D+1)& (0+255),7,b
  2436  000F02  D008               	goto	l2918
  2437  000F04  0100               	movlb	0	; () banked
  2438  000F06  519D               	movf	(engine_right@D+1)& (0+255),w,b
  2439  000F08  E123               	bnz	l2924
  2440  000F0A  0E29               	movlw	41
  2441  000F0C  0100               	movlb	0	; () banked
  2442  000F0E  5D9C               	subwf	engine_right@D& (0+255),w,b
  2443  000F10  B0D8               	btfsc	status,0,c
  2444  000F12  D01E               	goto	l2924
  2445  000F14                     l2918:
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;VNH5019_lib.h: 180: {
  2449                           ;VNH5019_lib.h: 181: set_duty(D);
  2450  000F14  C09C  F039         	movff	engine_right@D,set_duty@D
  2451  000F18  C09D  F03A         	movff	engine_right@D+1,set_duty@D+1
  2452  000F1C  EC42  F007         	call	_set_duty	;wreg free
  2453                           
  2454                           ;VNH5019_lib.h: 182: next_duty = D+5;
  2455  000F20  0E05               	movlw	5
  2456  000F22  0100               	movlb	0	; () banked
  2457  000F24  259C               	addwf	engine_right@D& (0+255),w,b
  2458  000F26  0100               	movlb	0	; () banked
  2459  000F28  6FA1               	movwf	engine_right@next_duty& (0+255),b
  2460  000F2A  0E00               	movlw	0
  2461  000F2C  0100               	movlb	0	; () banked
  2462  000F2E  219D               	addwfc	(engine_right@D+1)& (0+255),w,b
  2463  000F30  0100               	movlb	0	; () banked
  2464  000F32  6FA2               	movwf	(engine_right@next_duty+1)& (0+255),b
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;VNH5019_lib.h: 183: _delay((unsigned long)((100)*(8000000/4000.0)));
  2468  000F34  0E02               	movlw	2
  2469  000F36  0100               	movlb	0	; () banked
  2470  000F38  6FA0               	movwf	(??_engine_right+1)& (0+255),b
  2471  000F3A  0E04               	movlw	4
  2472  000F3C  0100               	movlb	0	; () banked
  2473  000F3E  6F9F               	movwf	??_engine_right& (0+255),b
  2474  000F40  0EBA               	movlw	186
  2475  000F42                     u2827:
  2476  000F42  2EE8               	decfsz	wreg,f,c
  2477  000F44  D7FE               	bra	u2827
  2478  000F46  2F9F               	decfsz	??_engine_right& (0+255),f,b
  2479  000F48  D7FC               	bra	u2827
  2480  000F4A  2FA0               	decfsz	(??_engine_right+1)& (0+255),f,b
  2481  000F4C  D7FA               	bra	u2827
  2482  000F4E  F000               	nop	
  2483  000F50                     l2924:
  2484                           
  2485                           ;VNH5019_lib.h: 184: }
  2486                           ;VNH5019_lib.h: 185: return next_duty;
  2487  000F50  C0A1  F09C         	movff	engine_right@next_duty,?_engine_right
  2488  000F54  C0A2  F09D         	movff	engine_right@next_duty+1,?_engine_right+1
  2489  000F58  0012               	return	
  2490  000F5A                     __end_of_engine_right:
  2491                           	opt stack 0
  2492                           tblptru	equ	0xFF8
  2493                           intcon	equ	0xFF2
  2494                           intcon2	equ	0xFF1
  2495                           intcon3	equ	0xFF0
  2496                           postinc0	equ	0xFEE
  2497                           wreg	equ	0xFE8
  2498                           status	equ	0xFD8
  2499                           
  2500 ;; *************** function _engine_left *****************
  2501 ;; Defined at:
  2502 ;;		line 158 in file "VNH5019_lib.h"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;  D               2    6[BANK0 ] int 
  2505 ;;  dir             1    8[BANK0 ] unsigned char 
  2506 ;; Auto vars:     Size  Location     Type
  2507 ;;  next_duty       2   11[BANK0 ] int 
  2508 ;; Return value:  Size  Location     Type
  2509 ;;                  2    6[BANK0 ] int 
  2510 ;; Registers used:
  2511 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2512 ;; Tracked objects:
  2513 ;;		On entry : 0/0
  2514 ;;		On exit  : 0/0
  2515 ;;		Unchanged: 0/0
  2516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2517 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2518 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2519 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2520 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2521 ;;Total ram usage:        7 bytes
  2522 ;; Hardware stack levels used:    1
  2523 ;; Hardware stack levels required when called:    4
  2524 ;; This function calls:
  2525 ;;		_set_dir
  2526 ;;		_set_duty
  2527 ;; This function is called by:
  2528 ;;		_main
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text10
  2533  000F5A                     __ptext10:
  2534                           	opt stack 0
  2535  000F5A                     _engine_left:
  2536                           	opt stack 26
  2537                           
  2538                           ;VNH5019_lib.h: 160: int next_duty;
  2539                           ;VNH5019_lib.h: 162: set_dir(dir);
  2540                           
  2541                           ;incstack = 0
  2542  000F5A  0100               	movlb	0	; () banked
  2543  000F5C  519E               	movf	engine_left@dir& (0+255),w,b
  2544  000F5E  ECDF  F007         	call	_set_dir
  2545                           
  2546                           ;VNH5019_lib.h: 164: if(D <= 40)
  2547  000F62  0100               	movlb	0	; () banked
  2548  000F64  BF9D               	btfsc	(engine_left@D+1)& (0+255),7,b
  2549  000F66  D008               	goto	l2904
  2550  000F68  0100               	movlb	0	; () banked
  2551  000F6A  519D               	movf	(engine_left@D+1)& (0+255),w,b
  2552  000F6C  E123               	bnz	l2910
  2553  000F6E  0E29               	movlw	41
  2554  000F70  0100               	movlb	0	; () banked
  2555  000F72  5D9C               	subwf	engine_left@D& (0+255),w,b
  2556  000F74  B0D8               	btfsc	status,0,c
  2557  000F76  D01E               	goto	l2910
  2558  000F78                     l2904:
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;VNH5019_lib.h: 165: {
  2562                           ;VNH5019_lib.h: 166: set_duty(D);
  2563  000F78  C09C  F039         	movff	engine_left@D,set_duty@D
  2564  000F7C  C09D  F03A         	movff	engine_left@D+1,set_duty@D+1
  2565  000F80  EC42  F007         	call	_set_duty	;wreg free
  2566                           
  2567                           ;VNH5019_lib.h: 167: next_duty = D+5;
  2568  000F84  0E05               	movlw	5
  2569  000F86  0100               	movlb	0	; () banked
  2570  000F88  259C               	addwf	engine_left@D& (0+255),w,b
  2571  000F8A  0100               	movlb	0	; () banked
  2572  000F8C  6FA1               	movwf	engine_left@next_duty& (0+255),b
  2573  000F8E  0E00               	movlw	0
  2574  000F90  0100               	movlb	0	; () banked
  2575  000F92  219D               	addwfc	(engine_left@D+1)& (0+255),w,b
  2576  000F94  0100               	movlb	0	; () banked
  2577  000F96  6FA2               	movwf	(engine_left@next_duty+1)& (0+255),b
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;VNH5019_lib.h: 168: _delay((unsigned long)((100)*(8000000/4000.0)));
  2581  000F98  0E02               	movlw	2
  2582  000F9A  0100               	movlb	0	; () banked
  2583  000F9C  6FA0               	movwf	(??_engine_left+1)& (0+255),b
  2584  000F9E  0E04               	movlw	4
  2585  000FA0  0100               	movlb	0	; () banked
  2586  000FA2  6F9F               	movwf	??_engine_left& (0+255),b
  2587  000FA4  0EBA               	movlw	186
  2588  000FA6                     u2837:
  2589  000FA6  2EE8               	decfsz	wreg,f,c
  2590  000FA8  D7FE               	bra	u2837
  2591  000FAA  2F9F               	decfsz	??_engine_left& (0+255),f,b
  2592  000FAC  D7FC               	bra	u2837
  2593  000FAE  2FA0               	decfsz	(??_engine_left+1)& (0+255),f,b
  2594  000FB0  D7FA               	bra	u2837
  2595  000FB2  F000               	nop	
  2596  000FB4                     l2910:
  2597                           
  2598                           ;VNH5019_lib.h: 169: }
  2599                           ;VNH5019_lib.h: 170: return next_duty;
  2600  000FB4  C0A1  F09C         	movff	engine_left@next_duty,?_engine_left
  2601  000FB8  C0A2  F09D         	movff	engine_left@next_duty+1,?_engine_left+1
  2602  000FBC  0012               	return	
  2603  000FBE                     __end_of_engine_left:
  2604                           	opt stack 0
  2605                           tblptru	equ	0xFF8
  2606                           intcon	equ	0xFF2
  2607                           intcon2	equ	0xFF1
  2608                           intcon3	equ	0xFF0
  2609                           postinc0	equ	0xFEE
  2610                           wreg	equ	0xFE8
  2611                           status	equ	0xFD8
  2612                           
  2613 ;; *************** function _engine *****************
  2614 ;; Defined at:
  2615 ;;		line 140 in file "VNH5019_lib.h"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;  D               2    6[BANK0 ] int 
  2618 ;;  dir             1    8[BANK0 ] unsigned char 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  MAX             2   13[BANK0 ] int 
  2621 ;;  next_duty       2   11[BANK0 ] int 
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  2    6[BANK0 ] int 
  2624 ;; Registers used:
  2625 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2631 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2632 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2633 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2634 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2635 ;;Total ram usage:        9 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    4
  2638 ;; This function calls:
  2639 ;;		_set_dir
  2640 ;;		_set_duty
  2641 ;; This function is called by:
  2642 ;;		_main
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           	psect	text11
  2647  000D74                     __ptext11:
  2648                           	opt stack 0
  2649  000D74                     _engine:
  2650                           	opt stack 26
  2651                           
  2652                           ;VNH5019_lib.h: 142: int next_duty,MAX;
  2653                           ;VNH5019_lib.h: 144: set_dir(dir);
  2654                           
  2655                           ;incstack = 0
  2656  000D74  0100               	movlb	0	; () banked
  2657  000D76  519E               	movf	engine@dir& (0+255),w,b
  2658  000D78  ECDF  F007         	call	_set_dir
  2659                           
  2660                           ;VNH5019_lib.h: 146: if(dir == 'U') MAX = 15;
  2661  000D7C  0E55               	movlw	85
  2662  000D7E  0100               	movlb	0	; () banked
  2663  000D80  199E               	xorwf	engine@dir& (0+255),w,b
  2664  000D82  B4D8               	btfsc	status,2,c
  2665  000D84  D005               	goto	l2886
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;VNH5019_lib.h: 147: else if(dir == 'D') MAX = 15;
  2669                           
  2670                           ; BSR set to: 0
  2671                           
  2672                           ; BSR set to: 0
  2673  000D86  0E44               	movlw	68
  2674  000D88  0100               	movlb	0	; () banked
  2675  000D8A  199E               	xorwf	engine@dir& (0+255),w,b
  2676  000D8C  A4D8               	btfss	status,2,c
  2677  000D8E  D005               	goto	l2888
  2678  000D90                     l2886:
  2679                           
  2680                           ; BSR set to: 0
  2681  000D90  0E00               	movlw	0
  2682  000D92  0100               	movlb	0	; () banked
  2683  000D94  6FA4               	movwf	(engine@MAX+1)& (0+255),b
  2684  000D96  0E0F               	movlw	15
  2685  000D98  6FA3               	movwf	engine@MAX& (0+255),b
  2686  000D9A                     l2888:
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;VNH5019_lib.h: 149: if(D <= MAX)
  2690  000D9A  0100               	movlb	0	; () banked
  2691  000D9C  519C               	movf	engine@D& (0+255),w,b
  2692  000D9E  0100               	movlb	0	; () banked
  2693  000DA0  5DA3               	subwf	engine@MAX& (0+255),w,b
  2694  000DA2  0100               	movlb	0	; () banked
  2695  000DA4  51A4               	movf	(engine@MAX+1)& (0+255),w,b
  2696  000DA6  0A80               	xorlw	128
  2697  000DA8  0100               	movlb	0	; () banked
  2698  000DAA  6F9F               	movwf	??_engine& (0+255),b
  2699  000DAC  0100               	movlb	0	; () banked
  2700  000DAE  519D               	movf	(engine@D+1)& (0+255),w,b
  2701  000DB0  0A80               	xorlw	128
  2702  000DB2  0100               	movlb	0	; () banked
  2703  000DB4  599F               	subwfb	??_engine& (0+255),w,b
  2704  000DB6  A0D8               	btfss	status,0,c
  2705  000DB8  D01E               	goto	l2896
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;VNH5019_lib.h: 150: {
  2709                           ;VNH5019_lib.h: 151: set_duty(D);
  2710  000DBA  C09C  F039         	movff	engine@D,set_duty@D
  2711  000DBE  C09D  F03A         	movff	engine@D+1,set_duty@D+1
  2712  000DC2  EC42  F007         	call	_set_duty	;wreg free
  2713                           
  2714                           ;VNH5019_lib.h: 152: next_duty = D+5;
  2715  000DC6  0E05               	movlw	5
  2716  000DC8  0100               	movlb	0	; () banked
  2717  000DCA  259C               	addwf	engine@D& (0+255),w,b
  2718  000DCC  0100               	movlb	0	; () banked
  2719  000DCE  6FA1               	movwf	engine@next_duty& (0+255),b
  2720  000DD0  0E00               	movlw	0
  2721  000DD2  0100               	movlb	0	; () banked
  2722  000DD4  219D               	addwfc	(engine@D+1)& (0+255),w,b
  2723  000DD6  0100               	movlb	0	; () banked
  2724  000DD8  6FA2               	movwf	(engine@next_duty+1)& (0+255),b
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;VNH5019_lib.h: 153: _delay((unsigned long)((100)*(8000000/4000.0)));
  2728  000DDA  0E02               	movlw	2
  2729  000DDC  0100               	movlb	0	; () banked
  2730  000DDE  6FA0               	movwf	(??_engine+1)& (0+255),b
  2731  000DE0  0E04               	movlw	4
  2732  000DE2  0100               	movlb	0	; () banked
  2733  000DE4  6F9F               	movwf	??_engine& (0+255),b
  2734  000DE6  0EBA               	movlw	186
  2735  000DE8                     u2847:
  2736  000DE8  2EE8               	decfsz	wreg,f,c
  2737  000DEA  D7FE               	bra	u2847
  2738  000DEC  2F9F               	decfsz	??_engine& (0+255),f,b
  2739  000DEE  D7FC               	bra	u2847
  2740  000DF0  2FA0               	decfsz	(??_engine+1)& (0+255),f,b
  2741  000DF2  D7FA               	bra	u2847
  2742  000DF4  F000               	nop	
  2743  000DF6                     l2896:
  2744                           
  2745                           ;VNH5019_lib.h: 154: }
  2746                           ;VNH5019_lib.h: 155: return next_duty;
  2747  000DF6  C0A1  F09C         	movff	engine@next_duty,?_engine
  2748  000DFA  C0A2  F09D         	movff	engine@next_duty+1,?_engine+1
  2749  000DFE  0012               	return	
  2750  000E00                     __end_of_engine:
  2751                           	opt stack 0
  2752                           tblptru	equ	0xFF8
  2753                           intcon	equ	0xFF2
  2754                           intcon2	equ	0xFF1
  2755                           intcon3	equ	0xFF0
  2756                           postinc0	equ	0xFEE
  2757                           wreg	equ	0xFE8
  2758                           status	equ	0xFD8
  2759                           
  2760 ;; *************** function _configure_RX *****************
  2761 ;; Defined at:
  2762 ;;		line 51 in file "nRF24L01_RX.h"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;		None
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;  j               1   19[COMRAM] unsigned char 
  2767 ;;  i               1    0        unsigned char 
  2768 ;; Return value:  Size  Location     Type
  2769 ;;                  1    wreg      void 
  2770 ;; Registers used:
  2771 ;;		wreg, status,2, status,0, cstack
  2772 ;; Tracked objects:
  2773 ;;		On entry : 0/0
  2774 ;;		On exit  : 0/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2778 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2779 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2780 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2781 ;;Total ram usage:        3 bytes
  2782 ;; Hardware stack levels used:    1
  2783 ;; Hardware stack levels required when called:    2
  2784 ;; This function calls:
  2785 ;;		_spi_write
  2786 ;; This function is called by:
  2787 ;;		_main
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           	psect	text12
  2792  00062C                     __ptext12:
  2793                           	opt stack 0
  2794  00062C                     _configure_RX:
  2795                           	opt stack 28
  2796                           
  2797                           ;nRF24L01_RX.h: 53: unsigned char i, j;
  2798                           ;nRF24L01_RX.h: 55: LATDbits.LATD2 = 0;
  2799                           
  2800                           ;incstack = 0
  2801  00062C  948C               	bcf	3980,2,c	;volatile
  2802                           
  2803                           ;nRF24L01_RX.h: 56: _delay((unsigned long)((100)*(8000000/4000.0)));
  2804  00062E  0E02               	movlw	2
  2805  000630  6E13               	movwf	(??_configure_RX+1)& (0+255),c
  2806  000632  0E04               	movlw	4
  2807  000634  6E12               	movwf	??_configure_RX& (0+255),c
  2808  000636  0EBA               	movlw	186
  2809  000638                     u2857:
  2810  000638  2EE8               	decfsz	wreg,f,c
  2811  00063A  D7FE               	bra	u2857
  2812  00063C  2E12               	decfsz	??_configure_RX& (0+255),f,c
  2813  00063E  D7FC               	bra	u2857
  2814  000640  2E13               	decfsz	(??_configure_RX+1)& (0+255),f,c
  2815  000642  D7FA               	bra	u2857
  2816  000644  D000               	nop2	
  2817                           
  2818                           ;nRF24L01_RX.h: 60: LATDbits.LATD3 = 1;
  2819  000646  868C               	bsf	3980,3,c	;volatile
  2820                           
  2821                           ;nRF24L01_RX.h: 61: _delay((unsigned long)((5)*(8000000/4000.0)));
  2822  000648  0E0D               	movlw	13
  2823  00064A  6E12               	movwf	??_configure_RX& (0+255),c
  2824  00064C  0EFC               	movlw	252
  2825  00064E                     u2867:
  2826  00064E  2EE8               	decfsz	wreg,f,c
  2827  000650  D7FE               	bra	u2867
  2828  000652  2E12               	decfsz	??_configure_RX& (0+255),f,c
  2829  000654  D7FC               	bra	u2867
  2830                           
  2831                           ;nRF24L01_RX.h: 64: LATDbits.LATD3 = 0;
  2832  000656  968C               	bcf	3980,3,c	;volatile
  2833                           
  2834                           ;nRF24L01_RX.h: 65: spi_write(0x20+0x00);
  2835  000658  0E20               	movlw	32
  2836  00065A  ECD2  F008         	call	_spi_write
  2837                           
  2838                           ;nRF24L01_RX.h: 66: spi_write(0b00011001);
  2839  00065E  0E19               	movlw	25
  2840  000660  ECD2  F008         	call	_spi_write
  2841                           
  2842                           ;nRF24L01_RX.h: 74: LATDbits.LATD3 = 1;
  2843  000664  868C               	bsf	3980,3,c	;volatile
  2844                           
  2845                           ;nRF24L01_RX.h: 76: LATDbits.LATD3 = 0;
  2846  000666  968C               	bcf	3980,3,c	;volatile
  2847                           
  2848                           ;nRF24L01_RX.h: 78: spi_write(0x20+0x01);
  2849  000668  0E21               	movlw	33
  2850  00066A  ECD2  F008         	call	_spi_write
  2851                           
  2852                           ;nRF24L01_RX.h: 79: spi_write(0x01);
  2853  00066E  0E01               	movlw	1
  2854  000670  ECD2  F008         	call	_spi_write
  2855                           
  2856                           ;nRF24L01_RX.h: 80: LATDbits.LATD3 = 1;
  2857  000674  868C               	bsf	3980,3,c	;volatile
  2858                           
  2859                           ;nRF24L01_RX.h: 82: LATDbits.LATD3 = 0;
  2860  000676  968C               	bcf	3980,3,c	;volatile
  2861                           
  2862                           ;nRF24L01_RX.h: 84: spi_write(0x20+0x03);
  2863  000678  0E23               	movlw	35
  2864  00067A  ECD2  F008         	call	_spi_write
  2865                           
  2866                           ;nRF24L01_RX.h: 85: spi_write(0x03);
  2867  00067E  0E03               	movlw	3
  2868  000680  ECD2  F008         	call	_spi_write
  2869                           
  2870                           ;nRF24L01_RX.h: 86: LATDbits.LATD3 = 1;
  2871  000684  868C               	bsf	3980,3,c	;volatile
  2872                           
  2873                           ;nRF24L01_RX.h: 88: LATDbits.LATD3 = 0;
  2874  000686  968C               	bcf	3980,3,c	;volatile
  2875                           
  2876                           ;nRF24L01_RX.h: 89: spi_write(0x20+0x04);
  2877  000688  0E24               	movlw	36
  2878  00068A  ECD2  F008         	call	_spi_write
  2879                           
  2880                           ;nRF24L01_RX.h: 90: spi_write(0x3F);
  2881  00068E  0E3F               	movlw	63
  2882  000690  ECD2  F008         	call	_spi_write
  2883                           
  2884                           ;nRF24L01_RX.h: 91: LATDbits.LATD3 = 1;
  2885  000694  868C               	bsf	3980,3,c	;volatile
  2886                           
  2887                           ;nRF24L01_RX.h: 93: LATDbits.LATD3 = 0;
  2888  000696  968C               	bcf	3980,3,c	;volatile
  2889                           
  2890                           ;nRF24L01_RX.h: 95: spi_write(0x20+0x06);
  2891  000698  0E26               	movlw	38
  2892  00069A  ECD2  F008         	call	_spi_write
  2893                           
  2894                           ;nRF24L01_RX.h: 96: spi_write(0x07);
  2895  00069E  0E07               	movlw	7
  2896  0006A0  ECD2  F008         	call	_spi_write
  2897                           
  2898                           ;nRF24L01_RX.h: 97: LATDbits.LATD3 = 1;
  2899  0006A4  868C               	bsf	3980,3,c	;volatile
  2900                           
  2901                           ;nRF24L01_RX.h: 99: LATDbits.LATD3 = 0;
  2902  0006A6  968C               	bcf	3980,3,c	;volatile
  2903                           
  2904                           ;nRF24L01_RX.h: 101: spi_write(0x50);
  2905  0006A8  0E50               	movlw	80
  2906  0006AA  ECD2  F008         	call	_spi_write
  2907                           
  2908                           ;nRF24L01_RX.h: 102: spi_write(0x73);
  2909  0006AE  0E73               	movlw	115
  2910  0006B0  ECD2  F008         	call	_spi_write
  2911                           
  2912                           ;nRF24L01_RX.h: 103: LATDbits.LATD3 = 1;
  2913  0006B4  868C               	bsf	3980,3,c	;volatile
  2914                           
  2915                           ;nRF24L01_RX.h: 105: LATDbits.LATD3 = 0;
  2916  0006B6  968C               	bcf	3980,3,c	;volatile
  2917                           
  2918                           ;nRF24L01_RX.h: 106: spi_write(0x20+0x1D);
  2919  0006B8  0E3D               	movlw	61
  2920  0006BA  ECD2  F008         	call	_spi_write
  2921                           
  2922                           ;nRF24L01_RX.h: 107: spi_write(0x06);
  2923  0006BE  0E06               	movlw	6
  2924  0006C0  ECD2  F008         	call	_spi_write
  2925                           
  2926                           ;nRF24L01_RX.h: 109: LATDbits.LATD3 = 1;
  2927  0006C4  868C               	bsf	3980,3,c	;volatile
  2928                           
  2929                           ;nRF24L01_RX.h: 111: LATDbits.LATD3 = 0;
  2930  0006C6  968C               	bcf	3980,3,c	;volatile
  2931                           
  2932                           ;nRF24L01_RX.h: 112: spi_write(0x20+0x1C);
  2933  0006C8  0E3C               	movlw	60
  2934  0006CA  ECD2  F008         	call	_spi_write
  2935                           
  2936                           ;nRF24L01_RX.h: 113: spi_write(0x01);
  2937  0006CE  0E01               	movlw	1
  2938  0006D0  ECD2  F008         	call	_spi_write
  2939                           
  2940                           ;nRF24L01_RX.h: 114: LATDbits.LATD3 = 1;
  2941  0006D4  868C               	bsf	3980,3,c	;volatile
  2942                           
  2943                           ;nRF24L01_RX.h: 116: LATDbits.LATD3 = 0;
  2944  0006D6  968C               	bcf	3980,3,c	;volatile
  2945                           
  2946                           ;nRF24L01_RX.h: 118: spi_write(0x20+0x05);
  2947  0006D8  0E25               	movlw	37
  2948  0006DA  ECD2  F008         	call	_spi_write
  2949                           
  2950                           ;nRF24L01_RX.h: 119: spi_write(0x6E);
  2951  0006DE  0E6E               	movlw	110
  2952  0006E0  ECD2  F008         	call	_spi_write
  2953                           
  2954                           ;nRF24L01_RX.h: 120: LATDbits.LATD3 = 1;
  2955  0006E4  868C               	bsf	3980,3,c	;volatile
  2956                           
  2957                           ;nRF24L01_RX.h: 122: LATDbits.LATD3 = 0;
  2958  0006E6  968C               	bcf	3980,3,c	;volatile
  2959                           
  2960                           ;nRF24L01_RX.h: 124: spi_write(0x20+0x10);
  2961  0006E8  0E30               	movlw	48
  2962  0006EA  ECD2  F008         	call	_spi_write
  2963                           
  2964                           ;nRF24L01_RX.h: 125: for (j = 0; j < 5; j++)
  2965  0006EE  0E00               	movlw	0
  2966  0006F0  6E14               	movwf	configure_RX@j,c
  2967  0006F2                     l2188:
  2968  0006F2  0E04               	movlw	4
  2969  0006F4  6414               	cpfsgt	configure_RX@j,c
  2970  0006F6  D001               	goto	l2192
  2971  0006F8  D005               	goto	l242
  2972  0006FA                     l2192:
  2973                           
  2974                           ;nRF24L01_RX.h: 126: spi_write(0xE7);
  2975  0006FA  0EE7               	movlw	231
  2976  0006FC  ECD2  F008         	call	_spi_write
  2977  000700  2A14               	incf	configure_RX@j,f,c
  2978  000702  D7F7               	goto	l2188
  2979  000704                     l242:
  2980                           
  2981                           ;nRF24L01_RX.h: 127: LATDbits.LATD3 = 1;
  2982  000704  868C               	bsf	3980,3,c	;volatile
  2983                           
  2984                           ;nRF24L01_RX.h: 129: LATDbits.LATD3 = 0;
  2985  000706  968C               	bcf	3980,3,c	;volatile
  2986                           
  2987                           ;nRF24L01_RX.h: 131: spi_write(0x20+0x0A);
  2988  000708  0E2A               	movlw	42
  2989  00070A  ECD2  F008         	call	_spi_write
  2990                           
  2991                           ;nRF24L01_RX.h: 132: for (j = 0; j < 5; j++)
  2992  00070E  0E00               	movlw	0
  2993  000710  6E14               	movwf	configure_RX@j,c
  2994  000712                     l2202:
  2995  000712  0E04               	movlw	4
  2996  000714  6414               	cpfsgt	configure_RX@j,c
  2997  000716  D001               	goto	l2206
  2998  000718  D005               	goto	l244
  2999  00071A                     l2206:
  3000                           
  3001                           ;nRF24L01_RX.h: 133: spi_write(0xE7);
  3002  00071A  0EE7               	movlw	231
  3003  00071C  ECD2  F008         	call	_spi_write
  3004  000720  2A14               	incf	configure_RX@j,f,c
  3005  000722  D7F7               	goto	l2202
  3006  000724                     l244:
  3007                           
  3008                           ;nRF24L01_RX.h: 134: LATDbits.LATD3 = 1;
  3009  000724  868C               	bsf	3980,3,c	;volatile
  3010                           
  3011                           ;nRF24L01_RX.h: 136: LATDbits.LATD3 = 0;
  3012  000726  968C               	bcf	3980,3,c	;volatile
  3013                           
  3014                           ;nRF24L01_RX.h: 137: spi_write(0xE2);
  3015  000728  0EE2               	movlw	226
  3016  00072A  ECD2  F008         	call	_spi_write
  3017                           
  3018                           ;nRF24L01_RX.h: 138: LATDbits.LATD3 = 1;
  3019  00072E  868C               	bsf	3980,3,c	;volatile
  3020                           
  3021                           ;nRF24L01_RX.h: 140: LATDbits.LATD3 = 0;
  3022  000730  968C               	bcf	3980,3,c	;volatile
  3023                           
  3024                           ;nRF24L01_RX.h: 141: spi_write(0xE1);
  3025  000732  0EE1               	movlw	225
  3026  000734  ECD2  F008         	call	_spi_write
  3027                           
  3028                           ;nRF24L01_RX.h: 142: LATDbits.LATD3 = 1;
  3029  000738  868C               	bsf	3980,3,c	;volatile
  3030                           
  3031                           ;nRF24L01_RX.h: 144: LATDbits.LATD3 = 0;
  3032  00073A  968C               	bcf	3980,3,c	;volatile
  3033                           
  3034                           ;nRF24L01_RX.h: 145: spi_write(0x20+0x00);
  3035  00073C  0E20               	movlw	32
  3036  00073E  ECD2  F008         	call	_spi_write
  3037                           
  3038                           ;nRF24L01_RX.h: 146: spi_write(0b00011011);
  3039  000742  0E1B               	movlw	27
  3040  000744  ECD2  F008         	call	_spi_write
  3041                           
  3042                           ;nRF24L01_RX.h: 154: LATDbits.LATD3 = 1;
  3043  000748  868C               	bsf	3980,3,c	;volatile
  3044                           
  3045                           ;nRF24L01_RX.h: 157: _delay((unsigned long)((5)*(8000000/4000.0)));
  3046  00074A  0E0D               	movlw	13
  3047  00074C  6E12               	movwf	??_configure_RX& (0+255),c
  3048  00074E  0EFC               	movlw	252
  3049  000750                     u2877:
  3050  000750  2EE8               	decfsz	wreg,f,c
  3051  000752  D7FE               	bra	u2877
  3052  000754  2E12               	decfsz	??_configure_RX& (0+255),f,c
  3053  000756  D7FC               	bra	u2877
  3054                           
  3055                           ;nRF24L01_RX.h: 159: LATDbits.LATD2 = 1;
  3056  000758  848C               	bsf	3980,2,c	;volatile
  3057  00075A  0012               	return		;funcret
  3058  00075C                     __end_of_configure_RX:
  3059                           	opt stack 0
  3060                           tblptru	equ	0xFF8
  3061                           intcon	equ	0xFF2
  3062                           intcon2	equ	0xFF1
  3063                           intcon3	equ	0xFF0
  3064                           postinc0	equ	0xFEE
  3065                           wreg	equ	0xFE8
  3066                           status	equ	0xFD8
  3067                           
  3068 ;; *************** function _check_MAX_RT *****************
  3069 ;; Defined at:
  3070 ;;		line 202 in file "nRF24L01_RX.h"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;		None
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;  MAX_RT          1   18[COMRAM] unsigned char 
  3075 ;;  buffer          1   17[COMRAM] unsigned char 
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  1    wreg      unsigned char 
  3078 ;; Registers used:
  3079 ;;		wreg, status,2, status,0, cstack
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3086 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3088 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3089 ;;Total ram usage:        2 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; Hardware stack levels required when called:    2
  3092 ;; This function calls:
  3093 ;;		_spi_write
  3094 ;; This function is called by:
  3095 ;;		_main
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           	psect	text13
  3100  0010EE                     __ptext13:
  3101                           	opt stack 0
  3102  0010EE                     _check_MAX_RT:
  3103                           	opt stack 28
  3104                           
  3105                           ;nRF24L01_RX.h: 204: unsigned char buffer = 0;
  3106                           
  3107                           ;incstack = 0
  3108  0010EE  0E00               	movlw	0
  3109  0010F0  6E12               	movwf	check_MAX_RT@buffer,c
  3110                           
  3111                           ;nRF24L01_RX.h: 205: unsigned char MAX_RT = 0;
  3112  0010F2  0E00               	movlw	0
  3113  0010F4  6E13               	movwf	check_MAX_RT@MAX_RT,c
  3114                           
  3115                           ;nRF24L01_RX.h: 207: LATDbits.LATD3 = 0;
  3116  0010F6  968C               	bcf	3980,3,c	;volatile
  3117                           
  3118                           ;nRF24L01_RX.h: 208: buffer = spi_write(0xFF);
  3119  0010F8  0EFF               	movlw	255
  3120  0010FA  ECD2  F008         	call	_spi_write
  3121  0010FE  6E12               	movwf	check_MAX_RT@buffer,c
  3122                           
  3123                           ;nRF24L01_RX.h: 209: LATDbits.LATD3 = 1;
  3124  001100  868C               	bsf	3980,3,c	;volatile
  3125                           
  3126                           ;nRF24L01_RX.h: 211: MAX_RT = buffer & 0x10;
  3127  001102  5012               	movf	check_MAX_RT@buffer,w,c
  3128  001104  0B10               	andlw	16
  3129  001106  6E13               	movwf	check_MAX_RT@MAX_RT,c
  3130                           
  3131                           ;nRF24L01_RX.h: 213: MAX_RT = MAX_RT >> 4;
  3132  001108  3813               	swapf	check_MAX_RT@MAX_RT,w,c
  3133  00110A  0B0F               	andlw	15
  3134  00110C  6E13               	movwf	check_MAX_RT@MAX_RT,c
  3135                           
  3136                           ;nRF24L01_RX.h: 215: return MAX_RT;
  3137  00110E  5013               	movf	check_MAX_RT@MAX_RT,w,c
  3138  001110  0012               	return	
  3139  001112                     __end_of_check_MAX_RT:
  3140                           	opt stack 0
  3141                           tblptru	equ	0xFF8
  3142                           intcon	equ	0xFF2
  3143                           intcon2	equ	0xFF1
  3144                           intcon3	equ	0xFF0
  3145                           postinc0	equ	0xFEE
  3146                           wreg	equ	0xFE8
  3147                           status	equ	0xFD8
  3148                           
  3149 ;; *************** function _spi_write *****************
  3150 ;; Defined at:
  3151 ;;		line 46 in file "spi.h"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;  data            1    wreg     unsigned char 
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;  data            1   16[COMRAM] unsigned char 
  3156 ;; Return value:  Size  Location     Type
  3157 ;;                  1    wreg      unsigned char 
  3158 ;; Registers used:
  3159 ;;		wreg, status,2
  3160 ;; Tracked objects:
  3161 ;;		On entry : 0/0
  3162 ;;		On exit  : 0/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3168 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3169 ;;Total ram usage:        1 bytes
  3170 ;; Hardware stack levels used:    1
  3171 ;; Hardware stack levels required when called:    1
  3172 ;; This function calls:
  3173 ;;		Nothing
  3174 ;; This function is called by:
  3175 ;;		_configure_RX
  3176 ;;		_write_ACK
  3177 ;;		_reset_RX
  3178 ;;		_check_MAX_RT
  3179 ;;		_reset_MAX_RT
  3180 ;;		_flush
  3181 ;;		_count_retr
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           	psect	text14
  3186  0011A4                     __ptext14:
  3187                           	opt stack 0
  3188  0011A4                     _spi_write:
  3189                           	opt stack 28
  3190                           
  3191                           ;incstack = 0
  3192                           ;spi_write@data stored from wreg
  3193  0011A4  6E11               	movwf	spi_write@data,c
  3194                           
  3195                           ;spi.h: 47: SSPSTATbits.BF = 0;
  3196  0011A6  90C7               	bcf	4039,0,c	;volatile
  3197                           
  3198                           ;spi.h: 48: SSPBUF = data;
  3199  0011A8  C011  FFC9         	movff	spi_write@data,4041	;volatile
  3200  0011AC                     l235:
  3201  0011AC  A0C7               	btfss	4039,0,c	;volatile
  3202  0011AE  D7FE               	goto	l235
  3203                           
  3204                           ;spi.h: 50: return SSPBUF;
  3205  0011B0  50C9               	movf	4041,w,c	;volatile
  3206  0011B2  0012               	return		;funcret
  3207  0011B4                     __end_of_spi_write:
  3208                           	opt stack 0
  3209                           tblptru	equ	0xFF8
  3210                           intcon	equ	0xFF2
  3211                           intcon2	equ	0xFF1
  3212                           intcon3	equ	0xFF0
  3213                           postinc0	equ	0xFEE
  3214                           wreg	equ	0xFE8
  3215                           status	equ	0xFD8
  3216                           
  3217 ;; *************** function _brake *****************
  3218 ;; Defined at:
  3219 ;;		line 188 in file "VNH5019_lib.h"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;  last_dir        1    wreg     unsigned char 
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  last_dir        1   10[BANK0 ] unsigned char 
  3224 ;;  duty            2    7[BANK0 ] int 
  3225 ;;  dir             1    9[BANK0 ] unsigned char 
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  1    wreg      void 
  3228 ;; Registers used:
  3229 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3236 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3238 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3239 ;;Total ram usage:        5 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:    4
  3242 ;; This function calls:
  3243 ;;		_set_dir
  3244 ;;		_set_duty
  3245 ;; This function is called by:
  3246 ;;		_main
  3247 ;; This function uses a non-reentrant model
  3248 ;;
  3249                           
  3250                           	psect	text15
  3251  001020                     __ptext15:
  3252                           	opt stack 0
  3253  001020                     _brake:
  3254                           	opt stack 26
  3255                           
  3256                           ;incstack = 0
  3257                           ;brake@last_dir stored from wreg
  3258  001020  0100               	movlb	0	; () banked
  3259  001022  6FA0               	movwf	brake@last_dir& (0+255),b
  3260                           
  3261                           ;VNH5019_lib.h: 190: int duty;
  3262                           ;VNH5019_lib.h: 191: char dir;
  3263                           ;VNH5019_lib.h: 193: if(last_dir == 'U') dir = 'D';
  3264  001024  0E55               	movlw	85
  3265  001026  0100               	movlb	0	; () banked
  3266  001028  19A0               	xorwf	brake@last_dir& (0+255),w,b
  3267  00102A  A4D8               	btfss	status,2,c
  3268  00102C  D002               	goto	l2932
  3269                           
  3270                           ; BSR set to: 0
  3271  00102E  0E44               	movlw	68
  3272  001030  D006               	goto	L13
  3273  001032                     l2932:
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;VNH5019_lib.h: 194: else if(last_dir == 'D') dir = 'U';
  3277  001032  0E44               	movlw	68
  3278  001034  0100               	movlb	0	; () banked
  3279  001036  19A0               	xorwf	brake@last_dir& (0+255),w,b
  3280  001038  A4D8               	btfss	status,2,c
  3281  00103A  D003               	goto	l2936
  3282                           
  3283                           ; BSR set to: 0
  3284  00103C  0E55               	movlw	85
  3285  00103E                     L13:
  3286  00103E  0100               	movlb	0	; () banked
  3287  001040  6F9F               	movwf	brake@dir& (0+255),b
  3288  001042                     l2936:
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;VNH5019_lib.h: 196: set_dir(dir);
  3292  001042  0100               	movlb	0	; () banked
  3293  001044  519F               	movf	brake@dir& (0+255),w,b
  3294  001046  ECDF  F007         	call	_set_dir
  3295                           
  3296                           ;VNH5019_lib.h: 197: duty = 10;
  3297  00104A  0E00               	movlw	0
  3298  00104C  0100               	movlb	0	; () banked
  3299  00104E  6F9E               	movwf	(brake@duty+1)& (0+255),b
  3300  001050  0E0A               	movlw	10
  3301  001052  6F9D               	movwf	brake@duty& (0+255),b
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;VNH5019_lib.h: 198: set_duty(duty);
  3305  001054  C09D  F039         	movff	brake@duty,set_duty@D
  3306  001058  C09E  F03A         	movff	brake@duty+1,set_duty@D+1
  3307  00105C  EC42  F007         	call	_set_duty	;wreg free
  3308                           
  3309                           ;VNH5019_lib.h: 199: _delay((unsigned long)((30)*(8000000/4000.0)));
  3310  001060  0E4E               	movlw	78
  3311  001062  0100               	movlb	0	; () banked
  3312  001064  6F9C               	movwf	??_brake& (0+255),b
  3313  001066  0EEB               	movlw	235
  3314  001068                     u2887:
  3315  001068  2EE8               	decfsz	wreg,f,c
  3316  00106A  D7FE               	bra	u2887
  3317  00106C  2F9C               	decfsz	??_brake& (0+255),f,b
  3318  00106E  D7FC               	bra	u2887
  3319  001070  0012               	return		;funcret
  3320  001072                     __end_of_brake:
  3321                           	opt stack 0
  3322                           tblptru	equ	0xFF8
  3323                           intcon	equ	0xFF2
  3324                           intcon2	equ	0xFF1
  3325                           intcon3	equ	0xFF0
  3326                           postinc0	equ	0xFEE
  3327                           wreg	equ	0xFE8
  3328                           status	equ	0xFD8
  3329                           
  3330 ;; *************** function _set_duty *****************
  3331 ;; Defined at:
  3332 ;;		line 59 in file "VNH5019_lib.h"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;  D               2   56[COMRAM] int 
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;  d               2    4[BANK0 ] int 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  1    wreg      void 
  3339 ;; Registers used:
  3340 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3346 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3347 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3348 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3349 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3350 ;;Total ram usage:        8 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    3
  3353 ;; This function calls:
  3354 ;;		___wmul
  3355 ;;		_dec_to_bin
  3356 ;; This function is called by:
  3357 ;;		_engine
  3358 ;;		_engine_left
  3359 ;;		_engine_right
  3360 ;;		_brake
  3361 ;;		_main
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365                           	psect	text16
  3366  000E84                     __ptext16:
  3367                           	opt stack 0
  3368  000E84                     _set_duty:
  3369                           	opt stack 27
  3370                           
  3371                           ;VNH5019_lib.h: 61: int d;
  3372                           ;VNH5019_lib.h: 63: d = dec_to_bin(D*10);
  3373                           
  3374                           ;incstack = 0
  3375  000E84  C039  F011         	movff	set_duty@D,___wmul@multiplier
  3376  000E88  C03A  F012         	movff	set_duty@D+1,___wmul@multiplier+1
  3377  000E8C  0E00               	movlw	0
  3378  000E8E  6E14               	movwf	___wmul@multiplicand+1,c
  3379  000E90  0E0A               	movlw	10
  3380  000E92  6E13               	movwf	___wmul@multiplicand,c
  3381  000E94  EC64  F008         	call	___wmul	;wreg free
  3382  000E98  C011  F098         	movff	?___wmul,_set_duty$2393
  3383  000E9C  C012  F099         	movff	?___wmul+1,_set_duty$2393+1
  3384                           
  3385                           ;VNH5019_lib.h: 61: int d;
  3386                           ;VNH5019_lib.h: 63: d = dec_to_bin(D*10);
  3387  000EA0  C098  F019         	movff	_set_duty$2393,dec_to_bin@n
  3388  000EA4  C099  F01A         	movff	_set_duty$2393+1,dec_to_bin@n+1
  3389  000EA8  EC44  F004         	call	_dec_to_bin	;wreg free
  3390  000EAC  C019  F09A         	movff	?_dec_to_bin,set_duty@d
  3391  000EB0  C01A  F09B         	movff	?_dec_to_bin+1,set_duty@d+1
  3392                           
  3393                           ;VNH5019_lib.h: 64: CCPR4L = d >> 2;
  3394  000EB4  C09A  F096         	movff	set_duty@d,??_set_duty
  3395  000EB8  C09B  F097         	movff	set_duty@d+1,??_set_duty+1
  3396  000EBC  0100               	movlb	0	; () banked
  3397  000EBE  3597               	rlcf	(??_set_duty+1)& (0+255),w,b
  3398  000EC0  3397               	rrcf	(??_set_duty+1)& (0+255),f,b
  3399  000EC2  3396               	rrcf	??_set_duty& (0+255),f,b
  3400  000EC4  0100               	movlb	0	; () banked
  3401  000EC6  3597               	rlcf	(??_set_duty+1)& (0+255),w,b
  3402  000EC8  3397               	rrcf	(??_set_duty+1)& (0+255),f,b
  3403  000ECA  3396               	rrcf	??_set_duty& (0+255),f,b
  3404  000ECC  0100               	movlb	0	; () banked
  3405  000ECE  5196               	movf	??_set_duty& (0+255),w,b
  3406  000ED0  010F               	movlb	15	; () banked
  3407  000ED2  6F4B               	movwf	75,b	;volatile
  3408                           
  3409                           ; BSR set to: 15
  3410                           ;VNH5019_lib.h: 65: CCPR3L = d >> 2;
  3411  000ED4  C09A  F096         	movff	set_duty@d,??_set_duty
  3412  000ED8  C09B  F097         	movff	set_duty@d+1,??_set_duty+1
  3413  000EDC  0100               	movlb	0	; () banked
  3414  000EDE  3597               	rlcf	(??_set_duty+1)& (0+255),w,b
  3415  000EE0  3397               	rrcf	(??_set_duty+1)& (0+255),f,b
  3416  000EE2  3396               	rrcf	??_set_duty& (0+255),f,b
  3417  000EE4  0100               	movlb	0	; () banked
  3418  000EE6  3597               	rlcf	(??_set_duty+1)& (0+255),w,b
  3419  000EE8  3397               	rrcf	(??_set_duty+1)& (0+255),f,b
  3420  000EEA  3396               	rrcf	??_set_duty& (0+255),f,b
  3421  000EEC  0100               	movlb	0	; () banked
  3422  000EEE  5196               	movf	??_set_duty& (0+255),w,b
  3423  000EF0  010F               	movlb	15	; () banked
  3424  000EF2  6F4E               	movwf	78,b	;volatile
  3425                           
  3426                           ; BSR set to: 15
  3427  000EF4  0012               	return		;funcret
  3428  000EF6                     __end_of_set_duty:
  3429                           	opt stack 0
  3430                           tblptru	equ	0xFF8
  3431                           intcon	equ	0xFF2
  3432                           intcon2	equ	0xFF1
  3433                           intcon3	equ	0xFF0
  3434                           postinc0	equ	0xFEE
  3435                           wreg	equ	0xFE8
  3436                           status	equ	0xFD8
  3437                           
  3438 ;; *************** function _dec_to_bin *****************
  3439 ;; Defined at:
  3440 ;;		line 32 in file "VNH5019_lib.h"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;  n               2   24[COMRAM] int 
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;  A              20   28[COMRAM] int [10]
  3445 ;;  pos             2   54[COMRAM] int 
  3446 ;;  i               2   52[COMRAM] int 
  3447 ;;  power           2   50[COMRAM] int 
  3448 ;;  bin             2   48[COMRAM] int 
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  2   24[COMRAM] int 
  3451 ;; Registers used:
  3452 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3458 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3459 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3460 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3461 ;;      Totals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3462 ;;Total ram usage:       32 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:    2
  3465 ;; This function calls:
  3466 ;;		___awdiv
  3467 ;;		___wmul
  3468 ;; This function is called by:
  3469 ;;		_set_duty
  3470 ;;		_set_duty_left
  3471 ;;		_set_duty_right
  3472 ;; This function uses a non-reentrant model
  3473 ;;
  3474                           
  3475                           	psect	text17
  3476  000888                     __ptext17:
  3477                           	opt stack 0
  3478  000888                     _dec_to_bin:
  3479                           	opt stack 27
  3480                           
  3481                           ;VNH5019_lib.h: 34: int i, bin = 0, pos = 0, power = 1;
  3482                           
  3483                           ; BSR set to: 15
  3484                           ;incstack = 0
  3485  000888  0E00               	movlw	0
  3486  00088A  6E32               	movwf	dec_to_bin@bin+1,c
  3487  00088C  0E00               	movlw	0
  3488  00088E  6E31               	movwf	dec_to_bin@bin,c
  3489  000890  0E00               	movlw	0
  3490  000892  6E38               	movwf	dec_to_bin@pos+1,c
  3491  000894  0E00               	movlw	0
  3492  000896  6E37               	movwf	dec_to_bin@pos,c
  3493  000898  0E00               	movlw	0
  3494  00089A  6E34               	movwf	dec_to_bin@power+1,c
  3495  00089C  0E01               	movlw	1
  3496  00089E  6E33               	movwf	dec_to_bin@power,c
  3497                           
  3498                           ;VNH5019_lib.h: 35: int A[10] = {0,0,0,0,0,0,0,0,0,0};
  3499  0008A0  EE20  F060         	lfsr	2,dec_to_bin@F15303
  3500  0008A4  EE10  F01D         	lfsr	1,dec_to_bin@A
  3501  0008A8  0E13               	movlw	19
  3502  0008AA                     u2161:
  3503  0008AA  CFDB FFE3          	movff	plusw2,plusw1
  3504  0008AE  06E8               	decf	wreg,f,c
  3505  0008B0  E2FC               	bc	u2161
  3506                           
  3507                           ;VNH5019_lib.h: 37: while(pos < 10)
  3508  0008B2  D038               	goto	l2848
  3509  0008B4                     l2838:
  3510                           
  3511                           ;VNH5019_lib.h: 38: {
  3512                           ;VNH5019_lib.h: 39: if(n > 0)
  3513  0008B4  BE1A               	btfsc	dec_to_bin@n+1,7,c
  3514  0008B6  D027               	goto	l2844
  3515  0008B8  501A               	movf	dec_to_bin@n+1,w,c
  3516  0008BA  E103               	bnz	u2170
  3517  0008BC  0419               	decf	dec_to_bin@n,w,c
  3518  0008BE  A0D8               	btfss	status,0,c
  3519  0008C0  D022               	goto	l2844
  3520  0008C2                     u2170:
  3521                           
  3522                           ;VNH5019_lib.h: 40: {
  3523                           ;VNH5019_lib.h: 41: A[pos] = n%2;
  3524  0008C2  0E01               	movlw	1
  3525  0008C4  1419               	andwf	dec_to_bin@n,w,c
  3526  0008C6  6E1B               	movwf	??_dec_to_bin& (0+255),c
  3527  0008C8  0E00               	movlw	0
  3528  0008CA  141A               	andwf	dec_to_bin@n+1,w,c
  3529  0008CC  6E1C               	movwf	(??_dec_to_bin+1)& (0+255),c
  3530  0008CE  90D8               	bcf	status,0,c
  3531  0008D0  3437               	rlcf	dec_to_bin@pos,w,c
  3532  0008D2  6ED9               	movwf	fsr2l,c
  3533  0008D4  3438               	rlcf	dec_to_bin@pos+1,w,c
  3534  0008D6  6EDA               	movwf	fsr2h,c
  3535  0008D8  0E1D               	movlw	low dec_to_bin@A
  3536  0008DA  26D9               	addwf	fsr2l,f,c
  3537  0008DC  0E00               	movlw	high dec_to_bin@A
  3538  0008DE  22DA               	addwfc	fsr2h,f,c
  3539  0008E0  C01B  FFDE         	movff	??_dec_to_bin,postinc2
  3540  0008E4  C01C  FFDD         	movff	??_dec_to_bin+1,postdec2
  3541                           
  3542                           ;VNH5019_lib.h: 42: n = n/2;
  3543  0008E8  C019  F011         	movff	dec_to_bin@n,___awdiv@dividend
  3544  0008EC  C01A  F012         	movff	dec_to_bin@n+1,___awdiv@dividend+1
  3545  0008F0  0E00               	movlw	0
  3546  0008F2  6E14               	movwf	___awdiv@divisor+1,c
  3547  0008F4  0E02               	movlw	2
  3548  0008F6  6E13               	movwf	___awdiv@divisor,c
  3549  0008F8  EC00  F007         	call	___awdiv	;wreg free
  3550  0008FC  C011  F019         	movff	?___awdiv,dec_to_bin@n
  3551  000900  C012  F01A         	movff	?___awdiv+1,dec_to_bin@n+1
  3552                           
  3553                           ;VNH5019_lib.h: 43: }
  3554  000904  D00D               	goto	l2846
  3555  000906                     l2844:
  3556                           
  3557                           ;VNH5019_lib.h: 44: else A[pos]=0;
  3558  000906  90D8               	bcf	status,0,c
  3559  000908  3437               	rlcf	dec_to_bin@pos,w,c
  3560  00090A  6ED9               	movwf	fsr2l,c
  3561  00090C  3438               	rlcf	dec_to_bin@pos+1,w,c
  3562  00090E  6EDA               	movwf	fsr2h,c
  3563  000910  0E1D               	movlw	low dec_to_bin@A
  3564  000912  26D9               	addwf	fsr2l,f,c
  3565  000914  0E00               	movlw	high dec_to_bin@A
  3566  000916  22DA               	addwfc	fsr2h,f,c
  3567  000918  0E00               	movlw	0
  3568  00091A  6EDE               	movwf	postinc2,c
  3569  00091C  0E00               	movlw	0
  3570  00091E  6EDD               	movwf	postdec2,c
  3571  000920                     l2846:
  3572                           
  3573                           ;VNH5019_lib.h: 46: pos++;
  3574  000920  4A37               	infsnz	dec_to_bin@pos,f,c
  3575  000922  2A38               	incf	dec_to_bin@pos+1,f,c
  3576  000924                     l2848:
  3577  000924  BE38               	btfsc	dec_to_bin@pos+1,7,c
  3578  000926  D7C6               	goto	l2838
  3579  000928  5038               	movf	dec_to_bin@pos+1,w,c
  3580  00092A  E104               	bnz	l2850
  3581  00092C  0E0A               	movlw	10
  3582  00092E  5C37               	subwf	dec_to_bin@pos,w,c
  3583  000930  A0D8               	btfss	status,0,c
  3584  000932  D7C0               	goto	l2838
  3585  000934                     l2850:
  3586                           
  3587                           ;VNH5019_lib.h: 47: }
  3588                           ;VNH5019_lib.h: 49: for (i=0; i<10; i++)
  3589  000934  0E00               	movlw	0
  3590  000936  6E36               	movwf	dec_to_bin@i+1,c
  3591  000938  0E00               	movlw	0
  3592  00093A  6E35               	movwf	dec_to_bin@i,c
  3593  00093C  BE36               	btfsc	dec_to_bin@i+1,7,c
  3594  00093E  D006               	goto	l2856
  3595  000940  5036               	movf	dec_to_bin@i+1,w,c
  3596  000942  E125               	bnz	l302
  3597  000944  0E0A               	movlw	10
  3598  000946  5C35               	subwf	dec_to_bin@i,w,c
  3599  000948  B0D8               	btfsc	status,0,c
  3600  00094A  D021               	goto	l302
  3601  00094C                     l2856:
  3602                           
  3603                           ;VNH5019_lib.h: 50: {
  3604                           ;VNH5019_lib.h: 51: bin += A[i]*power;
  3605  00094C  90D8               	bcf	status,0,c
  3606  00094E  3435               	rlcf	dec_to_bin@i,w,c
  3607  000950  6ED9               	movwf	fsr2l,c
  3608  000952  3436               	rlcf	dec_to_bin@i+1,w,c
  3609  000954  6EDA               	movwf	fsr2h,c
  3610  000956  0E1D               	movlw	low dec_to_bin@A
  3611  000958  26D9               	addwf	fsr2l,f,c
  3612  00095A  0E00               	movlw	high dec_to_bin@A
  3613  00095C  22DA               	addwfc	fsr2h,f,c
  3614  00095E  CFDE F011          	movff	postinc2,___wmul@multiplier
  3615  000962  CFDD F012          	movff	postdec2,___wmul@multiplier+1
  3616  000966  C033  F013         	movff	dec_to_bin@power,___wmul@multiplicand
  3617  00096A  C034  F014         	movff	dec_to_bin@power+1,___wmul@multiplicand+1
  3618  00096E  EC64  F008         	call	___wmul	;wreg free
  3619  000972  5011               	movf	?___wmul,w,c
  3620  000974  2631               	addwf	dec_to_bin@bin,f,c
  3621  000976  5012               	movf	?___wmul+1,w,c
  3622  000978  2232               	addwfc	dec_to_bin@bin+1,f,c
  3623                           
  3624                           ;VNH5019_lib.h: 52: power *= 2;
  3625  00097A  90D8               	bcf	status,0,c
  3626  00097C  3633               	rlcf	dec_to_bin@power,f,c
  3627  00097E  3634               	rlcf	dec_to_bin@power+1,f,c
  3628  000980  4A35               	infsnz	dec_to_bin@i,f,c
  3629  000982  2A36               	incf	dec_to_bin@i+1,f,c
  3630  000984  BE36               	btfsc	dec_to_bin@i+1,7,c
  3631  000986  D7E2               	goto	l2856
  3632  000988  5036               	movf	dec_to_bin@i+1,w,c
  3633  00098A  E101               	bnz	u2200
  3634  00098C  D7DB               	goto	L14
  3635  00098E                     u2200:
  3636  00098E                     l302:
  3637                           
  3638                           ;VNH5019_lib.h: 53: }
  3639                           ;VNH5019_lib.h: 55: return bin;
  3640  00098E  C031  F019         	movff	dec_to_bin@bin,?_dec_to_bin
  3641  000992  C032  F01A         	movff	dec_to_bin@bin+1,?_dec_to_bin+1
  3642  000996  0012               	return		;funcret
  3643  000998                     __end_of_dec_to_bin:
  3644                           	opt stack 0
  3645                           tblptru	equ	0xFF8
  3646                           intcon	equ	0xFF2
  3647                           intcon2	equ	0xFF1
  3648                           intcon3	equ	0xFF0
  3649                           postinc0	equ	0xFEE
  3650                           wreg	equ	0xFE8
  3651                           plusw1	equ	0xFE3
  3652                           postinc2	equ	0xFDE
  3653                           postdec2	equ	0xFDD
  3654                           plusw2	equ	0xFDB
  3655                           fsr2h	equ	0xFDA
  3656                           fsr2l	equ	0xFD9
  3657                           status	equ	0xFD8
  3658                           
  3659 ;; *************** function ___wmul *****************
  3660 ;; Defined at:
  3661 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;  multiplier      2   16[COMRAM] unsigned int 
  3664 ;;  multiplicand    2   18[COMRAM] unsigned int 
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;  product         2   20[COMRAM] unsigned int 
  3667 ;; Return value:  Size  Location     Type
  3668 ;;                  2   16[COMRAM] unsigned int 
  3669 ;; Registers used:
  3670 ;;		wreg, status,2, status,0, prodl, prodh
  3671 ;; Tracked objects:
  3672 ;;		On entry : 0/0
  3673 ;;		On exit  : 0/0
  3674 ;;		Unchanged: 0/0
  3675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3676 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3677 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3679 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3680 ;;Total ram usage:        6 bytes
  3681 ;; Hardware stack levels used:    1
  3682 ;; Hardware stack levels required when called:    1
  3683 ;; This function calls:
  3684 ;;		Nothing
  3685 ;; This function is called by:
  3686 ;;		_dec_to_bin
  3687 ;;		_set_duty
  3688 ;;		_set_duty_left
  3689 ;;		_set_duty_right
  3690 ;; This function uses a non-reentrant model
  3691 ;;
  3692                           
  3693                           	psect	text18
  3694  0010C8                     __ptext18:
  3695                           	opt stack 0
  3696  0010C8                     ___wmul:
  3697                           	opt stack 27
  3698                           
  3699                           ;incstack = 0
  3700  0010C8  5011               	movf	___wmul@multiplier,w,c
  3701  0010CA  0213               	mulwf	___wmul@multiplicand,c
  3702  0010CC  CFF3 F015          	movff	prodl,___wmul@product
  3703  0010D0  CFF4 F016          	movff	prodh,___wmul@product+1
  3704  0010D4  5011               	movf	___wmul@multiplier,w,c
  3705  0010D6  0214               	mulwf	___wmul@multiplicand+1,c
  3706  0010D8  50F3               	movf	prodl,w,c
  3707  0010DA  2616               	addwf	___wmul@product+1,f,c
  3708  0010DC  5012               	movf	___wmul@multiplier+1,w,c
  3709  0010DE  0213               	mulwf	___wmul@multiplicand,c
  3710  0010E0  50F3               	movf	prodl,w,c
  3711  0010E2  2616               	addwf	___wmul@product+1,f,c
  3712  0010E4  C015  F011         	movff	___wmul@product,?___wmul
  3713  0010E8  C016  F012         	movff	___wmul@product+1,?___wmul+1
  3714  0010EC  0012               	return	
  3715  0010EE                     __end_of___wmul:
  3716                           	opt stack 0
  3717                           tblptru	equ	0xFF8
  3718                           prodh	equ	0xFF4
  3719                           prodl	equ	0xFF3
  3720                           intcon	equ	0xFF2
  3721                           intcon2	equ	0xFF1
  3722                           intcon3	equ	0xFF0
  3723                           postinc0	equ	0xFEE
  3724                           wreg	equ	0xFE8
  3725                           plusw1	equ	0xFE3
  3726                           postinc2	equ	0xFDE
  3727                           postdec2	equ	0xFDD
  3728                           plusw2	equ	0xFDB
  3729                           fsr2h	equ	0xFDA
  3730                           fsr2l	equ	0xFD9
  3731                           status	equ	0xFD8
  3732                           
  3733 ;; *************** function ___awdiv *****************
  3734 ;; Defined at:
  3735 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  3736 ;; Parameters:    Size  Location     Type
  3737 ;;  dividend        2   16[COMRAM] int 
  3738 ;;  divisor         2   18[COMRAM] int 
  3739 ;; Auto vars:     Size  Location     Type
  3740 ;;  quotient        2   22[COMRAM] int 
  3741 ;;  sign            1   21[COMRAM] unsigned char 
  3742 ;;  counter         1   20[COMRAM] unsigned char 
  3743 ;; Return value:  Size  Location     Type
  3744 ;;                  2   16[COMRAM] int 
  3745 ;; Registers used:
  3746 ;;		wreg, status,2, status,0
  3747 ;; Tracked objects:
  3748 ;;		On entry : 0/0
  3749 ;;		On exit  : 0/0
  3750 ;;		Unchanged: 0/0
  3751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3752 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3753 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3755 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3756 ;;Total ram usage:        8 bytes
  3757 ;; Hardware stack levels used:    1
  3758 ;; Hardware stack levels required when called:    1
  3759 ;; This function calls:
  3760 ;;		Nothing
  3761 ;; This function is called by:
  3762 ;;		_dec_to_bin
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           	psect	text19
  3767  000E00                     __ptext19:
  3768                           	opt stack 0
  3769  000E00                     ___awdiv:
  3770                           	opt stack 27
  3771                           
  3772                           ;incstack = 0
  3773  000E00  0E00               	movlw	0
  3774  000E02  6E16               	movwf	___awdiv@sign,c
  3775  000E04  AE14               	btfss	___awdiv@divisor+1,7,c
  3776  000E06  D006               	goto	l2798
  3777  000E08  6C13               	negf	___awdiv@divisor,c
  3778  000E0A  1E14               	comf	___awdiv@divisor+1,f,c
  3779  000E0C  B0D8               	btfsc	status,0,c
  3780  000E0E  2A14               	incf	___awdiv@divisor+1,f,c
  3781  000E10  0E01               	movlw	1
  3782  000E12  6E16               	movwf	___awdiv@sign,c
  3783  000E14                     l2798:
  3784  000E14  AE12               	btfss	___awdiv@dividend+1,7,c
  3785  000E16  D006               	goto	l2804
  3786  000E18  6C11               	negf	___awdiv@dividend,c
  3787  000E1A  1E12               	comf	___awdiv@dividend+1,f,c
  3788  000E1C  B0D8               	btfsc	status,0,c
  3789  000E1E  2A12               	incf	___awdiv@dividend+1,f,c
  3790  000E20  0E01               	movlw	1
  3791  000E22  1A16               	xorwf	___awdiv@sign,f,c
  3792  000E24                     l2804:
  3793  000E24  0E00               	movlw	0
  3794  000E26  6E18               	movwf	___awdiv@quotient+1,c
  3795  000E28  0E00               	movlw	0
  3796  000E2A  6E17               	movwf	___awdiv@quotient,c
  3797  000E2C  5013               	movf	___awdiv@divisor,w,c
  3798  000E2E  1014               	iorwf	___awdiv@divisor+1,w,c
  3799  000E30  B4D8               	btfsc	status,2,c
  3800  000E32  D01C               	goto	l2826
  3801  000E34  0E01               	movlw	1
  3802  000E36  6E15               	movwf	___awdiv@counter,c
  3803  000E38  D004               	goto	l2812
  3804  000E3A                     l2810:
  3805  000E3A  90D8               	bcf	status,0,c
  3806  000E3C  3613               	rlcf	___awdiv@divisor,f,c
  3807  000E3E  3614               	rlcf	___awdiv@divisor+1,f,c
  3808  000E40  2A15               	incf	___awdiv@counter,f,c
  3809  000E42                     l2812:
  3810  000E42  AE14               	btfss	___awdiv@divisor+1,7,c
  3811  000E44  D7FA               	goto	l2810
  3812  000E46                     l2814:
  3813  000E46  90D8               	bcf	status,0,c
  3814  000E48  3617               	rlcf	___awdiv@quotient,f,c
  3815  000E4A  3618               	rlcf	___awdiv@quotient+1,f,c
  3816  000E4C  5013               	movf	___awdiv@divisor,w,c
  3817  000E4E  5C11               	subwf	___awdiv@dividend,w,c
  3818  000E50  5014               	movf	___awdiv@divisor+1,w,c
  3819  000E52  5812               	subwfb	___awdiv@dividend+1,w,c
  3820  000E54  A0D8               	btfss	status,0,c
  3821  000E56  D005               	goto	l2822
  3822  000E58  5013               	movf	___awdiv@divisor,w,c
  3823  000E5A  5E11               	subwf	___awdiv@dividend,f,c
  3824  000E5C  5014               	movf	___awdiv@divisor+1,w,c
  3825  000E5E  5A12               	subwfb	___awdiv@dividend+1,f,c
  3826  000E60  8017               	bsf	___awdiv@quotient,0,c
  3827  000E62                     l2822:
  3828  000E62  90D8               	bcf	status,0,c
  3829  000E64  3214               	rrcf	___awdiv@divisor+1,f,c
  3830  000E66  3213               	rrcf	___awdiv@divisor,f,c
  3831  000E68  2E15               	decfsz	___awdiv@counter,f,c
  3832  000E6A  D7ED               	goto	l2814
  3833  000E6C                     l2826:
  3834  000E6C  5016               	movf	___awdiv@sign,w,c
  3835  000E6E  B4D8               	btfsc	status,2,c
  3836  000E70  D004               	goto	l2830
  3837  000E72  6C17               	negf	___awdiv@quotient,c
  3838  000E74  1E18               	comf	___awdiv@quotient+1,f,c
  3839  000E76  B0D8               	btfsc	status,0,c
  3840  000E78  2A18               	incf	___awdiv@quotient+1,f,c
  3841  000E7A                     l2830:
  3842  000E7A  C017  F011         	movff	___awdiv@quotient,?___awdiv
  3843  000E7E  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  3844  000E82  0012               	return	
  3845  000E84                     __end_of___awdiv:
  3846                           	opt stack 0
  3847                           tblptru	equ	0xFF8
  3848                           prodh	equ	0xFF4
  3849                           prodl	equ	0xFF3
  3850                           intcon	equ	0xFF2
  3851                           intcon2	equ	0xFF1
  3852                           intcon3	equ	0xFF0
  3853                           postinc0	equ	0xFEE
  3854                           wreg	equ	0xFE8
  3855                           plusw1	equ	0xFE3
  3856                           postinc2	equ	0xFDE
  3857                           postdec2	equ	0xFDD
  3858                           plusw2	equ	0xFDB
  3859                           fsr2h	equ	0xFDA
  3860                           fsr2l	equ	0xFD9
  3861                           status	equ	0xFD8
  3862                           
  3863 ;; *************** function _set_dir *****************
  3864 ;; Defined at:
  3865 ;;		line 98 in file "VNH5019_lib.h"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;  dir             1    wreg     unsigned char 
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;  dir             1   16[COMRAM] unsigned char 
  3870 ;; Return value:  Size  Location     Type
  3871 ;;                  1    wreg      void 
  3872 ;; Registers used:
  3873 ;;		wreg, status,2, status,0
  3874 ;; Tracked objects:
  3875 ;;		On entry : 0/0
  3876 ;;		On exit  : 0/0
  3877 ;;		Unchanged: 0/0
  3878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3880 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3882 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3883 ;;Total ram usage:        1 bytes
  3884 ;; Hardware stack levels used:    1
  3885 ;; Hardware stack levels required when called:    1
  3886 ;; This function calls:
  3887 ;;		Nothing
  3888 ;; This function is called by:
  3889 ;;		_engine
  3890 ;;		_engine_left
  3891 ;;		_engine_right
  3892 ;;		_brake
  3893 ;;		_main
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text20
  3898  000FBE                     __ptext20:
  3899                           	opt stack 0
  3900  000FBE                     _set_dir:
  3901                           	opt stack 29
  3902                           
  3903                           ;incstack = 0
  3904                           ;set_dir@dir stored from wreg
  3905  000FBE  6E11               	movwf	set_dir@dir,c
  3906                           
  3907                           ;VNH5019_lib.h: 100: switch(dir) {
  3908  000FC0  D01E               	goto	l2876
  3909  000FC2                     l319:
  3910  000FC2  808B               	bsf	3979,0,c	;volatile
  3911                           
  3912                           ;VNH5019_lib.h: 102: LATEbits.LATE1 = 1;
  3913  000FC4  828D               	bsf	3981,1,c	;volatile
  3914                           
  3915                           ;VNH5019_lib.h: 103: LATDbits.LATD5 = 0;
  3916  000FC6  9A8C               	bcf	3980,5,c	;volatile
  3917                           
  3918                           ;VNH5019_lib.h: 104: LATBbits.LATB1 = 0;
  3919  000FC8  928A               	bcf	3978,1,c	;volatile
  3920                           
  3921                           ;VNH5019_lib.h: 105: break;
  3922  000FCA  0012               	return	
  3923  000FCC                     l321:
  3924  000FCC  908B               	bcf	3979,0,c	;volatile
  3925                           
  3926                           ;VNH5019_lib.h: 108: LATEbits.LATE1 = 0;
  3927  000FCE  928D               	bcf	3981,1,c	;volatile
  3928                           
  3929                           ;VNH5019_lib.h: 109: LATDbits.LATD5 = 1;
  3930  000FD0  8A8C               	bsf	3980,5,c	;volatile
  3931                           
  3932                           ;VNH5019_lib.h: 110: LATBbits.LATB1 = 1;
  3933  000FD2  828A               	bsf	3978,1,c	;volatile
  3934                           
  3935                           ;VNH5019_lib.h: 111: break;
  3936  000FD4  0012               	return	
  3937  000FD6                     l322:
  3938  000FD6  908B               	bcf	3979,0,c	;volatile
  3939                           
  3940                           ;VNH5019_lib.h: 114: LATEbits.LATE1 = 1;
  3941  000FD8  828D               	bsf	3981,1,c	;volatile
  3942                           
  3943                           ;VNH5019_lib.h: 115: LATDbits.LATD5 = 1;
  3944  000FDA  8A8C               	bsf	3980,5,c	;volatile
  3945                           
  3946                           ;VNH5019_lib.h: 116: LATBbits.LATB1 = 0;
  3947  000FDC  928A               	bcf	3978,1,c	;volatile
  3948                           
  3949                           ;VNH5019_lib.h: 117: break;
  3950  000FDE  0012               	return	
  3951  000FE0                     l323:
  3952  000FE0  808B               	bsf	3979,0,c	;volatile
  3953                           
  3954                           ;VNH5019_lib.h: 120: LATEbits.LATE1 = 0;
  3955  000FE2  928D               	bcf	3981,1,c	;volatile
  3956                           
  3957                           ;VNH5019_lib.h: 121: LATDbits.LATD5 = 0;
  3958  000FE4  9A8C               	bcf	3980,5,c	;volatile
  3959                           
  3960                           ;VNH5019_lib.h: 122: LATBbits.LATB1 = 1;
  3961  000FE6  828A               	bsf	3978,1,c	;volatile
  3962                           
  3963                           ;VNH5019_lib.h: 123: break;
  3964  000FE8  0012               	return	
  3965  000FEA                     l324:
  3966  000FEA  908B               	bcf	3979,0,c	;volatile
  3967                           
  3968                           ;VNH5019_lib.h: 126: LATEbits.LATE1 = 0;
  3969  000FEC  928D               	bcf	3981,1,c	;volatile
  3970                           
  3971                           ;VNH5019_lib.h: 127: LATDbits.LATD5 = 0;
  3972  000FEE  9A8C               	bcf	3980,5,c	;volatile
  3973                           
  3974                           ;VNH5019_lib.h: 128: LATBbits.LATB1 = 0;
  3975  000FF0  928A               	bcf	3978,1,c	;volatile
  3976                           
  3977                           ;VNH5019_lib.h: 129: break;
  3978  000FF2  0012               	return	
  3979  000FF4                     l325:
  3980  000FF4  908B               	bcf	3979,0,c	;volatile
  3981                           
  3982                           ;VNH5019_lib.h: 132: LATEbits.LATE1 = 0;
  3983  000FF6  928D               	bcf	3981,1,c	;volatile
  3984                           
  3985                           ;VNH5019_lib.h: 133: LATDbits.LATD5 = 0;
  3986  000FF8  9A8C               	bcf	3980,5,c	;volatile
  3987                           
  3988                           ;VNH5019_lib.h: 134: LATBbits.LATB1 = 0;
  3989  000FFA  928A               	bcf	3978,1,c	;volatile
  3990                           
  3991                           ;VNH5019_lib.h: 136: }
  3992                           
  3993                           ;VNH5019_lib.h: 135: break;
  3994  000FFC  0012               	return	
  3995  000FFE                     l2876:
  3996  000FFE  5011               	movf	set_dir@dir,w,c
  3997                           
  3998                           ; Switch size 1, requested type "space"
  3999                           ; Number of cases is 5, Range of values is 68 to 85
  4000                           ; switch strategies available:
  4001                           ; Name         Instructions Cycles
  4002                           ; simple_byte           16     9 (average)
  4003                           ;	Chosen strategy is simple_byte
  4004  001000  0A44               	xorlw	68	; case 68
  4005  001002  B4D8               	btfsc	status,2,c
  4006  001004  D7E3               	goto	l321
  4007  001006  0A08               	xorlw	8	; case 76
  4008  001008  B4D8               	btfsc	status,2,c
  4009  00100A  D7E5               	goto	l322
  4010  00100C  0A1E               	xorlw	30	; case 82
  4011  00100E  B4D8               	btfsc	status,2,c
  4012  001010  D7E7               	goto	l323
  4013  001012  0A01               	xorlw	1	; case 83
  4014  001014  B4D8               	btfsc	status,2,c
  4015  001016  D7E9               	goto	l324
  4016  001018  0A06               	xorlw	6	; case 85
  4017  00101A  B4D8               	btfsc	status,2,c
  4018  00101C  D7D2               	goto	l319
  4019  00101E  D7EA               	goto	l325
  4020  001020                     __end_of_set_dir:
  4021                           	opt stack 0
  4022                           tblptru	equ	0xFF8
  4023                           prodh	equ	0xFF4
  4024                           prodl	equ	0xFF3
  4025                           intcon	equ	0xFF2
  4026                           intcon2	equ	0xFF1
  4027                           intcon3	equ	0xFF0
  4028                           postinc0	equ	0xFEE
  4029                           wreg	equ	0xFE8
  4030                           plusw1	equ	0xFE3
  4031                           postinc2	equ	0xFDE
  4032                           postdec2	equ	0xFDD
  4033                           plusw2	equ	0xFDB
  4034                           fsr2h	equ	0xFDA
  4035                           fsr2l	equ	0xFD9
  4036                           status	equ	0xFD8
  4037                           
  4038 ;; *************** function _UART_Init_2 *****************
  4039 ;; Defined at:
  4040 ;;		line 1 in file "uart2.h"
  4041 ;; Parameters:    Size  Location     Type
  4042 ;;  baudrate        4   30[COMRAM] const long 
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;  x               2   42[COMRAM] unsigned int 
  4045 ;; Return value:  Size  Location     Type
  4046 ;;                  1    wreg      unsigned char 
  4047 ;; Registers used:
  4048 ;;		wreg, status,2, status,0, cstack
  4049 ;; Tracked objects:
  4050 ;;		On entry : 0/0
  4051 ;;		On exit  : 0/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4054 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4055 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4056 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4057 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4058 ;;Total ram usage:       14 bytes
  4059 ;; Hardware stack levels used:    1
  4060 ;; Hardware stack levels required when called:    2
  4061 ;; This function calls:
  4062 ;;		___aldiv
  4063 ;; This function is called by:
  4064 ;;		_main
  4065 ;; This function uses a non-reentrant model
  4066 ;;
  4067                           
  4068                           	psect	text21
  4069  00075C                     __ptext21:
  4070                           	opt stack 0
  4071  00075C                     _UART_Init_2:
  4072                           	opt stack 28
  4073                           
  4074                           ;uart2.h: 3: unsigned int x;
  4075                           ;uart2.h: 4: x = (8000000 - baudrate*64)/(baudrate*64);
  4076                           
  4077                           ;incstack = 0
  4078  00075C  C01F  F023         	movff	UART_Init_2@baudrate,??_UART_Init_2
  4079  000760  C020  F024         	movff	UART_Init_2@baudrate+1,??_UART_Init_2+1
  4080  000764  C021  F025         	movff	UART_Init_2@baudrate+2,??_UART_Init_2+2
  4081  000768  C022  F026         	movff	UART_Init_2@baudrate+3,??_UART_Init_2+3
  4082  00076C  0E06               	movlw	6
  4083  00076E                     u1255:
  4084  00076E  90D8               	bcf	status,0,c
  4085  000770  3623               	rlcf	??_UART_Init_2,f,c
  4086  000772  3624               	rlcf	??_UART_Init_2+1,f,c
  4087  000774  3625               	rlcf	??_UART_Init_2+2,f,c
  4088  000776  3626               	rlcf	??_UART_Init_2+3,f,c
  4089  000778  2EE8               	decfsz	wreg,f,c
  4090  00077A  D7F9               	goto	u1255
  4091  00077C  1E23               	comf	??_UART_Init_2,f,c
  4092  00077E  1E24               	comf	??_UART_Init_2+1,f,c
  4093  000780  1E25               	comf	??_UART_Init_2+2,f,c
  4094  000782  1E26               	comf	??_UART_Init_2+3,f,c
  4095  000784  2A23               	incf	??_UART_Init_2,f,c
  4096  000786  0E00               	movlw	0
  4097  000788  2224               	addwfc	??_UART_Init_2+1,f,c
  4098  00078A  2225               	addwfc	??_UART_Init_2+2,f,c
  4099  00078C  2226               	addwfc	??_UART_Init_2+3,f,c
  4100  00078E  0E00               	movlw	0
  4101  000790  2423               	addwf	??_UART_Init_2,w,c
  4102  000792  6E11               	movwf	___aldiv@dividend,c
  4103  000794  0E12               	movlw	18
  4104  000796  2024               	addwfc	??_UART_Init_2+1,w,c
  4105  000798  6E12               	movwf	___aldiv@dividend+1,c
  4106  00079A  0E7A               	movlw	122
  4107  00079C  2025               	addwfc	??_UART_Init_2+2,w,c
  4108  00079E  6E13               	movwf	___aldiv@dividend+2,c
  4109  0007A0  0E00               	movlw	0
  4110  0007A2  2026               	addwfc	??_UART_Init_2+3,w,c
  4111  0007A4  6E14               	movwf	___aldiv@dividend+3,c
  4112  0007A6  C01F  F027         	movff	UART_Init_2@baudrate,??_UART_Init_2+4
  4113  0007AA  C020  F028         	movff	UART_Init_2@baudrate+1,??_UART_Init_2+5
  4114  0007AE  C021  F029         	movff	UART_Init_2@baudrate+2,??_UART_Init_2+6
  4115  0007B2  C022  F02A         	movff	UART_Init_2@baudrate+3,??_UART_Init_2+7
  4116  0007B6  0E06               	movlw	6
  4117  0007B8                     u1265:
  4118  0007B8  90D8               	bcf	status,0,c
  4119  0007BA  3627               	rlcf	??_UART_Init_2+4,f,c
  4120  0007BC  3628               	rlcf	??_UART_Init_2+5,f,c
  4121  0007BE  3629               	rlcf	??_UART_Init_2+6,f,c
  4122  0007C0  362A               	rlcf	??_UART_Init_2+7,f,c
  4123  0007C2  2EE8               	decfsz	wreg,f,c
  4124  0007C4  D7F9               	goto	u1265
  4125  0007C6  C027  F015         	movff	??_UART_Init_2+4,___aldiv@divisor
  4126  0007CA  C028  F016         	movff	??_UART_Init_2+5,___aldiv@divisor+1
  4127  0007CE  C029  F017         	movff	??_UART_Init_2+6,___aldiv@divisor+2
  4128  0007D2  C02A  F018         	movff	??_UART_Init_2+7,___aldiv@divisor+3
  4129  0007D6  EC48  F005         	call	___aldiv	;wreg free
  4130  0007DA  C011  F02B         	movff	?___aldiv,UART_Init_2@x
  4131  0007DE  C012  F02C         	movff	?___aldiv+1,UART_Init_2@x+1
  4132                           
  4133                           ;uart2.h: 5: if(x>255)
  4134  0007E2  042C               	decf	UART_Init_2@x+1,w,c
  4135  0007E4  A0D8               	btfss	status,0,c
  4136  0007E6  D044               	goto	l2098
  4137                           
  4138                           ;uart2.h: 6: {
  4139                           ;uart2.h: 7: x = (8000000 - baudrate*16)/(baudrate*16);
  4140  0007E8  C01F  F023         	movff	UART_Init_2@baudrate,??_UART_Init_2
  4141  0007EC  C020  F024         	movff	UART_Init_2@baudrate+1,??_UART_Init_2+1
  4142  0007F0  C021  F025         	movff	UART_Init_2@baudrate+2,??_UART_Init_2+2
  4143  0007F4  C022  F026         	movff	UART_Init_2@baudrate+3,??_UART_Init_2+3
  4144  0007F8  0E04               	movlw	4
  4145  0007FA                     u1285:
  4146  0007FA  90D8               	bcf	status,0,c
  4147  0007FC  3623               	rlcf	??_UART_Init_2,f,c
  4148  0007FE  3624               	rlcf	??_UART_Init_2+1,f,c
  4149  000800  3625               	rlcf	??_UART_Init_2+2,f,c
  4150  000802  3626               	rlcf	??_UART_Init_2+3,f,c
  4151  000804  2EE8               	decfsz	wreg,f,c
  4152  000806  D7F9               	goto	u1285
  4153  000808  1E23               	comf	??_UART_Init_2,f,c
  4154  00080A  1E24               	comf	??_UART_Init_2+1,f,c
  4155  00080C  1E25               	comf	??_UART_Init_2+2,f,c
  4156  00080E  1E26               	comf	??_UART_Init_2+3,f,c
  4157  000810  2A23               	incf	??_UART_Init_2,f,c
  4158  000812  0E00               	movlw	0
  4159  000814  2224               	addwfc	??_UART_Init_2+1,f,c
  4160  000816  2225               	addwfc	??_UART_Init_2+2,f,c
  4161  000818  2226               	addwfc	??_UART_Init_2+3,f,c
  4162  00081A  0E00               	movlw	0
  4163  00081C  2423               	addwf	??_UART_Init_2,w,c
  4164  00081E  6E11               	movwf	___aldiv@dividend,c
  4165  000820  0E12               	movlw	18
  4166  000822  2024               	addwfc	??_UART_Init_2+1,w,c
  4167  000824  6E12               	movwf	___aldiv@dividend+1,c
  4168  000826  0E7A               	movlw	122
  4169  000828  2025               	addwfc	??_UART_Init_2+2,w,c
  4170  00082A  6E13               	movwf	___aldiv@dividend+2,c
  4171  00082C  0E00               	movlw	0
  4172  00082E  2026               	addwfc	??_UART_Init_2+3,w,c
  4173  000830  6E14               	movwf	___aldiv@dividend+3,c
  4174  000832  C01F  F027         	movff	UART_Init_2@baudrate,??_UART_Init_2+4
  4175  000836  C020  F028         	movff	UART_Init_2@baudrate+1,??_UART_Init_2+5
  4176  00083A  C021  F029         	movff	UART_Init_2@baudrate+2,??_UART_Init_2+6
  4177  00083E  C022  F02A         	movff	UART_Init_2@baudrate+3,??_UART_Init_2+7
  4178  000842  0E04               	movlw	4
  4179  000844                     u1295:
  4180  000844  90D8               	bcf	status,0,c
  4181  000846  3627               	rlcf	??_UART_Init_2+4,f,c
  4182  000848  3628               	rlcf	??_UART_Init_2+5,f,c
  4183  00084A  3629               	rlcf	??_UART_Init_2+6,f,c
  4184  00084C  362A               	rlcf	??_UART_Init_2+7,f,c
  4185  00084E  2EE8               	decfsz	wreg,f,c
  4186  000850  D7F9               	goto	u1295
  4187  000852  C027  F015         	movff	??_UART_Init_2+4,___aldiv@divisor
  4188  000856  C028  F016         	movff	??_UART_Init_2+5,___aldiv@divisor+1
  4189  00085A  C029  F017         	movff	??_UART_Init_2+6,___aldiv@divisor+2
  4190  00085E  C02A  F018         	movff	??_UART_Init_2+7,___aldiv@divisor+3
  4191  000862  EC48  F005         	call	___aldiv	;wreg free
  4192  000866  C011  F02B         	movff	?___aldiv,UART_Init_2@x
  4193  00086A  C012  F02C         	movff	?___aldiv+1,UART_Init_2@x+1
  4194                           
  4195                           ;uart2.h: 8: TXSTA2bits.BRGH = 1;
  4196  00086E  84BA               	bsf	4026,2,c	;volatile
  4197  000870                     l2098:
  4198                           
  4199                           ;uart2.h: 9: }
  4200                           ;uart2.h: 10: if(x<256)
  4201  000870  042C               	decf	UART_Init_2@x+1,w,c
  4202  000872  B0D8               	btfsc	status,0,c
  4203  000874  0012               	return	
  4204                           
  4205                           ;uart2.h: 11: {
  4206                           ;uart2.h: 12: SPBRG2 = x;
  4207  000876  C02B  FF7B         	movff	UART_Init_2@x,3963	;volatile
  4208                           
  4209                           ;uart2.h: 13: TXSTA2bits.SYNC = 0;
  4210  00087A  98BA               	bcf	4026,4,c	;volatile
  4211                           
  4212                           ;uart2.h: 14: RCSTA2bits.SPEN = 1;
  4213  00087C  8EA6               	bsf	4006,7,c	;volatile
  4214                           
  4215                           ;uart2.h: 15: TRISDbits.TRISD7 = 1;
  4216  00087E  8E95               	bsf	3989,7,c	;volatile
  4217                           
  4218                           ;uart2.h: 16: TRISDbits.TRISD6 = 0;
  4219  000880  9C95               	bcf	3989,6,c	;volatile
  4220                           
  4221                           ;uart2.h: 17: RCSTA2bits.CREN = 1;
  4222  000882  88A6               	bsf	4006,4,c	;volatile
  4223                           
  4224                           ;uart2.h: 18: TXSTA2bits.TXEN = 1;
  4225  000884  8ABA               	bsf	4026,5,c	;volatile
  4226                           
  4227                           ;uart2.h: 19: return 1;
  4228                           ;	Return value of _UART_Init_2 is never used
  4229  000886  0012               	return	
  4230  000888                     __end_of_UART_Init_2:
  4231                           	opt stack 0
  4232                           tblptru	equ	0xFF8
  4233                           prodh	equ	0xFF4
  4234                           prodl	equ	0xFF3
  4235                           intcon	equ	0xFF2
  4236                           intcon2	equ	0xFF1
  4237                           intcon3	equ	0xFF0
  4238                           postinc0	equ	0xFEE
  4239                           wreg	equ	0xFE8
  4240                           plusw1	equ	0xFE3
  4241                           postinc2	equ	0xFDE
  4242                           postdec2	equ	0xFDD
  4243                           plusw2	equ	0xFDB
  4244                           fsr2h	equ	0xFDA
  4245                           fsr2l	equ	0xFD9
  4246                           status	equ	0xFD8
  4247                           
  4248 ;; *************** function ___aldiv *****************
  4249 ;; Defined at:
  4250 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;  dividend        4   16[COMRAM] long 
  4253 ;;  divisor         4   20[COMRAM] long 
  4254 ;; Auto vars:     Size  Location     Type
  4255 ;;  quotient        4   26[COMRAM] long 
  4256 ;;  sign            1   25[COMRAM] unsigned char 
  4257 ;;  counter         1   24[COMRAM] unsigned char 
  4258 ;; Return value:  Size  Location     Type
  4259 ;;                  4   16[COMRAM] long 
  4260 ;; Registers used:
  4261 ;;		wreg, status,2, status,0
  4262 ;; Tracked objects:
  4263 ;;		On entry : 0/0
  4264 ;;		On exit  : 0/0
  4265 ;;		Unchanged: 0/0
  4266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4267 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4268 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4270 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4271 ;;Total ram usage:       14 bytes
  4272 ;; Hardware stack levels used:    1
  4273 ;; Hardware stack levels required when called:    1
  4274 ;; This function calls:
  4275 ;;		Nothing
  4276 ;; This function is called by:
  4277 ;;		_UART_Init_2
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281                           	psect	text22
  4282  000A90                     __ptext22:
  4283                           	opt stack 0
  4284  000A90                     ___aldiv:
  4285                           	opt stack 28
  4286                           
  4287                           ;incstack = 0
  4288  000A90  0E00               	movlw	0
  4289  000A92  6E1A               	movwf	___aldiv@sign,c
  4290  000A94  AE18               	btfss	___aldiv@divisor+3,7,c
  4291  000A96  D00A               	goto	l2054
  4292  000A98  1E18               	comf	___aldiv@divisor+3,f,c
  4293  000A9A  1E17               	comf	___aldiv@divisor+2,f,c
  4294  000A9C  1E16               	comf	___aldiv@divisor+1,f,c
  4295  000A9E  6C15               	negf	___aldiv@divisor,c
  4296  000AA0  0E00               	movlw	0
  4297  000AA2  2216               	addwfc	___aldiv@divisor+1,f,c
  4298  000AA4  2217               	addwfc	___aldiv@divisor+2,f,c
  4299  000AA6  2218               	addwfc	___aldiv@divisor+3,f,c
  4300  000AA8  0E01               	movlw	1
  4301  000AAA  6E1A               	movwf	___aldiv@sign,c
  4302  000AAC                     l2054:
  4303  000AAC  AE14               	btfss	___aldiv@dividend+3,7,c
  4304  000AAE  D00A               	goto	l2060
  4305  000AB0  1E14               	comf	___aldiv@dividend+3,f,c
  4306  000AB2  1E13               	comf	___aldiv@dividend+2,f,c
  4307  000AB4  1E12               	comf	___aldiv@dividend+1,f,c
  4308  000AB6  6C11               	negf	___aldiv@dividend,c
  4309  000AB8  0E00               	movlw	0
  4310  000ABA  2212               	addwfc	___aldiv@dividend+1,f,c
  4311  000ABC  2213               	addwfc	___aldiv@dividend+2,f,c
  4312  000ABE  2214               	addwfc	___aldiv@dividend+3,f,c
  4313  000AC0  0E01               	movlw	1
  4314  000AC2  1A1A               	xorwf	___aldiv@sign,f,c
  4315  000AC4                     l2060:
  4316  000AC4  0E00               	movlw	0
  4317  000AC6  6E1B               	movwf	___aldiv@quotient,c
  4318  000AC8  0E00               	movlw	0
  4319  000ACA  6E1C               	movwf	___aldiv@quotient+1,c
  4320  000ACC  0E00               	movlw	0
  4321  000ACE  6E1D               	movwf	___aldiv@quotient+2,c
  4322  000AD0  0E00               	movlw	0
  4323  000AD2  6E1E               	movwf	___aldiv@quotient+3,c
  4324  000AD4  5015               	movf	___aldiv@divisor,w,c
  4325  000AD6  1016               	iorwf	___aldiv@divisor+1,w,c
  4326  000AD8  1017               	iorwf	___aldiv@divisor+2,w,c
  4327  000ADA  1018               	iorwf	___aldiv@divisor+3,w,c
  4328  000ADC  B4D8               	btfsc	status,2,c
  4329  000ADE  D02A               	goto	l2082
  4330  000AE0  0E01               	movlw	1
  4331  000AE2  6E19               	movwf	___aldiv@counter,c
  4332  000AE4  D006               	goto	l2068
  4333  000AE6                     l2066:
  4334  000AE6  90D8               	bcf	status,0,c
  4335  000AE8  3615               	rlcf	___aldiv@divisor,f,c
  4336  000AEA  3616               	rlcf	___aldiv@divisor+1,f,c
  4337  000AEC  3617               	rlcf	___aldiv@divisor+2,f,c
  4338  000AEE  3618               	rlcf	___aldiv@divisor+3,f,c
  4339  000AF0  2A19               	incf	___aldiv@counter,f,c
  4340  000AF2                     l2068:
  4341  000AF2  AE18               	btfss	___aldiv@divisor+3,7,c
  4342  000AF4  D7F8               	goto	l2066
  4343  000AF6                     l2070:
  4344  000AF6  90D8               	bcf	status,0,c
  4345  000AF8  361B               	rlcf	___aldiv@quotient,f,c
  4346  000AFA  361C               	rlcf	___aldiv@quotient+1,f,c
  4347  000AFC  361D               	rlcf	___aldiv@quotient+2,f,c
  4348  000AFE  361E               	rlcf	___aldiv@quotient+3,f,c
  4349  000B00  5015               	movf	___aldiv@divisor,w,c
  4350  000B02  5C11               	subwf	___aldiv@dividend,w,c
  4351  000B04  5016               	movf	___aldiv@divisor+1,w,c
  4352  000B06  5812               	subwfb	___aldiv@dividend+1,w,c
  4353  000B08  5017               	movf	___aldiv@divisor+2,w,c
  4354  000B0A  5813               	subwfb	___aldiv@dividend+2,w,c
  4355  000B0C  5018               	movf	___aldiv@divisor+3,w,c
  4356  000B0E  5814               	subwfb	___aldiv@dividend+3,w,c
  4357  000B10  A0D8               	btfss	status,0,c
  4358  000B12  D009               	goto	l2078
  4359  000B14  5015               	movf	___aldiv@divisor,w,c
  4360  000B16  5E11               	subwf	___aldiv@dividend,f,c
  4361  000B18  5016               	movf	___aldiv@divisor+1,w,c
  4362  000B1A  5A12               	subwfb	___aldiv@dividend+1,f,c
  4363  000B1C  5017               	movf	___aldiv@divisor+2,w,c
  4364  000B1E  5A13               	subwfb	___aldiv@dividend+2,f,c
  4365  000B20  5018               	movf	___aldiv@divisor+3,w,c
  4366  000B22  5A14               	subwfb	___aldiv@dividend+3,f,c
  4367  000B24  801B               	bsf	___aldiv@quotient,0,c
  4368  000B26                     l2078:
  4369  000B26  90D8               	bcf	status,0,c
  4370  000B28  3218               	rrcf	___aldiv@divisor+3,f,c
  4371  000B2A  3217               	rrcf	___aldiv@divisor+2,f,c
  4372  000B2C  3216               	rrcf	___aldiv@divisor+1,f,c
  4373  000B2E  3215               	rrcf	___aldiv@divisor,f,c
  4374  000B30  2E19               	decfsz	___aldiv@counter,f,c
  4375  000B32  D7E1               	goto	l2070
  4376  000B34                     l2082:
  4377  000B34  501A               	movf	___aldiv@sign,w,c
  4378  000B36  B4D8               	btfsc	status,2,c
  4379  000B38  D008               	goto	l2086
  4380  000B3A  1E1E               	comf	___aldiv@quotient+3,f,c
  4381  000B3C  1E1D               	comf	___aldiv@quotient+2,f,c
  4382  000B3E  1E1C               	comf	___aldiv@quotient+1,f,c
  4383  000B40  6C1B               	negf	___aldiv@quotient,c
  4384  000B42  0E00               	movlw	0
  4385  000B44  221C               	addwfc	___aldiv@quotient+1,f,c
  4386  000B46  221D               	addwfc	___aldiv@quotient+2,f,c
  4387  000B48  221E               	addwfc	___aldiv@quotient+3,f,c
  4388  000B4A                     l2086:
  4389  000B4A  C01B  F011         	movff	___aldiv@quotient,?___aldiv
  4390  000B4E  C01C  F012         	movff	___aldiv@quotient+1,?___aldiv+1
  4391  000B52  C01D  F013         	movff	___aldiv@quotient+2,?___aldiv+2
  4392  000B56  C01E  F014         	movff	___aldiv@quotient+3,?___aldiv+3
  4393  000B5A  0012               	return	
  4394  000B5C                     __end_of___aldiv:
  4395                           	opt stack 0
  4396                           tblptru	equ	0xFF8
  4397                           prodh	equ	0xFF4
  4398                           prodl	equ	0xFF3
  4399                           intcon	equ	0xFF2
  4400                           intcon2	equ	0xFF1
  4401                           intcon3	equ	0xFF0
  4402                           postinc0	equ	0xFEE
  4403                           wreg	equ	0xFE8
  4404                           plusw1	equ	0xFE3
  4405                           postinc2	equ	0xFDE
  4406                           postdec2	equ	0xFDD
  4407                           plusw2	equ	0xFDB
  4408                           fsr2h	equ	0xFDA
  4409                           fsr2l	equ	0xFD9
  4410                           status	equ	0xFD8
  4411                           
  4412 ;; *************** function _CAN_RX_read_1 *****************
  4413 ;; Defined at:
  4414 ;;		line 133 in file "CAN_library.h"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;		None
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;		None
  4419 ;; Return value:  Size  Location     Type
  4420 ;;                  1    wreg      unsigned char 
  4421 ;; Registers used:
  4422 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4423 ;; Tracked objects:
  4424 ;;		On entry : 0/0
  4425 ;;		On exit  : 0/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4430 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4431 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4432 ;;Total ram usage:        4 bytes
  4433 ;; Hardware stack levels used:    1
  4434 ;; Hardware stack levels required when called:    1
  4435 ;; This function calls:
  4436 ;;		Nothing
  4437 ;; This function is called by:
  4438 ;;		_main
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           	psect	text23
  4443  000C18                     __ptext23:
  4444                           	opt stack 0
  4445  000C18                     _CAN_RX_read_1:
  4446                           	opt stack 29
  4447                           
  4448                           ;CAN_library.h: 136: if (COMSTATbits.RXB0OVFL == 0x01) {
  4449                           
  4450                           ;incstack = 0
  4451  000C18  BE71               	btfsc	3953,7,c	;volatile
  4452                           
  4453                           ;CAN_library.h: 138: COMSTATbits.RXB0OVFL = 0x00;
  4454  000C1A  9E71               	bcf	3953,7,c	;volatile
  4455                           
  4456                           ;CAN_library.h: 139: }
  4457                           ;CAN_library.h: 141: if (COMSTATbits.RXB1OVFL == 0x01) {
  4458  000C1C  BC71               	btfsc	3953,6,c	;volatile
  4459                           
  4460                           ;CAN_library.h: 143: COMSTATbits.RXB1OVFL = 0x00;
  4461  000C1E  9C71               	bcf	3953,6,c	;volatile
  4462                           
  4463                           ;CAN_library.h: 144: }
  4464                           ;CAN_library.h: 147: if (RXB1CONbits.RXFUL == 0x01) {
  4465  000C20  010F               	movlb	15	; () banked
  4466  000C22  AF30               	btfss	48,7,b	;volatile
  4467  000C24  D050               	goto	l2368
  4468                           
  4469                           ; BSR set to: 15
  4470                           ;CAN_library.h: 152: msg->identifier = 0;
  4471  000C26  C045  FFD9         	movff	_msg,fsr2l
  4472  000C2A  C046  FFDA         	movff	_msg+1,fsr2h
  4473  000C2E  6ADE               	clrf	postinc2,c
  4474  000C30  6ADE               	clrf	postinc2,c
  4475  000C32  6ADE               	clrf	postinc2,c
  4476  000C34  6ADD               	clrf	postdec2,c
  4477                           
  4478                           ; BSR set to: 15
  4479                           ;CAN_library.h: 155: msg->data = RXB1D0;
  4480  000C36  EE20 F004          	lfsr	2,4
  4481  000C3A  5045               	movf	_msg,w,c
  4482  000C3C  26D9               	addwf	fsr2l,f,c
  4483  000C3E  5046               	movf	_msg+1,w,c
  4484  000C40  22DA               	addwfc	fsr2h,f,c
  4485  000C42  CF36 FFDF          	movff	3894,indf2	;volatile
  4486                           
  4487                           ; BSR set to: 15
  4488                           ;CAN_library.h: 158: msg->RTR = RXB1DLCbits.RXRTR;
  4489  000C46  EE20 F007          	lfsr	2,7
  4490  000C4A  5045               	movf	_msg,w,c
  4491  000C4C  26D9               	addwf	fsr2l,f,c
  4492  000C4E  5046               	movf	_msg+1,w,c
  4493  000C50  22DA               	addwfc	fsr2h,f,c
  4494  000C52  010F               	movlb	15	; () banked
  4495  000C54  AD35               	btfss	53,6,b	;volatile
  4496  000C56  D002               	goto	u1480
  4497  000C58  0E01               	movlw	1
  4498  000C5A  D001               	goto	u1486
  4499  000C5C                     u1480:
  4500  000C5C  0E00               	movlw	0
  4501  000C5E                     u1486:
  4502  000C5E  6EDF               	movwf	indf2,c
  4503                           
  4504                           ; BSR set to: 15
  4505                           ;CAN_library.h: 161: msg->length = RXB1DLC;
  4506  000C60  EE20 F006          	lfsr	2,6
  4507  000C64  5045               	movf	_msg,w,c
  4508  000C66  26D9               	addwf	fsr2l,f,c
  4509  000C68  5046               	movf	_msg+1,w,c
  4510  000C6A  22DA               	addwfc	fsr2h,f,c
  4511  000C6C  CF35 FFDF          	movff	3893,indf2	;volatile
  4512                           
  4513                           ; BSR set to: 15
  4514                           ;CAN_library.h: 164: msg->type = RXB1SIDLbits.EXID;
  4515  000C70  EE20 F005          	lfsr	2,5
  4516  000C74  5045               	movf	_msg,w,c
  4517  000C76  26D9               	addwf	fsr2l,f,c
  4518  000C78  5046               	movf	_msg+1,w,c
  4519  000C7A  22DA               	addwfc	fsr2h,f,c
  4520  000C7C  010F               	movlb	15	; () banked
  4521  000C7E  A732               	btfss	50,3,b	;volatile
  4522  000C80  D002               	goto	u1490
  4523  000C82  0E01               	movlw	1
  4524  000C84  D001               	goto	u1496
  4525  000C86                     u1490:
  4526  000C86  0E00               	movlw	0
  4527  000C88                     u1496:
  4528  000C88  6EDF               	movwf	indf2,c
  4529                           
  4530                           ; BSR set to: 15
  4531                           ;CAN_library.h: 167: if (RXB1SIDLbits.EXID == 0) {
  4532  000C8A  010F               	movlb	15	; () banked
  4533  000C8C  B732               	btfsc	50,3,b	;volatile
  4534  000C8E  D019               	goto	l2366
  4535                           
  4536                           ; BSR set to: 15
  4537                           ;CAN_library.h: 168: msg->identifier = ((unsigned long) RXB1SIDL) << 3;
  4538  000C90  CF32 F011          	movff	3890,??_CAN_RX_read_1	;volatile
  4539  000C94  6A12               	clrf	(??_CAN_RX_read_1+1)& (0+255),c
  4540  000C96  6A13               	clrf	(??_CAN_RX_read_1+2)& (0+255),c
  4541  000C98  6A14               	clrf	(??_CAN_RX_read_1+3)& (0+255),c
  4542  000C9A  0E03               	movlw	3
  4543  000C9C                     u1515:
  4544  000C9C  90D8               	bcf	status,0,c
  4545  000C9E  3611               	rlcf	??_CAN_RX_read_1,f,c
  4546  000CA0  3612               	rlcf	??_CAN_RX_read_1+1,f,c
  4547  000CA2  3613               	rlcf	??_CAN_RX_read_1+2,f,c
  4548  000CA4  3614               	rlcf	??_CAN_RX_read_1+3,f,c
  4549  000CA6  2EE8               	decfsz	wreg,f,c
  4550  000CA8  D7F9               	goto	u1515
  4551  000CAA  C045  FFD9         	movff	_msg,fsr2l
  4552  000CAE  C046  FFDA         	movff	_msg+1,fsr2h
  4553  000CB2  C011  FFDE         	movff	??_CAN_RX_read_1,postinc2
  4554  000CB6  C012  FFDE         	movff	??_CAN_RX_read_1+1,postinc2
  4555  000CBA  C013  FFDE         	movff	??_CAN_RX_read_1+2,postinc2
  4556  000CBE  C014  FFDE         	movff	??_CAN_RX_read_1+3,postinc2
  4557  000CC2                     l2366:
  4558                           
  4559                           ; BSR set to: 15
  4560                           ;CAN_library.h: 169: }
  4561                           ;CAN_library.h: 171: RXB1CONbits.RXFUL = 0x00;
  4562  000CC2  010F               	movlb	15	; () banked
  4563  000CC4  9F30               	bcf	48,7,b	;volatile
  4564  000CC6                     l2368:
  4565                           
  4566                           ; BSR set to: 15
  4567                           ;CAN_library.h: 173: }
  4568                           ;CAN_library.h: 175: return RXB1D0;
  4569  000CC6  010F               	movlb	15	; () banked
  4570  000CC8  5136               	movf	54,w,b	;volatile
  4571  000CCA  0012               	return	
  4572  000CCC                     __end_of_CAN_RX_read_1:
  4573                           	opt stack 0
  4574                           tblptru	equ	0xFF8
  4575                           prodh	equ	0xFF4
  4576                           prodl	equ	0xFF3
  4577                           intcon	equ	0xFF2
  4578                           intcon2	equ	0xFF1
  4579                           intcon3	equ	0xFF0
  4580                           postinc0	equ	0xFEE
  4581                           wreg	equ	0xFE8
  4582                           plusw1	equ	0xFE3
  4583                           indf2	equ	0xFDF
  4584                           postinc2	equ	0xFDE
  4585                           postdec2	equ	0xFDD
  4586                           plusw2	equ	0xFDB
  4587                           fsr2h	equ	0xFDA
  4588                           fsr2l	equ	0xFD9
  4589                           status	equ	0xFD8
  4590                           
  4591 ;; *************** function _CAN_RX_read_0 *****************
  4592 ;; Defined at:
  4593 ;;		line 89 in file "CAN_library.h"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;		None
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;		None
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  1    wreg      unsigned char 
  4600 ;; Registers used:
  4601 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4609 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4610 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4611 ;;Total ram usage:        4 bytes
  4612 ;; Hardware stack levels used:    1
  4613 ;; Hardware stack levels required when called:    1
  4614 ;; This function calls:
  4615 ;;		Nothing
  4616 ;; This function is called by:
  4617 ;;		_main
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           	psect	text24
  4622  000CCC                     __ptext24:
  4623                           	opt stack 0
  4624  000CCC                     _CAN_RX_read_0:
  4625                           	opt stack 29
  4626                           
  4627                           ;CAN_library.h: 92: if (COMSTATbits.RXB0OVFL == 0x01) {
  4628                           
  4629                           ; BSR set to: 15
  4630                           ;incstack = 0
  4631  000CCC  BE71               	btfsc	3953,7,c	;volatile
  4632                           
  4633                           ;CAN_library.h: 94: COMSTATbits.RXB0OVFL = 0x00;
  4634  000CCE  9E71               	bcf	3953,7,c	;volatile
  4635                           
  4636                           ;CAN_library.h: 95: }
  4637                           ;CAN_library.h: 97: if (COMSTATbits.RXB1OVFL == 0x01) {
  4638  000CD0  BC71               	btfsc	3953,6,c	;volatile
  4639                           
  4640                           ;CAN_library.h: 99: COMSTATbits.RXB1OVFL = 0x00;
  4641  000CD2  9C71               	bcf	3953,6,c	;volatile
  4642                           
  4643                           ;CAN_library.h: 100: }
  4644                           ;CAN_library.h: 103: if (RXB0CONbits.RXFUL == 0x01) {
  4645  000CD4  AE60               	btfss	3936,7,c	;volatile
  4646  000CD6  D04C               	goto	l2342
  4647                           
  4648                           ;CAN_library.h: 106: msg->identifier = 0;
  4649  000CD8  C045  FFD9         	movff	_msg,fsr2l
  4650  000CDC  C046  FFDA         	movff	_msg+1,fsr2h
  4651  000CE0  6ADE               	clrf	postinc2,c
  4652  000CE2  6ADE               	clrf	postinc2,c
  4653  000CE4  6ADE               	clrf	postinc2,c
  4654  000CE6  6ADD               	clrf	postdec2,c
  4655                           
  4656                           ;CAN_library.h: 109: msg->data = RXB0D0;
  4657  000CE8  EE20 F004          	lfsr	2,4
  4658  000CEC  5045               	movf	_msg,w,c
  4659  000CEE  26D9               	addwf	fsr2l,f,c
  4660  000CF0  5046               	movf	_msg+1,w,c
  4661  000CF2  22DA               	addwfc	fsr2h,f,c
  4662  000CF4  CF66 FFDF          	movff	3942,indf2	;volatile
  4663                           
  4664                           ;CAN_library.h: 112: msg->RTR = RXB0DLCbits.RXRTR;
  4665  000CF8  EE20 F007          	lfsr	2,7
  4666  000CFC  5045               	movf	_msg,w,c
  4667  000CFE  26D9               	addwf	fsr2l,f,c
  4668  000D00  5046               	movf	_msg+1,w,c
  4669  000D02  22DA               	addwfc	fsr2h,f,c
  4670  000D04  AC65               	btfss	3941,6,c	;volatile
  4671  000D06  D002               	goto	u1410
  4672  000D08  0E01               	movlw	1
  4673  000D0A  D001               	goto	u1416
  4674  000D0C                     u1410:
  4675  000D0C  0E00               	movlw	0
  4676  000D0E                     u1416:
  4677  000D0E  6EDF               	movwf	indf2,c
  4678                           
  4679                           ;CAN_library.h: 115: msg->length = RXB0DLC;
  4680  000D10  EE20 F006          	lfsr	2,6
  4681  000D14  5045               	movf	_msg,w,c
  4682  000D16  26D9               	addwf	fsr2l,f,c
  4683  000D18  5046               	movf	_msg+1,w,c
  4684  000D1A  22DA               	addwfc	fsr2h,f,c
  4685  000D1C  CF65 FFDF          	movff	3941,indf2	;volatile
  4686                           
  4687                           ;CAN_library.h: 118: msg->type = RXB0SIDLbits.EXID;
  4688  000D20  EE20 F005          	lfsr	2,5
  4689  000D24  5045               	movf	_msg,w,c
  4690  000D26  26D9               	addwf	fsr2l,f,c
  4691  000D28  5046               	movf	_msg+1,w,c
  4692  000D2A  22DA               	addwfc	fsr2h,f,c
  4693  000D2C  A662               	btfss	3938,3,c	;volatile
  4694  000D2E  D002               	goto	u1420
  4695  000D30  0E01               	movlw	1
  4696  000D32  D001               	goto	u1426
  4697  000D34                     u1420:
  4698  000D34  0E00               	movlw	0
  4699  000D36                     u1426:
  4700  000D36  6EDF               	movwf	indf2,c
  4701                           
  4702                           ;CAN_library.h: 121: if (RXB0SIDLbits.EXID == 0) {
  4703  000D38  B662               	btfsc	3938,3,c	;volatile
  4704  000D3A  D019               	goto	l2340
  4705                           
  4706                           ;CAN_library.h: 122: msg->identifier = ((unsigned long) RXB0SIDL) << 3;
  4707  000D3C  CF62 F011          	movff	3938,??_CAN_RX_read_0	;volatile
  4708  000D40  6A12               	clrf	(??_CAN_RX_read_0+1)& (0+255),c
  4709  000D42  6A13               	clrf	(??_CAN_RX_read_0+2)& (0+255),c
  4710  000D44  6A14               	clrf	(??_CAN_RX_read_0+3)& (0+255),c
  4711  000D46  0E03               	movlw	3
  4712  000D48                     u1445:
  4713  000D48  90D8               	bcf	status,0,c
  4714  000D4A  3611               	rlcf	??_CAN_RX_read_0,f,c
  4715  000D4C  3612               	rlcf	??_CAN_RX_read_0+1,f,c
  4716  000D4E  3613               	rlcf	??_CAN_RX_read_0+2,f,c
  4717  000D50  3614               	rlcf	??_CAN_RX_read_0+3,f,c
  4718  000D52  2EE8               	decfsz	wreg,f,c
  4719  000D54  D7F9               	goto	u1445
  4720  000D56  C045  FFD9         	movff	_msg,fsr2l
  4721  000D5A  C046  FFDA         	movff	_msg+1,fsr2h
  4722  000D5E  C011  FFDE         	movff	??_CAN_RX_read_0,postinc2
  4723  000D62  C012  FFDE         	movff	??_CAN_RX_read_0+1,postinc2
  4724  000D66  C013  FFDE         	movff	??_CAN_RX_read_0+2,postinc2
  4725  000D6A  C014  FFDE         	movff	??_CAN_RX_read_0+3,postinc2
  4726  000D6E                     l2340:
  4727                           
  4728                           ;CAN_library.h: 123: }
  4729                           ;CAN_library.h: 125: RXB0CONbits.RXFUL = 0x00;
  4730  000D6E  9E60               	bcf	3936,7,c	;volatile
  4731  000D70                     l2342:
  4732                           
  4733                           ;CAN_library.h: 127: }
  4734                           ;CAN_library.h: 129: return RXB0D0;
  4735  000D70  5066               	movf	3942,w,c	;volatile
  4736  000D72  0012               	return	
  4737  000D74                     __end_of_CAN_RX_read_0:
  4738                           	opt stack 0
  4739                           tblptru	equ	0xFF8
  4740                           prodh	equ	0xFF4
  4741                           prodl	equ	0xFF3
  4742                           intcon	equ	0xFF2
  4743                           intcon2	equ	0xFF1
  4744                           intcon3	equ	0xFF0
  4745                           postinc0	equ	0xFEE
  4746                           wreg	equ	0xFE8
  4747                           plusw1	equ	0xFE3
  4748                           indf2	equ	0xFDF
  4749                           postinc2	equ	0xFDE
  4750                           postdec2	equ	0xFDD
  4751                           plusw2	equ	0xFDB
  4752                           fsr2h	equ	0xFDA
  4753                           fsr2l	equ	0xFD9
  4754                           status	equ	0xFD8
  4755                           
  4756 ;; *************** function _CAN_RX_initialize *****************
  4757 ;; Defined at:
  4758 ;;		line 20 in file "CAN_library.h"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;		None
  4761 ;; Auto vars:     Size  Location     Type
  4762 ;;		None
  4763 ;; Return value:  Size  Location     Type
  4764 ;;                  1    wreg      void 
  4765 ;; Registers used:
  4766 ;;		wreg, status,2, status,0
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4776 ;;Total ram usage:        0 bytes
  4777 ;; Hardware stack levels used:    1
  4778 ;; Hardware stack levels required when called:    1
  4779 ;; This function calls:
  4780 ;;		Nothing
  4781 ;; This function is called by:
  4782 ;;		_main
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           	psect	text25
  4787  000B5C                     __ptext25:
  4788                           	opt stack 0
  4789  000B5C                     _CAN_RX_initialize:
  4790                           	opt stack 29
  4791                           
  4792                           ;CAN_library.h: 22: CANCON = 0x80;
  4793                           
  4794                           ;incstack = 0
  4795  000B5C  0E80               	movlw	128
  4796  000B5E  6E6F               	movwf	3951,c	;volatile
  4797  000B60                     l2290:
  4798  000B60  386E               	swapf	3950,w,c	;volatile
  4799  000B62  32E8               	rrcf	wreg,f,c
  4800  000B64  0B07               	andlw	7
  4801  000B66  0A04               	xorlw	4
  4802  000B68  A4D8               	btfss	status,2,c
  4803  000B6A  D7FA               	goto	l2290
  4804                           
  4805                           ;CAN_library.h: 26: ECANCON = 0x00;
  4806  000B6C  0E00               	movlw	0
  4807  000B6E  6E72               	movwf	3954,c	;volatile
  4808                           
  4809                           ;CAN_library.h: 28: BRGCON1 = 0x01;
  4810  000B70  0E01               	movlw	1
  4811  000B72  010E               	movlb	14	; () banked
  4812  000B74  6F43               	movwf	67,b	;volatile
  4813                           
  4814                           ;CAN_library.h: 29: BRGCON2 = 0xBA;
  4815  000B76  0EBA               	movlw	186
  4816  000B78  010E               	movlb	14	; () banked
  4817  000B7A  6F44               	movwf	68,b	;volatile
  4818                           
  4819                           ;CAN_library.h: 30: BRGCON3 = 0x07;
  4820  000B7C  0E07               	movlw	7
  4821  000B7E  010E               	movlb	14	; () banked
  4822  000B80  6F45               	movwf	69,b	;volatile
  4823                           
  4824                           ; BSR set to: 14
  4825                           ;CAN_library.h: 32: CIOCONbits.ENDRHI = 0x01;
  4826  000B82  8A70               	bsf	3952,5,c	;volatile
  4827                           
  4828                           ;CAN_library.h: 39: RXM0EIDH = 0x00;
  4829  000B84  0E00               	movlw	0
  4830  000B86  010E               	movlb	14	; () banked
  4831  000B88  6FFA               	movwf	250,b	;volatile
  4832                           
  4833                           ;CAN_library.h: 40: RXM0EIDL = 0x00;
  4834  000B8A  0E00               	movlw	0
  4835  000B8C  010E               	movlb	14	; () banked
  4836  000B8E  6FFB               	movwf	251,b	;volatile
  4837                           
  4838                           ; BSR set to: 14
  4839                           ;CAN_library.h: 41: RXM0SIDH = 0xFF;
  4840  000B90  010E               	movlb	14	; () banked
  4841  000B92  69F8               	setf	248,b	;volatile
  4842                           
  4843                           ;CAN_library.h: 42: RXM0SIDL = 0xE0;
  4844  000B94  0EE0               	movlw	224
  4845  000B96  010E               	movlb	14	; () banked
  4846  000B98  6FF9               	movwf	249,b	;volatile
  4847                           
  4848                           ;CAN_library.h: 45: RXM1EIDH = 0x00;
  4849  000B9A  0E00               	movlw	0
  4850  000B9C  010E               	movlb	14	; () banked
  4851  000B9E  6FFE               	movwf	254,b	;volatile
  4852                           
  4853                           ;CAN_library.h: 46: RXM1EIDL = 0x00;
  4854  000BA0  0E00               	movlw	0
  4855  000BA2  010E               	movlb	14	; () banked
  4856  000BA4  6FFF               	movwf	255,b	;volatile
  4857                           
  4858                           ; BSR set to: 14
  4859                           ;CAN_library.h: 47: RXM1SIDH = 0xFF;
  4860  000BA6  010E               	movlb	14	; () banked
  4861  000BA8  69FC               	setf	252,b	;volatile
  4862                           
  4863                           ;CAN_library.h: 48: RXM1SIDL = 0xE0;
  4864  000BAA  0EE0               	movlw	224
  4865  000BAC  010E               	movlb	14	; () banked
  4866  000BAE  6FFD               	movwf	253,b	;volatile
  4867                           
  4868                           ;CAN_library.h: 51: RXF0EIDH = 0x00;
  4869  000BB0  0E00               	movlw	0
  4870  000BB2  010E               	movlb	14	; () banked
  4871  000BB4  6FE2               	movwf	226,b	;volatile
  4872                           
  4873                           ;CAN_library.h: 52: RXF0EIDL = 0x00;
  4874  000BB6  0E00               	movlw	0
  4875  000BB8  010E               	movlb	14	; () banked
  4876  000BBA  6FE3               	movwf	227,b	;volatile
  4877                           
  4878                           ;CAN_library.h: 53: RXF0SIDH = 0x00;
  4879  000BBC  0E00               	movlw	0
  4880  000BBE  010E               	movlb	14	; () banked
  4881  000BC0  6FE0               	movwf	224,b	;volatile
  4882                           
  4883                           ;CAN_library.h: 54: RXF0SIDL = 0xA0;
  4884  000BC2  0EA0               	movlw	160
  4885  000BC4  010E               	movlb	14	; () banked
  4886  000BC6  6FE1               	movwf	225,b	;volatile
  4887                           
  4888                           ;CAN_library.h: 56: RXF2EIDH = 0x00;
  4889  000BC8  0E00               	movlw	0
  4890  000BCA  010E               	movlb	14	; () banked
  4891  000BCC  6FEA               	movwf	234,b	;volatile
  4892                           
  4893                           ;CAN_library.h: 57: RXF2EIDL = 0x00;
  4894  000BCE  0E00               	movlw	0
  4895  000BD0  010E               	movlb	14	; () banked
  4896  000BD2  6FEB               	movwf	235,b	;volatile
  4897                           
  4898                           ;CAN_library.h: 58: RXF2SIDH = 0x00;
  4899  000BD4  0E00               	movlw	0
  4900  000BD6  010E               	movlb	14	; () banked
  4901  000BD8  6FE8               	movwf	232,b	;volatile
  4902                           
  4903                           ;CAN_library.h: 59: RXF2SIDL = 0x40;
  4904  000BDA  0E40               	movlw	64
  4905  000BDC  010E               	movlb	14	; () banked
  4906  000BDE  6FE9               	movwf	233,b	;volatile
  4907                           
  4908                           ; BSR set to: 14
  4909                           ;CAN_library.h: 65: RXB0CONbits.FILHIT0 = 0;
  4910  000BE0  9060               	bcf	3936,0,c	;volatile
  4911                           
  4912                           ; BSR set to: 14
  4913                           ;CAN_library.h: 68: RXB0CONbits.RXM1 = 0;
  4914  000BE2  9C60               	bcf	3936,6,c	;volatile
  4915                           
  4916                           ; BSR set to: 14
  4917                           ;CAN_library.h: 69: RXB0CONbits.RXM0 = 1;
  4918  000BE4  8A60               	bsf	3936,5,c	;volatile
  4919                           
  4920                           ; BSR set to: 14
  4921                           ;CAN_library.h: 71: RXB1CONbits.FILHIT2 = 0;
  4922  000BE6  010F               	movlb	15	; () banked
  4923  000BE8  9530               	bcf	48,2,b	;volatile
  4924                           
  4925                           ; BSR set to: 15
  4926                           ;CAN_library.h: 72: RXB1CONbits.FILHIT1 = 1;
  4927  000BEA  010F               	movlb	15	; () banked
  4928  000BEC  8330               	bsf	48,1,b	;volatile
  4929                           
  4930                           ; BSR set to: 15
  4931                           ;CAN_library.h: 73: RXB1CONbits.FILHIT0 = 0;
  4932  000BEE  010F               	movlb	15	; () banked
  4933  000BF0  9130               	bcf	48,0,b	;volatile
  4934                           
  4935                           ; BSR set to: 15
  4936                           ;CAN_library.h: 75: RXB1CONbits.RXM1 = 0;
  4937  000BF2  010F               	movlb	15	; () banked
  4938  000BF4  9D30               	bcf	48,6,b	;volatile
  4939                           
  4940                           ; BSR set to: 15
  4941                           ;CAN_library.h: 76: RXB1CONbits.RXM0 = 1;
  4942  000BF6  010F               	movlb	15	; () banked
  4943  000BF8  8B30               	bsf	48,5,b	;volatile
  4944                           
  4945                           ;CAN_library.h: 80: CANCON = 0x00;
  4946  000BFA  0E00               	movlw	0
  4947  000BFC  6E6F               	movwf	3951,c	;volatile
  4948  000BFE                     l2316:
  4949  000BFE  386E               	swapf	3950,w,c	;volatile
  4950  000C00  32E8               	rrcf	wreg,f,c
  4951  000C02  0B07               	andlw	7
  4952  000C04  0900               	iorlw	0
  4953  000C06  B4D8               	btfsc	status,2,c
  4954  000C08  D7FA               	goto	l2316
  4955  000C0A                     l2318:
  4956  000C0A  386E               	swapf	3950,w,c	;volatile
  4957  000C0C  32E8               	rrcf	wreg,f,c
  4958  000C0E  0B07               	andlw	7
  4959  000C10  0900               	iorlw	0
  4960  000C12  B4D8               	btfsc	status,2,c
  4961  000C14  0012               	return	
  4962  000C16  D7F9               	goto	l2318
  4963  000C18                     __end_of_CAN_RX_initialize:
  4964                           	opt stack 0
  4965                           tblptru	equ	0xFF8
  4966                           prodh	equ	0xFF4
  4967                           prodl	equ	0xFF3
  4968                           intcon	equ	0xFF2
  4969                           intcon2	equ	0xFF1
  4970                           intcon3	equ	0xFF0
  4971                           postinc0	equ	0xFEE
  4972                           wreg	equ	0xFE8
  4973                           plusw1	equ	0xFE3
  4974                           indf2	equ	0xFDF
  4975                           postinc2	equ	0xFDE
  4976                           postdec2	equ	0xFDD
  4977                           plusw2	equ	0xFDB
  4978                           fsr2h	equ	0xFDA
  4979                           fsr2l	equ	0xFD9
  4980                           status	equ	0xFD8
  4981                           
  4982 ;; *************** function _adc *****************
  4983 ;; Defined at:
  4984 ;;		line 119 in file "nRF24L01_CAN_RX.c"
  4985 ;; Parameters:    Size  Location     Type
  4986 ;;		None
  4987 ;; Auto vars:     Size  Location     Type
  4988 ;;		None
  4989 ;; Return value:  Size  Location     Type
  4990 ;;                  1    wreg      void 
  4991 ;; Registers used:
  4992 ;;		wreg, status,2, status,0
  4993 ;; Tracked objects:
  4994 ;;		On entry : 0/0
  4995 ;;		On exit  : 0/0
  4996 ;;		Unchanged: 0/0
  4997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5000 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5001 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5002 ;;Total ram usage:       16 bytes
  5003 ;; Hardware stack levels used:    1
  5004 ;; This function calls:
  5005 ;;		Nothing
  5006 ;; This function is called by:
  5007 ;;		Interrupt level 2
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	intcode
  5012  000008                     __pintcode:
  5013                           	opt stack 0
  5014  000008                     _adc:
  5015                           	opt stack 26
  5016                           
  5017                           ;incstack = 0
  5018  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5019  00000A  CFFA F003          	movff	pclath,??_adc+2
  5020  00000E  CFFB F004          	movff	pclatu,??_adc+3
  5021  000012  CFE9 F005          	movff	fsr0l,??_adc+4
  5022  000016  CFEA F006          	movff	fsr0h,??_adc+5
  5023  00001A  CFE1 F007          	movff	fsr1l,??_adc+6
  5024  00001E  CFE2 F008          	movff	fsr1h,??_adc+7
  5025  000022  CFD9 F009          	movff	fsr2l,??_adc+8
  5026  000026  CFDA F00A          	movff	fsr2h,??_adc+9
  5027  00002A  CFF3 F00B          	movff	prodl,??_adc+10
  5028  00002E  CFF4 F00C          	movff	prodh,??_adc+11
  5029  000032  CFF6 F00D          	movff	tblptrl,??_adc+12
  5030  000036  CFF7 F00E          	movff	tblptrh,??_adc+13
  5031  00003A  CFF8 F00F          	movff	tblptru,??_adc+14
  5032  00003E  CFF5 F010          	movff	tablat,??_adc+15
  5033                           
  5034                           ;nRF24L01_CAN_RX.c: 121: if(ADIF == 1)
  5035  000042  AC9E               	btfss	3998,6,c	;volatile
  5036  000044  0010               	retfie	
  5037                           
  5038                           ;nRF24L01_CAN_RX.c: 122: {
  5039                           ;nRF24L01_CAN_RX.c: 123: GIE = 0;
  5040  000046  9EF2               	bcf	intcon,7,c	;volatile
  5041                           
  5042                           ;nRF24L01_CAN_RX.c: 124: ADIE = 0;
  5043  000048  9C9D               	bcf	3997,6,c	;volatile
  5044                           
  5045                           ;nRF24L01_CAN_RX.c: 126: value = (((unsigned int)ADRESH)<<8)|ADRESL;
  5046  00004A  50C4               	movf	4036,w,c	;volatile
  5047  00004C  6E01               	movwf	??_adc& (0+255),c
  5048  00004E  50C3               	movf	4035,w,c	;volatile
  5049  000050  0100               	movlb	0	; () banked
  5050  000052  6F8E               	movwf	_value& (0+255),b
  5051  000054  C001  F08F         	movff	??_adc,_value+1
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;nRF24L01_CAN_RX.c: 128: if(ADC == 0)
  5055  000058  0100               	movlb	0	; () banked
  5056  00005A  5188               	movf	_ADC& (0+255),w,b
  5057  00005C  0100               	movlb	0	; () banked
  5058  00005E  1189               	iorwf	(_ADC+1)& (0+255),w,b
  5059  000060  A4D8               	btfss	status,2,c
  5060  000062  D00A               	goto	i2l400
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;nRF24L01_CAN_RX.c: 129: {
  5064                           ;nRF24L01_CAN_RX.c: 130: value0 = value;
  5065  000064  C08E  F08A         	movff	_value,_value0
  5066  000068  C08F  F08B         	movff	_value+1,_value0+1
  5067                           
  5068                           ;nRF24L01_CAN_RX.c: 131: ADCON0bits.CHS0 = 1;
  5069  00006C  84C2               	bsf	4034,2,c	;volatile
  5070                           
  5071                           ; BSR set to: 0
  5072                           ;nRF24L01_CAN_RX.c: 132: ADC = 1;
  5073  00006E  0E00               	movlw	0
  5074  000070  0100               	movlb	0	; () banked
  5075  000072  6F89               	movwf	(_ADC+1)& (0+255),b
  5076  000074  0E01               	movlw	1
  5077  000076  D009               	goto	L15
  5078  000078                     i2l400:
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;nRF24L01_CAN_RX.c: 134: else
  5082                           ;nRF24L01_CAN_RX.c: 135: {
  5083                           ;nRF24L01_CAN_RX.c: 136: value1 = value;
  5084  000078  C08E  F08C         	movff	_value,_value1
  5085  00007C  C08F  F08D         	movff	_value+1,_value1+1
  5086                           
  5087                           ;nRF24L01_CAN_RX.c: 137: ADCON0bits.CHS0 = 0;
  5088  000080  94C2               	bcf	4034,2,c	;volatile
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;nRF24L01_CAN_RX.c: 138: ADC = 0;
  5092  000082  0E00               	movlw	0
  5093  000084  0100               	movlb	0	; () banked
  5094  000086  6F89               	movwf	(_ADC+1)& (0+255),b
  5095  000088  0E00               	movlw	0
  5096  00008A                     L15:
  5097  00008A  6F88               	movwf	_ADC& (0+255),b
  5098                           
  5099                           ; BSR set to: 0
  5100                           ;nRF24L01_CAN_RX.c: 139: }
  5101                           ;nRF24L01_CAN_RX.c: 141: ADIF = 0;
  5102                           
  5103                           ; BSR set to: 0
  5104  00008C  9C9E               	bcf	3998,6,c	;volatile
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;nRF24L01_CAN_RX.c: 142: ADIE = 1;
  5108  00008E  8C9D               	bsf	3997,6,c	;volatile
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;nRF24L01_CAN_RX.c: 143: GIE = 1;
  5112  000090  8EF2               	bsf	intcon,7,c	;volatile
  5113  000092  0010               	retfie		;# 
  5114  000094  C010  FFF5         	movff	??_adc+15,tablat
  5115  000098  C00F  FFF8         	movff	??_adc+14,tblptru
  5116  00009C  C00E  FFF7         	movff	??_adc+13,tblptrh
  5117  0000A0  C00D  FFF6         	movff	??_adc+12,tblptrl
  5118  0000A4  C00C  FFF4         	movff	??_adc+11,prodh
  5119  0000A8  C00B  FFF3         	movff	??_adc+10,prodl
  5120  0000AC  C00A  FFDA         	movff	??_adc+9,fsr2h
  5121  0000B0  C009  FFD9         	movff	??_adc+8,fsr2l
  5122  0000B4  C008  FFE2         	movff	??_adc+7,fsr1h
  5123  0000B8  C007  FFE1         	movff	??_adc+6,fsr1l
  5124  0000BC  C006  FFEA         	movff	??_adc+5,fsr0h
  5125  0000C0  C005  FFE9         	movff	??_adc+4,fsr0l
  5126  0000C4  C004  FFFB         	movff	??_adc+3,pclatu
  5127  0000C8  C003  FFFA         	movff	??_adc+2,pclath
  5128  0000CC  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5129  0000CE  0011               	retfie		f
  5130  0000D0                     __end_of_adc:
  5131                           	opt stack 0
  5132  0000                     pclatu	equ	0xFFB
  5133                           pclath	equ	0xFFA
  5134                           tblptru	equ	0xFF8
  5135                           tblptrh	equ	0xFF7
  5136                           tblptrl	equ	0xFF6
  5137                           tablat	equ	0xFF5
  5138                           prodh	equ	0xFF4
  5139                           prodl	equ	0xFF3
  5140                           intcon	equ	0xFF2
  5141                           intcon2	equ	0xFF1
  5142                           intcon3	equ	0xFF0
  5143                           postinc0	equ	0xFEE
  5144                           fsr0h	equ	0xFEA
  5145                           fsr0l	equ	0xFE9
  5146                           wreg	equ	0xFE8
  5147                           plusw1	equ	0xFE3
  5148                           fsr1h	equ	0xFE2
  5149                           fsr1l	equ	0xFE1
  5150                           indf2	equ	0xFDF
  5151                           postinc2	equ	0xFDE
  5152                           postdec2	equ	0xFDD
  5153                           plusw2	equ	0xFDB
  5154                           fsr2h	equ	0xFDA
  5155                           fsr2l	equ	0xFD9
  5156                           status	equ	0xFD8
  5157                           pclatu	equ	0xFFB
  5158                           pclath	equ	0xFFA
  5159                           tblptru	equ	0xFF8
  5160                           tblptrh	equ	0xFF7
  5161                           tblptrl	equ	0xFF6
  5162                           tablat	equ	0xFF5
  5163                           prodh	equ	0xFF4
  5164                           prodl	equ	0xFF3
  5165                           intcon	equ	0xFF2
  5166                           intcon2	equ	0xFF1
  5167                           intcon3	equ	0xFF0
  5168                           postinc0	equ	0xFEE
  5169                           fsr0h	equ	0xFEA
  5170                           fsr0l	equ	0xFE9
  5171                           wreg	equ	0xFE8
  5172                           plusw1	equ	0xFE3
  5173                           fsr1h	equ	0xFE2
  5174                           fsr1l	equ	0xFE1
  5175                           indf2	equ	0xFDF
  5176                           postinc2	equ	0xFDE
  5177                           postdec2	equ	0xFDD
  5178                           plusw2	equ	0xFDB
  5179                           fsr2h	equ	0xFDA
  5180                           fsr2l	equ	0xFD9
  5181                           status	equ	0xFD8
  5182                           
  5183                           	psect	rparam
  5184  0000                     pclatu	equ	0xFFB
  5185                           pclath	equ	0xFFA
  5186                           tblptru	equ	0xFF8
  5187                           tblptrh	equ	0xFF7
  5188                           tblptrl	equ	0xFF6
  5189                           tablat	equ	0xFF5
  5190                           prodh	equ	0xFF4
  5191                           prodl	equ	0xFF3
  5192                           intcon	equ	0xFF2
  5193                           intcon2	equ	0xFF1
  5194                           intcon3	equ	0xFF0
  5195                           postinc0	equ	0xFEE
  5196                           fsr0h	equ	0xFEA
  5197                           fsr0l	equ	0xFE9
  5198                           wreg	equ	0xFE8
  5199                           plusw1	equ	0xFE3
  5200                           fsr1h	equ	0xFE2
  5201                           fsr1l	equ	0xFE1
  5202                           indf2	equ	0xFDF
  5203                           postinc2	equ	0xFDE
  5204                           postdec2	equ	0xFDD
  5205                           plusw2	equ	0xFDB
  5206                           fsr2h	equ	0xFDA
  5207                           fsr2l	equ	0xFD9
  5208                           status	equ	0xFD8
  5209                           
  5210                           	psect	temp
  5211  00004F                     btemp:
  5212                           	opt stack 0
  5213  00004F                     	ds	1
  5214  0000                     int$flags	set	btemp
  5215                           pclatu	equ	0xFFB
  5216                           pclath	equ	0xFFA
  5217                           tblptru	equ	0xFF8
  5218                           tblptrh	equ	0xFF7
  5219                           tblptrl	equ	0xFF6
  5220                           tablat	equ	0xFF5
  5221                           prodh	equ	0xFF4
  5222                           prodl	equ	0xFF3
  5223                           intcon	equ	0xFF2
  5224                           intcon2	equ	0xFF1
  5225                           intcon3	equ	0xFF0
  5226                           postinc0	equ	0xFEE
  5227                           fsr0h	equ	0xFEA
  5228                           fsr0l	equ	0xFE9
  5229                           wreg	equ	0xFE8
  5230                           plusw1	equ	0xFE3
  5231                           fsr1h	equ	0xFE2
  5232                           fsr1l	equ	0xFE1
  5233                           indf2	equ	0xFDF
  5234                           postinc2	equ	0xFDE
  5235                           postdec2	equ	0xFDD
  5236                           plusw2	equ	0xFDB
  5237                           fsr2h	equ	0xFDA
  5238                           fsr2l	equ	0xFD9
  5239                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         73
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     58      78
    BANK0           160     16      70
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    msg	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_set_duty
    _write_ACK->_spi_write
    _reset_RX->_spi_write
    _reset_MAX_RT->_spi_write
    _flush->_spi_write
    _engine_right->_set_duty
    _engine_left->_set_duty
    _engine->_set_duty
    _configure_RX->_spi_write
    _check_MAX_RT->_spi_write
    _brake->_set_duty
    _set_duty->_dec_to_bin
    _dec_to_bin->___awdiv
    _UART_Init_2->___aldiv

Critical Paths under _adc in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_engine
    _engine_right->_set_duty
    _engine_left->_set_duty
    _engine->_set_duty
    _brake->_set_duty

Critical Paths under _adc in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _adc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _adc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _adc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _adc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _adc in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _adc in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _adc in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _adc in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _adc in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _adc in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _adc in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _adc in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _adc in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _adc in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   22272
                                             15 BANK0      1     1      0
                  _CAN_RX_initialize
                      _CAN_RX_read_0
                      _CAN_RX_read_1
                        _UART_Init_2
                              _brake
                       _check_MAX_RT
                       _configure_RX
                             _engine
                        _engine_left
                       _engine_right
                              _flush
                            _initPIC
                    _init_spi_master
                       _reset_MAX_RT
                           _reset_RX
                             _set_AD
                            _set_PWM
                            _set_dir
                           _set_duty
                          _write_ACK
 ---------------------------------------------------------------------------------
 (1) _write_ACK                                            1     1      0      44
                                             17 COMRAM     1     1      0
                          _spi_write
 ---------------------------------------------------------------------------------
 (1) _set_PWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_AD                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reset_RX                                             1     1      0      45
                                             17 COMRAM     1     1      0
                          _spi_write
 ---------------------------------------------------------------------------------
 (1) _reset_MAX_RT                                         0     0      0      22
                          _spi_write
 ---------------------------------------------------------------------------------
 (1) _init_spi_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPIC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _flush                                                0     0      0      22
                          _spi_write
 ---------------------------------------------------------------------------------
 (1) _engine_right                                         7     4      3    4248
                                              6 BANK0      7     4      3
                            _set_dir
                           _set_duty
 ---------------------------------------------------------------------------------
 (1) _engine_left                                          7     4      3    4248
                                              6 BANK0      7     4      3
                            _set_dir
                           _set_duty
 ---------------------------------------------------------------------------------
 (1) _engine                                               9     6      3    4655
                                              6 BANK0      9     6      3
                            _set_dir
                           _set_duty
 ---------------------------------------------------------------------------------
 (1) _configure_RX                                         4     4      0     114
                                             17 COMRAM     3     3      0
                          _spi_write
 ---------------------------------------------------------------------------------
 (1) _check_MAX_RT                                         2     2      0      93
                                             17 COMRAM     2     2      0
                          _spi_write
 ---------------------------------------------------------------------------------
 (2) _spi_write                                            1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _brake                                                5     5      0    4069
                                              6 BANK0      5     5      0
                            _set_dir
                           _set_duty
 ---------------------------------------------------------------------------------
 (1) _set_duty                                             8     6      2    3905
                                             56 COMRAM     2     0      2
                                              0 BANK0      6     6      0
                             ___wmul
                         _dec_to_bin
 ---------------------------------------------------------------------------------
 (2) _dec_to_bin                                          32    30      2    2157
                                             24 COMRAM    32    30      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     848
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     599
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _set_dir                                              1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init_2                                         14    10      4     776
                                             30 COMRAM    14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     556
                                             16 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _CAN_RX_read_1                                        4     4      0       0
                                             16 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _CAN_RX_read_0                                        4     4      0       0
                                             16 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _CAN_RX_initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _adc                                                 16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CAN_RX_initialize
   _CAN_RX_read_0
   _CAN_RX_read_1
   _UART_Init_2
     ___aldiv
   _brake
     _set_dir
     _set_duty
       ___wmul
       _dec_to_bin
         ___awdiv
         ___wmul
   _check_MAX_RT
     _spi_write
   _configure_RX
     _spi_write
   _engine
     _set_dir
     _set_duty
       ___wmul
       _dec_to_bin
         ___awdiv
         ___wmul
   _engine_left
     _set_dir
     _set_duty
       ___wmul
       _dec_to_bin
         ___awdiv
         ___wmul
   _engine_right
     _set_dir
     _set_duty
       ___wmul
       _dec_to_bin
         ___awdiv
         ___wmul
   _flush
     _spi_write
   _initPIC
   _init_spi_master
   _reset_MAX_RT
     _spi_write
   _reset_RX
     _spi_write
   _set_AD
   _set_PWM
   _set_dir
   _set_duty
     ___wmul
     _dec_to_bin
       ___awdiv
       ___wmul
   _write_ACK
     _spi_write

 _adc (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     10      46       5       43.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3A      4E       1       83.0%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      94       6        0.0%
DATA                 0      0      94       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Dec 20 16:00:45 2017

              ?_engine_left 009C               ?_configure_RX 0001               ?_engine_right 009C  
               _SSPSTATbits 000FC7                ___awdiv@sign 0016         ___wmul@multiplicand 0013  
               __CFG_BORV$3 000000                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                         l302 098E  
                       l321 0FCC                         l322 0FD6                         l242 0704  
                       l323 0FE0                         l235 11AC                         l324 0FEA  
                       l244 0724                         l325 0FF4                         l319 0FC2  
                       _ADC 0088                         l471 05CC                         _GIE 007F97  
              __CFG_CPB$OFF 000000                         _PR4 000FA9                __CFG_CPD$OFF 000000  
                       _adc 0008                         _msg 0045                         wreg 000FE8  
                _TXSTA2bits 000FBA                        ?_adc 0001                        l2202 0712  
                      l3002 0190                        l2060 0AC4                        l3012 01BC  
                      l2070 0AF6                        l2054 0AAC                        l2206 071A  
                      l3022 01FE                        l3006 019E                        l3014 01CE  
                      l3200 058A                        l3120 03CA                        l3112 03A6  
                      l3104 0382                        l3040 025A                        l3016 01E4  
                      l3008 01A8                        l3024 020E                        l2066 0AE6  
                      l2082 0B34                        l3210 05A6                        l3202 058E  
                      l3122 03D8                        l3018 01EC                        l3026 0224  
                      l2316 0BFE                        l2340 0D6E                        l2068 0AF2  
                      l3212 05AA                        l3124 03DE                        l3044 0280  
                      l2318 0C0A                        l2342 0D70                        l2086 0B4A  
                      l2078 0B26                        l3150 045A                        l3142 043E  
                      l3046 0286                        l2192 06FA                        l3160 04A2  
                      l3136 042C                        l3128 0402                        l3080 0316  
                      l3072 02F2                        l3064 02CE                        l2290 0B60  
                      l2098 0870                        l3170 04E2                        l3226 05EA  
                      l2188 06F2                        l3180 051A                        l3164 04D0  
                      l3228 0618                        l2366 0CC2                        l3182 0536  
                      l3158 049A                        l2368 0CC6                        l3096 035E  
                      l3088 033A                        l2810 0E3A                        l3194 0570  
                      l3178 04FE                        l2812 0E42                        l2804 0E24  
                      l3188 055E                        l2830 0E7A                        l2822 0E62  
                      l2814 0E46                        l2910 0FB4                        l2904 0F78  
                      l2826 0E6C                        l2850 0934                        l2844 0906  
                      l2932 1032                        l2924 0F50                        l2846 0920  
                      l2838 08B4                        l2918 0F14                        l2856 094C  
                      l2848 0924                        l2936 1042                        l2876 0FFE  
                      l2798 0E14                        l2886 0D90                        l2896 0DF6  
                      l2888 0D9A                        l2988 0140                        _ADIE 007CEE  
                      _ADIF 007CF6                        _FPGA 0048                        u2200 098E  
                      u1410 0D0C                        u1420 0D34                        u1255 076E  
                      u1416 0D0E                        u1265 07B8                        u2161 08AA  
                      u1426 0D36                        u2170 08C2                        u1515 0C9C  
                      u1445 0D48                        u1285 07FA                        u1295 0844  
                      u1480 0C5C                        u2280 014C                        u1490 0C86  
                      u1486 0C5E                        u1496 0C88                        u2640 03F4  
                      u2298 0150                        u2708 04B2                        u2807 029E  
                      u2817 0620                        u2690 04AE                        u2827 0F42  
                      _PEIE 007F96                        u2837 0FA6                        u2847 0DE8  
                      u2857 0638                        u2777 0112                        u2867 064E  
                      u2787 0128                        u2877 0750                        u2797 0186  
                      u2887 1068                        _PIR1 000F9E                        _RCON 000FD0  
                      _TMR4 000F87                        _buff 0074                        _main 00D4  
                      _duty 003D                        fsr0h 000FEA                        fsr1h 000FE2  
                      fsr2h 000FDA                        fsr0l 000FE9                        indf2 000FDF  
                      fsr1l 000FE1                        fsr2l 000FD9                        btemp 004F  
                      prodh 000FF4                        prodl 000FF3                        start 00D0  
             __CFG_IESO$OFF 000000               __CFG_FOSC$HS1 000000               __CFG_MCLRE$ON 000000  
              ___param_bank 000000              ??_configure_RX 0012              ??_engine_right 009F  
                     ??_adc 0001           ??_init_spi_master 0011                engine_left@D 009C  
           __end_of___aldiv 0B5C                       ?_main 0001             __end_of___awdiv 0E84  
           ___awdiv@divisor 0013                       _RC2IF 007D25                       _T4CON 000F88  
                     i2l400 0078             ___awdiv@counter 0015                       _PORTA 000F80  
                     _PORTB 000F81                       _PORTC 000F82                       _PORTD 000F83  
                     _PORTE 000F84                       _TRISA 000F92                       _TRISB 000F93  
                     _TRISC 000F94                       _TRISD 000F95                       _TRISE 000F96  
             __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000  
             __CFG_WRT3$OFF 000000              __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000  
            __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000  
     engine_right@next_duty 00A1               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000              __CFG_EBTRB$OFF 000000             __end_of_initPIC 0A90  
                     _brake 1020                       _flush 116A                       _value 008E  
           __end_of_set_PWM 114E             __end_of_set_dir 1020                       pclath 000FFA  
                     tablat 000FF5                       plusw1 000FE3                       plusw2 000FDB  
                     status 000FD8       _spi_transmission_done 004D             __initialization 10A2  
              __end_of_main 062C                      ??_main 00A5               __activetblptr 000002  
            __CFG_RETEN$OFF 000000               configure_RX@j 0014                      ?_brake 0001  
                    _ADCON0 000FC2                      _ADCON1 000FC1                      ?_flush 0001  
                    _CANCON 000F6F                      _ADRESH 000FC4                      _ADRESL 000FC3  
                    _CCPR3L 000F4E                      _CCPR4L 000F4B                      _ANCON0 000F5D  
                    _ANCON1 000F5C            ___awdiv@dividend 0011       __size_of_check_MAX_RT 0024  
             engine_right@D 009C             __CFG_BBSIZ$BB2K 000000                      _INTCON 000FF2  
                    _RCREG2 000F7A                      _MAX_RT 004E                      _RXB0D0 000F66  
                    _RXB1D0 000F36                      _SPBRG2 000F7B                      _TRISE0 007CB0  
                    _TRISE1 007CB1                      _SSPBUF 000FC9                      _TXREG2 000F79  
              ?_UART_Init_2 001F              __CFG_XINST$OFF 000000               dec_to_bin@bin 0031  
             dec_to_bin@pos 0037                   ??___aldiv 0019                      ___wmul 10C8  
                 ??___awdiv 0015              __CFG_STVREN$ON 000000                      _engine 0D74  
      __size_of_engine_left 0064                      clear_0 10A8                      clear_1 10B4  
                    _set_AD 1180            ___awdiv@quotient 0017                      _value0 008A  
                    _value1 008C                   ??_initPIC 0011            __end_of_reset_RX 10A2  
              _check_MAX_RT 10EE            __end_of_set_duty 0EF6                   ??_set_PWM 0011  
                    tblptrh 000FF7                   ??_set_dir 0011                      tblptrl 000FF6  
                    tblptru 000FF8        __end_of_configure_RX 075C        __end_of_engine_right 0F5A  
           _retransmissions 004B                  __accesstop 0060     __end_of__initialization 10BA  
             spi_write@data 0011               ___rparam_used 000001              __pcstackCOMRAM 0001  
             __end_of_brake 1072               __end_of_flush 1180                     ??_brake 009C  
                   ??_flush 0012                  _dec_to_bin 0888                  __pbssBANK0 0060  
           __CFG_PLLCFG$OFF 000000                  __pnvCOMRAM 004E             _init_spi_master 114E  
                   ?___wmul 0011              engine_left@dir 009E                     ?_engine 009C  
                   _CCP3CON 000F4D                     _CCP4CON 000F4A                     _ECANCON 000F72  
                   ?_set_AD 0001                     _BRGCON1 000E43                     _BRGCON2 000E44  
                   _BRGCON3 000E45                     _HLVDCON 000FA8                     _INTCON2 000FF1  
                   _INTCON3 000FF0            __CFG_CANMX$PORTB 000000               ?_reset_MAX_RT 0001  
                   _GO_STOP 003F                     _RXB0DLC 000F65                     _RXB1DLC 000F35  
        __size_of_spi_write 0010      __size_of_CAN_RX_read_0 00A8      __size_of_CAN_RX_read_1 00B4  
        __size_of_write_ACK 001E             __CFG_PWRTEN$OFF 000000                     __Hparam 0000  
                 ?_reset_RX 0001                     __Lparam 0000                   ?_set_duty 0039  
      __size_of_UART_Init_2 012C                     ___aldiv 0A90                     ___awdiv 0E00  
           __size_of___wmul 0026             __size_of_engine 008C                   _CAN_msg_0 004A  
                 _CAN_msg_1 0049                     __pcinit 10A2                     __ramtop 0F00  
           __size_of_set_AD 0012                     __ptext0 00D4                     __ptext1 1112  
                   __ptext2 1130                     __ptext3 1180                     __ptext4 1072  
                   __ptext5 1192                     __ptext6 114E                     __ptext7 0998  
                   __ptext8 116A                     __ptext9 0EF6                     _initPIC 0998  
            ??_reset_MAX_RT 0012       __size_of_configure_RX 0130                __size_of_adc 00C8  
     __size_of_engine_right 0064            ___aldiv@dividend 0011                   _T4CONbits 000F88  
                   _set_PWM 1130           __CFG_MSSPMSK$MSK7 000000                     _set_dir 0FBE  
                   engine@D 009C     __end_of_init_spi_master 116A                 ?_dec_to_bin 0019  
      end_of_initialization 10BA               __Lmediumconst 0000             engine@next_duty 00A1  
                ??_reset_RX 0012                  ??_set_duty 0096           __end_of_spi_write 11B4  
          ___aldiv@quotient 001B                     postdec2 000FDD               _CAN_RX_read_0 0CCC  
             _CAN_RX_read_1 0C18                     postinc0 000FEE                     postinc2 000FDE  
              _configure_RX 062C                _engine_right 0EF6                   _PORTBbits 000F81  
                 _PORTCbits 000F82                   _PORTDbits 000F83                   _PORTEbits 000F84  
         __end_of_write_ACK 1130                   _TRISCbits 000F94                   _TRISDbits 000F95  
             ??_engine_left 009F              ?_CAN_RX_read_0 0001              ?_CAN_RX_read_1 0001  
            __end_of___wmul 10EE         __size_of_dec_to_bin 0110              __end_of_engine 0E00  
            __end_of_set_AD 1192         start_initialization 10A2                 __end_of_adc 00D0  
         _CAN_RX_initialize 0B5C            ?_init_spi_master 0001                 _CANSTATbits 000F6E  
        ?_CAN_RX_initialize 0001            dec_to_bin@F15303 0060        __end_of_reset_MAX_RT 11A4  
       ??_CAN_RX_initialize 0011                    ??___wmul 0015                 _CCPTMRSbits 000F99  
                  ??_engine 009F                    ??_set_AD 0011         __end_of_engine_left 0FBE  
        check_MAX_RT@MAX_RT 0013                 __pbssCOMRAM 003B   __end_of_CAN_RX_initialize 0C18  
             __pcstackBANK0 0096          check_MAX_RT@buffer 0012               brake@last_dir 00A0  
           ??_CAN_RX_read_0 0011             ??_CAN_RX_read_1 0011                   __pintcode 0008  
                  ?___aldiv 0011                    ?___awdiv 0011           __size_of_reset_RX 0030  
         __size_of_set_duty 0072             _counter_no_data 0086                   _buff_retr 007E  
              _horn_counter 0092                    ?_initPIC 0001                 _COMSTATbits 000F71  
                 _last_FPGA 0047                    ?_set_PWM 0001                    ?_set_dir 0001  
            __size_of_brake 0052                  set_dir@dir 0011                ??_dec_to_bin 001B  
            __size_of_flush 0016             ___aldiv@divisor 0015             ___aldiv@counter 0019  
           engine_right@dir 009E              ___wmul@product 0015               _set_duty$2393 0098  
                  _LATAbits 000F89                    _LATBbits 000F8A                    _LATCbits 000F8B  
                  _LATDbits 000F8C                    _LATEbits 000F8D               ??_UART_Init_2 0023  
                  _PIE1bits 000F9D                   brake@duty 009D                    _PIR1bits 000F9E  
                  _RXB0SIDL 000F62                    _RXF0EIDH 000EE2                    _RXB1SIDL 000F32  
                  _RXF0EIDL 000EE3                 _engine_left 0F5A                    _RXF2EIDH 000EEA  
                  _RXF2EIDL 000EEB                    _RXF0SIDH 000EE0                    _RXF0SIDL 000EE1  
                  _RXF2SIDH 000EE8                    _RXF2SIDL 000EE9                    _RXM0EIDH 000EFA  
                  _RXM0EIDL 000EFB                    _RXM1EIDH 000EFE                    _RXM1EIDL 000EFF  
              _REVERSE_STOP 0094                    _RXM0SIDH 000EF8                    _RXM0SIDL 000EF9  
                  _RXM1SIDH 000EFC                    _RXM1SIDL 000EFD                   _spi_write 11A4  
        __end_of_dec_to_bin 0998                  _ADCON0bits 000FC2                   engine@MAX 00A3  
                _ADCON2bits 000FC0           ___wmul@multiplier 0011            __CFG_SOSCSEL$DIG 000000  
                 engine@dir 009E               ?_check_MAX_RT 0001  __size_of_CAN_RX_initialize 00BC  
                 _write_ACK 1112                 _INTCON3bits 000FF0       __size_of_reset_MAX_RT 0012  
                _ANCON0bits 000F5D                    __Hrparam 0000                _RXB0SIDLbits 000F62  
               dec_to_bin@A 001D                    __Lrparam 0000                _RXB1SIDLbits 000F32  
               dec_to_bin@i 0035                 dec_to_bin@n 0019          __CFG_BOREN$SBORDIS 000000  
       __end_of_UART_Init_2 0888            __size_of___aldiv 00CC            __size_of___awdiv 0084  
                _CIOCONbits 000F70                  ?_spi_write 0001             dec_to_bin@power 0033  
            ??_check_MAX_RT 0012                    _data_ACK 004C            __size_of_initPIC 00F8  
              _reset_MAX_RT 1192            __size_of_set_PWM 001E                UART_Init_2@x 002B  
                ?_write_ACK 0001                    __ptext10 0F5A                    __ptext11 0D74  
                  __ptext20 0FBE                    __ptext12 062C                    __ptext21 075C  
                  __ptext13 10EE                    __ptext22 0A90                    __ptext14 11A4  
                  __ptext23 0C18                    __ptext15 1020                    __ptext24 0CCC  
                  __ptext16 0E84                    __ptext25 0B5C                    __ptext17 0888  
                  __ptext18 10C8                 _error_motor 003B                    __ptext19 0E00  
          __size_of_set_dir 0062               __size_of_main 0558                   set_duty@D 0039  
                 set_duty@d 009A                    brake@dir 009F                    _reset_RX 1072  
                  _set_duty 0E84         _counter_error_motor 0090                    int$flags 004F  
       __CFG_INTOSCSEL$HIGH 000000        engine_left@next_duty 00A1                 _RXB0DLCbits 000F65  
               _RXB1DLCbits 000F35                 _RXB0CONbits 000F60                 _RXB1CONbits 000F30  
        __CFG_WDTEN$SWDTDIS 000000               write_ACK@data 0012           reset_RX@buffer_RX 0012  
                  intlevel2 0000                  _RCSTA2bits 000FA6                 _UART_Init_2 075C  
  __size_of_init_spi_master 001C         UART_Init_2@baudrate 001F          __CFG_WDTPS$1048576 000000  
               ??_spi_write 0011                ___aldiv@sign 001A                 _SSPCON1bits 000FC6  
               ??_write_ACK 0012         __CFG_BORPWR$ZPBORMV 000000            _front_ultrasonic 0041  
      __end_of_check_MAX_RT 1112             _back_ultrasonic 0043       __end_of_CAN_RX_read_0 0D74  
     __end_of_CAN_RX_read_1 0CCC  
